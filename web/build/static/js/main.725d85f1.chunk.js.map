{"version":3,"sources":["Pages/Layout/images/readit_logo_light.png","Pages/About/images/readit_logo_black.png","Pages/Layout/style.js","Themes/DefaultTheme/BaseTheme.js","Themes/DefaultTheme/LightTheme.js","Utilities/Rest.js","Utilities/Auth.js","Pages/Auth/style.js","Pages/Auth/index.js","Pages/Registration/index.js","Pages/Layout/Components/ThreadsListItem.js","Utilities/ConfirmDialog.js","Pages/ThreadDetails/Components/style.js","Utilities/Components/ParsedMessage.js","Pages/ThreadDetails/Components/Question.js","Pages/ThreadEditor/index.js","Pages/Account/Components/style.js","Pages/Account/Components/ImagePicker/style.js","Pages/Account/Components/ImagePicker/index.js","Pages/Account/Components/UserAvatar.js","Pages/Account/Components/Info.js","Pages/Account/Components/Password.js","Pages/Account/Components/DangerZone.js","Pages/Account/index.js","Pages/Users/index.js","Pages/ThreadsViewer/style.js","Pages/ThreadsViewer/index.js","Pages/ThreadDetails/style.js","Pages/ThreadDetails/Components/AnswerListItem.js","Pages/ThreadDetails/index.js","Pages/About/style.js","Pages/About/index.js","Pages/Layout/Components/PagesSwitch.js","Pages/Layout/Components/style.js","Pages/Layout/Components/Footer.js","Pages/Layout/Components/MenuButtons.js","Pages/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","header","colorDefault","palette","primary","dark","root","flexGrow","menuButton","marginRight","spacing","title","leftColumn","backgroundColor","layout","main","color","common","white","borderTop","util","separator","topLine","contentColumn","minHeight","rightColumn","light","leftPanelButtonsText","paddingLeft","searchLineBase","display","width","createThreadButtonContainer","height","alignItems","createThreadButtonBox","avatar","marginLeft","menuIcon","menuDrawer","maxWidth","appBarMobileMargin","marginTop","appBarDesktopMargin","logo","createMuiTheme","overrides","MuiAppBar","colorPrimary","grey","blueGrey","footer","secondary","green","request","endPoint","console","error","rlog","p","s","log","post","route","url","superagent","set","withCredentials","put","delete","get","coreRequest","path","process","AuthContext","React","createContext","user","token","AuthProvider","props","useState","setUser","setToken","Provider","value","isAdmin","is_admin","useAuth","useContext","paper","Auth","authData","setAuthData","onComplete","showPassword","setShowPassword","setError","email","password","remember","data","setData","classes","Paper","className","List","ListItem","Typography","variant","Input","placeholder","fullWidth","required","autoComplete","onChange","event","persist","last","target","id","type","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","item","Visibility","VisibilityOff","ListItemText","ListItemSecondaryAction","Checkbox","checked","Button","send","then","response","body","catch","status","err","Registration","username","history","useHistory","repeatpassword","errors","setErrors","handleChangeData","name","FormHelperText","password_confirmation","undefined","push","key","message","handleRegisterError","ThreadsListItem","thread","reply_count","button","ListItemAvatar","Avatar","src","Divider","ConfirmDialogContext","ConfirmDialogProvider","children","defaultSettings","text","size","userFunc","settings","open","setSettings","a","func","handleClose","handleCancel","handleAgree","Fragment","autoFocus","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","useConfirmDialog","listItemTextFix","paddingRight","wordWrap","worldWrap","ParsedMessage","confirm","result","linkIndex","includes","indexOf","head","slice","tailIndex","length","link","linkText","Tooltip","Link","window","location","href","messageParser","Question","author","onEdited","preview","edit","setEdit","newData","setNewData","changeRoute","handleDataInput","handleDelete","useEffect","created_at","Date","toLocaleString","clsx","replace","TextField","label","style","whiteSpace","multiline","rows","TabPanel","index","other","role","hidden","ThreadEditor","tab","setTab","setThread","categories","setCategories","category","setCategory","handleInput","Grid","xs","Tabs","newValue","Tab","select","map","option","MenuItem","category_id","dangerZone","red","borderColor","noPaddingSides","overflow","justifyContent","alignContent","zIndex","input","left","top","borderRadius","textAlign","padding","messageUnloaded","img","imgIcon","displayNone","displayBlock","withWidth","onError","date","alt","files","accept","multiple","isWidthUp","UserAvatar","rect","setRect","setWidth","handleBoundsChange","innerWidth","addEventListener","removeEventListener","useCallback","node","getBoundingClientRect","useClientRect","ref","image","toString","setAvatar","useParams","handleGetAvatar","picture","attach","Info","origUserdata","init","editMode","setEditMode","userdata","setUserdata","container","md","Box","updated_at","fontSize","disabled","about_me","ShowPasswordAdornment","handleClick","shown","Password","oldpassword","newpassword","confirmnewpassword","handleShowPassword","FormControl","DangerZone","viewed_user","updateInfo","handleDeleteAccount","handleMakeAdmin","handleMakeNotAdmin","Account","interests","setOrigUserdata","connecting","setConnecting","loading","pause","UserCard","Card","CardActionArea","CardMedia","component","CardContent","gutterBottom","CardActions","Users","users","setUsers","Breadcrumbs","threadsList","pagination","paginationContainer","ratingBadge","ThreadListItem","Badge","badgeContent","showZero","views_count","ThreadsViewer","articles","setArticles","sortBy","setSortBy","pages","setPages","page","setPage","useLocation","mode","search","qs","parse","ignoreQueryPrefix","updater","useRef","getArticles","query","sort","meta","last_page","clearInterval","current","setInterval","ToggleButtonGroup","exclusive","ToggleButton","Pagination","count","width100","AnswerListItem","answer","mounted","overflowHidden","setAuthor","answers","setAnswers","myAnswer","setMyAnswer","getQuestions","replies","user_id","handleUpdateAnswers","About","justify","PagesSwitch","exact","copyright","Footer","ThemeProvider","BaseTheme","align","MenuButtons","dense","setSearch","gotUser","setGotUser","register","login","menu","topArticles","setTopArticles","handleLoadTop10Threads","handleLogout","handleFindQuestion","handleAuthenticated","pathname","isWidthDown","SwipeableDrawer","anchor","onOpen","swipeAreaWidth","paperAnchorLeft","edge","ButtonGroup","AppBar","Toolbar","lg","LightTheme","onKeyPress","createThreadButton","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.725d85f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/readit_logo_light.c0e0608c.png\";","module.exports = __webpack_public_path__ + \"static/media/readit_logo_black.037e3569.png\";","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        colorDefault: theme.palette.primary.dark,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    leftColumn: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n        borderTop: `1px solid ${theme.palette.util.separator}`,\r\n    },\r\n    topLine: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n    },\r\n    contentColumn: {\r\n        backgroundColor: theme.palette.common.white,\r\n        minHeight: `calc(100vh - 64px)`,\r\n    },\r\n    rightColumn: {\r\n        backgroundColor: theme.palette.layout.light,\r\n    },\r\n    leftPanelButtonsText: {\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    searchLineBase: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    createThreadButtonContainer: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n        alignItems: 'stretch',\r\n    },\r\n    createThreadButtonBox: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n    menuIcon: {\r\n        color: theme.palette.common.white,\r\n    },\r\n    menuDrawer: {\r\n        maxWidth: '80vw',\r\n    },\r\n    appBarMobileMargin: {\r\n        marginTop: '56px',\r\n    },\r\n    appBarDesktopMargin: {\r\n        marginTop: '64px',\r\n    },\r\n    logo: {\r\n        height: '35px',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, grey} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            colorPrimary: {\r\n                backgroundColor: grey[900],\r\n            },\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[600],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[100],\r\n        },\r\n/*\r\n        secondary: {\r\n            main:\r\n        },\r\n\r\n */\r\n        layout: {\r\n            main: blueGrey[800],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[50],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        },\r\n        footer: {\r\n            light:  blueGrey[800],\r\n            main: blueGrey[900],\r\n            dark: grey[900],\r\n        }\r\n    },\r\n});\r\n\r\nexport default theme;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, green, grey} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[100],\r\n            dark: blueGrey[300],\r\n            light: blueGrey[50],\r\n        },\r\n        secondary: {\r\n            main: green[700],\r\n            dark: green[900],\r\n            light: green[500],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        },\r\n        layout: {\r\n            main: blueGrey[800],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[50],\r\n        },\r\n        footer: {\r\n            light:  blueGrey[800],\r\n            main: blueGrey[900],\r\n            dark: grey[900],\r\n        }\r\n    },\r\n});\r\n\r\nexport default theme;","import superagent from 'superagent';\r\n\r\n\r\nexport const request = (endPoint) => {\r\n    if (!endPoint) {\r\n        console.error(\"request endPoint undefined\");\r\n    }\r\n    const rlog = (p, s) => console.log(`request.${p}:`, s);\r\n    return {\r\n        endPoint: () => endPoint,\r\n        post: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('post', url);\r\n            return superagent.post(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        put: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('put', url);\r\n            return superagent.put(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        delete: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('delete', url);\r\n            return superagent.delete(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        get: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('get', url);\r\n            return superagent.get(url).set('accept', 'application/json').withCredentials();\r\n        }\r\n    }\r\n};\r\n\r\nexport const coreRequest = (path = null) => {\r\n    return request(path || process.env.REACT_APP_CORE_URL);\r\n};\r\n","import React from 'react'\r\n\r\n\r\nconst AuthContext = React.createContext({user: null, token: null});\r\n\r\nfunction AuthProvider(props) {\r\n    const [user, setUser] = React.useState(null);\r\n    const [token, setToken] = React.useState(null);\r\n\r\n    const isAdmin = () => {\r\n        return user && !!user.is_admin;\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{user, setUser, token, setToken, isAdmin}} {...props} />\r\n    );\r\n}\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport {AuthProvider, useAuth}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        maxWidth: '300px',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\nexport default function Auth({\r\n                                 authData,\r\n                                 setAuthData,\r\n                                 onComplete = () => {\r\n                                 },\r\n                                 ...props\r\n                             }) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [error, setError] = React.useState(null);\r\n    const [data, setData] = React.useState({email: null, password: null, remember: false});\r\n    const {setUser} = useAuth();\r\n    const classes = useStyles();\r\n\r\n    if (!authData) {\r\n        authData = data;\r\n        setAuthData = setData;\r\n    }\r\n\r\n    function handleLogin() {\r\n        if (!authData.email || !authData.password) {\r\n            setError('Credential cannot be empty');\r\n            return;\r\n        }\r\n\r\n        coreRequest().post('auth/login')\r\n            .send(authData)\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                onComplete(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                try {\r\n                    switch (error.status) {\r\n                        case 403:\r\n                            setError('aAlready authenticated');\r\n                            break;\r\n                        case 422:\r\n                            setError('Incorrect email or password');\r\n                            break;\r\n                        default:\r\n                            setError('Unexpected error, see console for more information');\r\n                            console.error(error);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, password: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeEmail(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, email: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRememberMe(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, remember: event.target.checked || false}));\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <List>\r\n                {error && <ListItem>\r\n                    <Typography color={'error'} variant={'body2'}>\r\n                        {error}\r\n                    </Typography>\r\n                </ListItem>}\r\n                <ListItem>\r\n                    <Input\r\n                        placeholder={'Email'}\r\n                        fullWidth\r\n                        required\r\n                        autoComplete={'email'}\r\n                        onChange={handleChangeEmail}\r\n                        value={authData.email || ''}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Input\r\n                        id=\"standard-adornment-password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={authData.password || ''}\r\n                        placeholder={'Password'}\r\n                        onChange={handleChangePassword}\r\n                        autoComplete={'password'}\r\n                        fullWidth\r\n                        required\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleChangeShowPassword}\r\n                                >\r\n                                    {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={'Remember me'}/>\r\n                    <ListItemSecondaryAction>\r\n                        <Checkbox checked={authData.remember} onChange={handleRememberMe}/>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button fullWidth onClick={handleLogin}>\r\n                        Sign in\r\n                    </Button>\r\n                </ListItem>\r\n            </List>\r\n        </Paper>\r\n    );\r\n}","import React from 'react';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nexport default function Registration({authData, setAuthData, onComplete, ...props}) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [data, setData] = React.useState({username: null, password: null, email: null});\r\n    const {setUser} = useAuth();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = React.useState({username: null, email: null, password: null, repeatpassword: null});\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setData(last => ({...last, password: event.target.value || null}));\r\n    }\r\n\r\n    function handleChangeData(event) {\r\n        event.persist();\r\n        setData(last => ({...last, [event.target.name]: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRegisterError(error) {\r\n        setErrors({username: null, email: null, password: null, repeatpassword: null});\r\n        switch (error.status) {\r\n            case 422:\r\n                const errors = error.response.body.errors;\r\n                for (const key in errors) {\r\n                    let message = 'Unresolved error';\r\n                    const error = errors[key][0];\r\n                    if (error) {\r\n                        switch (error) {\r\n                            case 'validation.email':\r\n                                message = 'Incorrect email';\r\n                                break;\r\n                            case 'validation.min.string':\r\n                                message = 'Password is too short';\r\n                                break;\r\n                            case 'validation.unique':\r\n                                message = 'Username is already taken';\r\n                                break;\r\n                        }\r\n                        setErrors(last => ({...last, [key]: message}));\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    function handleRegister() {\r\n        coreRequest().post('auth/register')\r\n            .send({...data, password_confirmation: data.password, name: data.username, username: undefined})\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                changeRoute(`/user/${response.body.data.id}`);\r\n                onComplete();\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                handleRegisterError(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Username'}\r\n                            fullWidth\r\n                            required\r\n                            name={'username'}\r\n                            onChange={handleChangeData}\r\n                            value={data.username || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.username && <FormHelperText error> {errors.username} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Email'}\r\n                            fullWidth\r\n                            required\r\n                            name={'email'}\r\n                            onChange={handleChangeData}\r\n                            value={data.email || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.email && <FormHelperText error> {errors.email} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            id=\"standard-adornment-password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={data.password || ''}\r\n                            placeholder={'Password'}\r\n                            onChange={handleChangePassword}\r\n                            required\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleChangeShowPassword}\r\n                                    >\r\n                                        {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    }\r\n                    secondary={errors.password && <FormHelperText error> {errors.password} </FormHelperText>}\r\n                />\r\n\r\n            </ListItem>\r\n            <ListItem>\r\n                <Button fullWidth onClick={handleRegister}>\r\n                    Sign up\r\n                </Button>\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}","import React from \"react\";\r\nimport useStyles from \"../style\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n//MUI icons\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\n\r\n\r\nexport default function ThreadsListItem({thread, ...props}) {\r\n    const history = useHistory();\r\n\r\n    const primary = (\r\n        <Typography variant={'body2'}>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <>\r\n            {`${thread.reply_count} відповідей`}\r\n        </>\r\n    );\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem\r\n                button\r\n                onClick={event => changeRoute(`/thread/${thread.id}`)}\r\n            >\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${thread.user.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={primary} secondary={secondary}/>\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}","import React from 'react'\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst ConfirmDialogContext = React.createContext({user: null, token: null});\r\n\r\nfunction ConfirmDialogProvider({children, ...props}) {\r\n    const defaultSettings = {\r\n        title: 'Are you sure?',\r\n        text: '',\r\n        size: 'middle',\r\n        type: 'yesno',\r\n        userFunc: () => {\r\n        }\r\n    };\r\n\r\n    const [settings, setSettings] = React.useState({\r\n        settings: defaultSettings,\r\n        open: false,\r\n    });\r\n\r\n    async function confirm(func = () => {}, {title = 'Are you sure?', text = '', size = 'middle', type = 'yesno'}) {\r\n        setSettings({\r\n            settings: {text, size, type, title, userFunc: func},\r\n            open: true,\r\n        });\r\n    }\r\n\r\n    function handleClose() {\r\n        setSettings({\r\n            settings: defaultSettings,\r\n            open: false,\r\n        });\r\n    }\r\n\r\n    function handleCancel() {\r\n        handleClose();\r\n    }\r\n\r\n    function handleAgree() {\r\n        handleClose();\r\n        settings.settings.userFunc();\r\n    }\r\n\r\n    let buttons = (\r\n        <React.Fragment>\r\n            <Button onClick={handleAgree} color=\"primary\">\r\n                Yes\r\n            </Button>\r\n            <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                No\r\n            </Button>\r\n        </React.Fragment>\r\n    );\r\n\r\n    switch (settings.settings.type) {\r\n        case 'continue':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Continue\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case 'accept':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Accept\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case 'confirmdecline':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                    <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                        Decline\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n    }\r\n\r\n\r\n    return (\r\n        <ConfirmDialogContext.Provider value={confirm} {...props} >\r\n            <Dialog\r\n                open={settings.open}\r\n                onClose={handleCancel}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{settings.settings.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {settings.settings.text}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                        No\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {children}\r\n        </ConfirmDialogContext.Provider>\r\n    );\r\n}\r\n\r\nconst useConfirmDialog = () => React.useContext(ConfirmDialogContext);\r\n\r\nexport {ConfirmDialogProvider, useConfirmDialog}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItemTextFix: {\r\n        paddingRight: theme.spacing(6),\r\n        wordWrap: 'break-word',\r\n    },\r\n    worldWrap: {\r\n        wordWrap: 'break-word',\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import Link from \"@material-ui/core/Link\";\r\nimport React from \"react\";\r\nimport {useConfirmDialog} from \"./../ConfirmDialog\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nexport function messageParser(message, confirm) {\r\n    const result = [];\r\n    while (message.includes('http://') || message.includes('https://')) {\r\n        const linkIndex = message.includes('http://') ? message.indexOf('http://') : message.indexOf('https://');\r\n        const head = message.slice(0, linkIndex);\r\n        let tailIndex = message.indexOf(' ', linkIndex);\r\n        if (tailIndex === -1) tailIndex = message.length - 1;\r\n        const link = message.slice(linkIndex, tailIndex);\r\n        let linkText = link.slice(0, 40);\r\n        if (link.length > 40) {\r\n            linkText += '...';\r\n        }\r\n        message = message.slice(tailIndex, message.length - 1);\r\n        head && result.push(head);\r\n        link && result.push(\r\n            <Tooltip title={link} aria-label=\"link\" key={`link-${link}`}>\r\n                <Link\r\n                    onClick={\r\n                        event => confirm(\r\n                            () => {\r\n                                window.location.href = link\r\n                            },\r\n                            {\r\n                                text: `Link ${linkText} is custom user link and does not belong to our application. You follow this link to your own risk and peril.`,\r\n                                title: `Confirm redirect by user hyperlink`,\r\n                                type: 'continue',\r\n                            })\r\n                    }\r\n                >\r\n                    {linkText}\r\n                </Link>\r\n            </Tooltip>\r\n        );\r\n    }\r\n    message && result.push(message);\r\n    return result;\r\n}\r\n\r\n\r\nexport default function ParsedMessage({message = ''}) {\r\n    const confirm = useConfirmDialog();\r\n    return (\r\n        <React.Fragment>\r\n            {messageParser(message, confirm)}\r\n        </React.Fragment>\r\n    );\r\n}","import React from \"react\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useConfirmDialog} from '../../../Utilities/ConfirmDialog'\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n\r\n//Custom components\r\nimport ParsedMessage from \"../../../Utilities/Components/ParsedMessage\";\r\n\r\nexport default function Question({\r\n                                     author,\r\n                                     thread,\r\n                                     onEdited = () => {\r\n                                     },\r\n                                     preview = false,\r\n                                     ...props\r\n                                 }) {\r\n    const history = useHistory();\r\n    const {user, isAdmin} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState({title: thread.title, body: thread.body});\r\n    const loading = false;\r\n    const confirm = useConfirmDialog();\r\n    const classes = useStyles();\r\n\r\n    React.useEffect(() => {\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }, [thread]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setNewData({...newData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`questions/${thread.id}`)\r\n            .send({...newData, body: newData.body.replace(/(\\n\\n\\n)+/g, '\\n'), title: newData.title.replace(/\\n/g, '')})\r\n            .then(response => {\r\n                console.log(response);\r\n                setEdit(false);\r\n                onEdited(newData);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryToDelete() {\r\n        confirm(handleDelete, {\r\n            title: `Ви впевнені, що хочете видалити питання: ${thread.title}`,\r\n            text: 'Ця операція не може бути відмінена'\r\n        });\r\n    }\r\n\r\n    function handleDelete() {\r\n        coreRequest().delete(`questions/${thread.id}`)\r\n            .then(response => {\r\n                changeRoute('/threads');\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }\r\n\r\n    if (loading) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem id={'author'} button onClick={event => changeRoute(`/user/${author.id}`)}>\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${author.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={author.name}\r\n                    secondary={`опубліковано ${thread.created_at && new Date(thread.created_at).toLocaleString() || 'just now'}`}\r\n                    className={clsx((user && user.id === author.id || isAdmin()) && classes.listItemTextFix)}\r\n                />\r\n                {(user && user.id === author.id || isAdmin()) && !preview &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleTryToDelete}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <ListItem id={'question'}>\r\n                {!edit &&\r\n                <Typography variant={'h5'}>\r\n                    {thread.title}\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    fullWidth\r\n                    label={'Питання'}\r\n                    required\r\n                    value={newData.title}\r\n                    name={'title'}\r\n                    variant={'outlined'}\r\n                    onChange={handleDataInput}\r\n                />\r\n                }\r\n            </ListItem>\r\n            <ListItem>\r\n                {!edit &&\r\n                <Typography variant={'body1'}>\r\n                    {thread.body &&\r\n                    <Typography style={{whiteSpace: 'pre-wrap'}}>\r\n                        <ParsedMessage message={thread.body} style={{whiteSpace: 'pre-wrap'}}/>\r\n                    </Typography>\r\n                    }\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    fullWidth\r\n                    label={'Детально'}\r\n                    required\r\n                    value={newData.body}\r\n                    name={'body'}\r\n                    variant={'outlined'}\r\n                    size={\"small\"}\r\n                    onChange={handleDataInput}\r\n                    multiline\r\n                    rows={6}\r\n                />\r\n                }\r\n            </ListItem>\r\n        </>\r\n    );\r\n}","import React from 'react'\r\nimport {coreRequest} from '../../Utilities/Rest'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Question from './../ThreadDetails/Components/Question'\r\nimport {useHistory} from 'react-router-dom';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n\r\nfunction TabPanel({children, value, index, ...other}) {\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`thread-editor-tabpanel--${index}`}\r\n            aria-labelledby={`thread-editor-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                children\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ThreadEditor({...props}) {\r\n    const [tab, setTab] = React.useState(0);\r\n    const [thread, setThread] = React.useState({title: null, body: null});\r\n    const [categories, setCategories] = React.useState([]);\r\n    const [category, setCategory] = React.useState(null);\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        coreRequest().get('categories')\r\n            .then(response => {\r\n                setCategories(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    function handleSubmit() {\r\n        try {\r\n            coreRequest().post('questions')\r\n                .send({...thread, category_id: category, body: thread.body.replace(/(\\n\\n\\n)+/g, '\\n'), title: thread.title.replace(/\\n/g, '')})\r\n                .then(response => {\r\n                    changeRoute(`/thread/${response.body.data.id}`);\r\n                })\r\n                .catch(error => {\r\n                    switch (error.status) {\r\n                        case 401:\r\n                            changeRoute('?login=true');\r\n                            break;\r\n                    }\r\n                });\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    function handleChangeTab(event, newValue) {\r\n        setTab(newValue);\r\n    }\r\n\r\n    function handleInput(event) {\r\n        setThread({...thread, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function handleCategorySelect(event) {\r\n        setCategory(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Tabs\r\n                value={tab}\r\n                onChange={handleChangeTab}\r\n                aria-label=\"simple tabs example\"\r\n                variant={'fullWidth'}\r\n            >\r\n                <Tab label=\"Редагування\"/>\r\n                <Tab label=\"Перегляд\"/>\r\n            </Tabs>\r\n            <TabPanel value={tab} index={0}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography variant={'h6'}>\r\n                            Створити питання\r\n                        </Typography>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            label={'Питання'}\r\n                            value={thread.title || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            name={'title'}\r\n                            onChange={handleInput}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            label={'Детально'}\r\n                            value={thread.body || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            multiline\r\n                            rows={10}\r\n                            name={'body'}\r\n                            onChange={event => handleInput(event, 'body')}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            select\r\n                            name={'category_id'}\r\n                            label={'Категорія'}\r\n                            value={category || ''}\r\n                            onChange={handleCategorySelect}\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                        >\r\n                            {categories.map(option => (\r\n                                <MenuItem key={option.id} value={option.id}>\r\n                                    {option.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Підтвердити\r\n                        </Button>\r\n                    </ListItem>\r\n                </List>\r\n            </TabPanel>\r\n            <TabPanel value={tab} index={1}>\r\n                <Question\r\n                    author={{username: 'Andreev Danil'}}\r\n                    preview\r\n                    thread={{\r\n                        title: thread.title || 'Заповніть поле питання щоб продовжити',\r\n                        body: thread.body || 'Заповніть поле детально щоб продовжити',\r\n                    }}\r\n                />\r\n            </TabPanel>\r\n        </Grid>\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\nimport {red} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItemTextFix: {\r\n        paddingRight: theme.spacing(5),\r\n    },\r\n    dangerZone: {\r\n        backgroundColor: red[700],\r\n        color: theme.palette.common.white,\r\n        borderColor: theme.palette.common.white,\r\n    },\r\n    noPaddingSides: {\r\n        paddingLeft: theme.spacing(0),\r\n        paddingRight: theme.spacing(0),\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        '&:hover div': {\r\n            display: 'block',\r\n            backgroundColor: 'rgba(0.5,0.5,0.5,0.4)',\r\n            zIndex: '1000',\r\n        },\r\n    },\r\n    input: {\r\n        zIndex: '1001',\r\n        left: '0',\r\n        top: '-100px',\r\n        width: '100%',\r\n        height: 'calc(100% + 100px)',\r\n        position: 'absolute',\r\n        color: 'transparent',\r\n        backgroundColor: 'transparent',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0.2,0.2,0.2,0.2)',\r\n        },\r\n        '&:active': {\r\n            backgroundColor: 'rgba(0.2,0.2,0.2,0.3)',\r\n        },\r\n    },\r\n    message: {\r\n        marginTop: 'calc(50% - 26px)',\r\n        borderRadius: '5px',\r\n        textAlign: 'center',\r\n        height: '20px',\r\n        width: '60%',\r\n        padding: theme.spacing(2),\r\n    },\r\n    messageUnloaded: {\r\n        display: 'block',\r\n        backgroundColor: 'rgba(0.5,0.5,0.5,0.4)',\r\n        zIndex: '1000',\r\n    },\r\n    img: {\r\n        color: 'white',\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n    },\r\n    imgIcon: {\r\n        color: 'white',\r\n        width: '80%',\r\n        height: '80%',\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n        padding: '10%',\r\n    },\r\n    displayNone: {\r\n        display: 'none',\r\n    },\r\n    displayBlock: {\r\n        display: 'block',\r\n    },\r\n\r\n}));\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport withWidth, {isWidthUp} from \"@material-ui/core/withWidth\";\r\n\r\n\r\nfunction ImagePicker({\r\n                         onChange = () => {\r\n                         },\r\n                         onError = () => {\r\n                         },\r\n                         src,\r\n                         width,\r\n                         date,\r\n                         children,\r\n                         ...props\r\n                     }) {\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n                <img\r\n                    src={src}\r\n                    className={clsx(classes.img, !src && classes.displayNone)}\r\n                    alt={date}\r\n                    onError={onError}\r\n                />\r\n                <ImageIcon className={clsx(classes.imgIcon, src && classes.displayNone)}/>\r\n                <input\r\n                    type={'file'}\r\n                    className={clsx(classes.input)}\r\n                    onChange={event => onChange(event.target.files)}\r\n                    accept={'.png,.jpg,.jpeg'}\r\n                    multiple={false}\r\n                />\r\n                {children &&\r\n                <div\r\n                    className={clsx(classes.message, isWidthUp('md', width) && classes.displayNone, !src && classes.messageUnloaded)}\r\n                >\r\n                    {children}\r\n                </div>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ImagePicker);","import Avatar from \"@material-ui/core/Avatar\";\r\nimport ImagePicker from \"./ImagePicker\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport React from \"react\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n\r\n\r\nfunction useClientRect() {\r\n    const [rect, setRect] = React.useState(null);\r\n    const [width, setWidth] = React.useState(0);\r\n    React.useEffect(() => {\r\n        function handleBoundsChange() {\r\n            setWidth(window.innerWidth);\r\n        }\r\n\r\n        window.addEventListener('resize', handleBoundsChange);\r\n        return () => window.removeEventListener('resize', handleBoundsChange);\r\n    }, []);\r\n\r\n    const ref = React.useCallback(node => {\r\n        if (node !== null) {\r\n            setRect(node.getBoundingClientRect());\r\n        }\r\n    }, [width]);\r\n    return [rect, ref];\r\n}\r\n\r\nexport default function UserAvatar({user = {}}) {\r\n    const [rect, ref] = useClientRect();\r\n    const [avatar, setAvatar] = React.useState({image: null, date: new Date().toString()});\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n\r\n    React.useEffect(() => {\r\n        handleGetAvatar();\r\n    }, [id]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleGetAvatar() {\r\n        setAvatar({image: `${process.env.REACT_APP_CORE_AVATARS}/${user.id}.jpg`, date: new Date().toString()});\r\n    }\r\n\r\n    function handleChangeAvatar(picture) {\r\n        coreRequest().post(`users/${user.id}/avatar`)\r\n            .attach('avatar', picture[0])\r\n            .then(response => {\r\n                handleGetAvatar();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Avatar\r\n            ref={ref}\r\n            style={{width: '100%', height: rect && rect.width}}\r\n        >\r\n            <ImagePicker\r\n                onChange={handleChangeAvatar}\r\n                onError={event => setAvatar({image: null, date: new Date().toString()})}\r\n                src={avatar.image}\r\n                date={avatar.date}\r\n            >\r\n                Загрузити аватар\r\n            </ImagePicker>\r\n        </Avatar>\r\n\r\n    );\r\n}","import React from \"react\";\r\nimport {useParams, useHistory} from 'react-router-dom'\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n//MUI icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n//Custom components\r\nimport UserAvatar from \"./UserAvatar\";\r\n\r\n\r\nexport default function Info({origUserdata, init, ...props}) {\r\n    const [editMode, setEditMode] = React.useState(false);\r\n    const {id} = useParams();\r\n    const [userdata, setUserdata] = React.useState({...origUserdata, id: undefined});\r\n    const {user, setUser, isAdmin} = useAuth();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    let loading = false;\r\n\r\n    React.useEffect(() => {\r\n        setUserdata({...origUserdata, id: undefined});\r\n    }, [origUserdata]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send(userdata)\r\n            .then(response => {\r\n                if (user.id === +id) {\r\n                    setUser(response.body.data);\r\n                }\r\n                setEditMode(false);\r\n                init();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleEdit() {\r\n        setEditMode(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setUserdata(origUserdata);\r\n        setEditMode(false);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setUserdata({...userdata, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    if (loading) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <ListItem>\r\n            <Grid container>\r\n                <Grid item xs={12} md={6}>\r\n                    <Box p={1}>\r\n                        <UserAvatar user={origUserdata}/>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={`${origUserdata.is_admin ? 'Admin |' : ''} Інформація`}\r\n                                secondary={`Оновлено ${new Date(userdata.updated_at).toLocaleString() || 'recently'}`}\r\n                                className={clsx(editMode && classes.listItemTextFix)}\r\n                            />\r\n                            {(user && user.id === +id || isAdmin()) &&\r\n                            <ListItemSecondaryAction>\r\n                                {!editMode &&\r\n                                <IconButton onClick={handleEdit}>\r\n                                    <EditIcon fontSize={'small'}/>\r\n                                </IconButton>\r\n                                }\r\n                                {editMode &&\r\n                                <React.Fragment>\r\n                                    <IconButton onClick={handleEditSubmit}>\r\n                                        <DoneIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                    <IconButton onClick={handleCancel}>\r\n                                        <CloseIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                </React.Fragment>\r\n                                }\r\n                            </ListItemSecondaryAction>\r\n                            }\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                fullWidth\r\n                                name={'name'}\r\n                                label={'Ім\\'я'}\r\n                                value={userdata.name}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                name={'email'}\r\n                                fullWidth\r\n                                label={'Email'}\r\n                                value={userdata.email}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid xs={12}>\r\n                    <TextField\r\n                        variant={'outlined'}\r\n                        multiline\r\n                        rows={editMode ? 10 : 5}\r\n                        label={'Про мене'}\r\n                        fullWidth\r\n                        name={'about_me'}\r\n                        onChange={handleDataInput}\r\n                        value={userdata.about_me}\r\n                        disabled={!editMode}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </ListItem>\r\n    );\r\n}","import ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport React from \"react\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\n\r\nfunction ShowPasswordAdornment({handleClick, shown, name}) {\r\n    return (\r\n        <InputAdornment position=\"end\">\r\n            <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={event => handleClick(event, name)}\r\n            >\r\n                {shown ? <Visibility/> : <VisibilityOff/>}\r\n            </IconButton>\r\n        </InputAdornment>\r\n    );\r\n}\r\n\r\nexport default function Password() {\r\n    const [showPassword, setShowPassword] = React.useState({\r\n        oldpassword: false,\r\n        newpassword: false,\r\n        confirmnewpassword: false,\r\n    });\r\n\r\n    function handleShowPassword(event, name) {\r\n        setShowPassword({...showPassword, [name]: !showPassword[name]})\r\n    }\r\n\r\n    return (\r\n        <ListItem>\r\n            <FormControl fullWidth>\r\n                <FormHelperText>\r\n                    Change password\r\n                </FormHelperText>\r\n                <Grid container>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                type={showPassword.oldpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Старий пароль'}\r\n                                autoComplete={'password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.oldpassword}\r\n                                        name={'oldpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                type={showPassword.newpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Новий пароль'}\r\n                                autoComplete={'new-password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.newpassword}\r\n                                        name={'newpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <Input\r\n                                required\r\n                                type={showPassword.confirmnewpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Підтвердити новий пароль'}\r\n                                autoComplete={'confirm-new-password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.confirmnewpassword}\r\n                                        name={'confirmnewpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                        >\r\n                            Змінити пароль\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n        </ListItem>\r\n    );\r\n}","import ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {useConfirmDialog} from \"../../../Utilities/ConfirmDialog\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nexport default function DangerZone({viewed_user, updateInfo, ...props}) {\r\n    const classes = useStyles();\r\n    const {user, setUser, setToken, isAdmin} = useAuth();\r\n    const {id} = useParams();\r\n    const history = useHistory();\r\n    const confirm = useConfirmDialog();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDeleteAccount() {\r\n        if (user) {\r\n            coreRequest().delete(`users/${id}`)\r\n                .then(response => {\r\n                    if (user.id == id) {\r\n                        setUser(null);\r\n                        setToken(null);\r\n                        changeRoute('/threads');\r\n                    } else {\r\n                        changeRoute('/users');\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    switch (error.status) {\r\n                        case 401:\r\n                            changeRoute('?login=true');\r\n                            break;\r\n                        default:\r\n                            console.error(error);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    function handleTryToDeleteAccount() {\r\n        confirm(handleDeleteAccount, {\r\n            title: ` Ви впевнені, що хочете видалити акаунт: ${viewed_user.name}`,\r\n            text: `Ця операція не може бути відмінена`,\r\n        })\r\n    }\r\n\r\n    function handleMakeAdmin() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send({is_admin: true})\r\n            .then(response => {\r\n                updateInfo();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryMakeAdmin() {\r\n        confirm(handleMakeAdmin, {\r\n            title: `Зробити ${viewed_user.name} | ${viewed_user.email} адміністратором?`,\r\n            text: `Це опасна операція, адміністратор може видаляти питання, відповіді, і користувачів. Також адміністратор може пивисити іншого користувача до адміністратора чи видалити його`,\r\n        });\r\n    }\r\n\r\n    function handleMakeNotAdmin() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send({is_admin: false})\r\n            .then(response => {\r\n                updateInfo();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryMakeNotAdmin() {\r\n        confirm(handleMakeNotAdmin, {\r\n            title: `Remove admin on ${viewed_user.name} | ${viewed_user.email}?`,\r\n            text: `After removing admin user can not modify and delete threads, answers, users and manage admins`,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ListItem className={classes.dangerZone}>\r\n            <FormControl fullWidth>\r\n                <FormHelperText className={classes.dangerZone}>\r\n                    Опасна зона\r\n                </FormHelperText>\r\n                <List>\r\n                    <ListItem className={classes.noPaddingSides}>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            className={classes.dangerZone}\r\n                            onClick={handleTryToDeleteAccount}\r\n                        >\r\n                            Видалити акаунт\r\n                        </Button>\r\n                    </ListItem>\r\n                    {isAdmin() && viewed_user.id !== user.id &&\r\n                    <React.Fragment>\r\n                        {!viewed_user.is_admin &&\r\n                        <ListItem className={classes.noPaddingSides}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant={'outlined'}\r\n                                className={classes.dangerZone}\r\n                                onClick={handleTryMakeAdmin}\r\n                            >\r\n                                Зробити адміністратором\r\n                            </Button>\r\n                        </ListItem>\r\n                        }\r\n                        {viewed_user.is_admin &&\r\n                        <ListItem className={classes.noPaddingSides}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant={'outlined'}\r\n                                className={classes.dangerZone}\r\n                                onClick={handleTryMakeNotAdmin}\r\n                            >\r\n                                Забрати адмінімтратора\r\n                            </Button>\r\n                        </ListItem>\r\n                        }\r\n                    </React.Fragment>\r\n                    }\r\n                </List>\r\n            </FormControl>\r\n        </ListItem>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//Custom components\r\nimport Info from './Components/Info'\r\nimport Password from \"./Components/Password\";\r\nimport DangerZone from \"./Components/DangerZone\";\r\n\r\n\r\nexport default function Account() {\r\n    const {user, isAdmin} = useAuth();\r\n    const {id} = useParams();\r\n    const [origUserdata, setOrigUserdata] = React.useState({\r\n        name: '',\r\n        email: '',\r\n        interests: '',\r\n        about_me: '',\r\n    });\r\n    const [connecting, setConnecting] = React.useState(true);\r\n    let loading = false;\r\n\r\n    function init(pause = false) {\r\n        pause && setConnecting(true);\r\n        coreRequest().get(`users/${id}`)\r\n            .then(response => {\r\n                const data = {...response.body.data, interests: 'lol'};\r\n                setOrigUserdata(data);\r\n                pause && setConnecting(false);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                pause && setConnecting(false);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        init(true);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        init(true);\r\n    }, [id, user]);\r\n\r\n    if (loading || connecting) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <List>\r\n                <Info origUserdata={origUserdata} init={init}/>\r\n                {user && user.id === +id &&\r\n                <React.Fragment>\r\n                    <Divider/>\r\n                    <Password />\r\n                </React.Fragment>\r\n                }\r\n                {(user && user.id === +id || isAdmin()) &&\r\n                <React.Fragment>\r\n                    <Divider/>\r\n                    <DangerZone viewed_user={origUserdata} updateInfo={init}/>\r\n                    <Divider/>\r\n                </React.Fragment>\r\n                }\r\n            </List>\r\n        </Grid>\r\n    );\r\n}","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nfunction UserCard({user, ...props}) {\r\n    const history = useHistory();\r\n    const [imageLoaded, setImageLoaded] = React.useState(true);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid item xs={12} md={6}>\r\n            <Box p={1}>\r\n                <Card>\r\n                    <CardActionArea onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            image={`${process.env.REACT_APP_CORE_AVATARS}/${user.id}.jpg`}\r\n                            alt={`Avatar of user ${user.name}`}\r\n                            height=\"140\"\r\n                            title={user.name}\r\n                            onError={event => event.target.src = 'https://ssl.gstatic.com/images/branding/product/1x/avatar_circle_grey_512dp.png'}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                {user.name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                {`${user.is_admin ? 'Admin | ' : ''}${user.email}`}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\" onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                            Профіль\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default function Users() {\r\n    const [users, setUsers] = React.useState([]);\r\n    const [connecting, setConnecting] = React.useState(true);\r\n\r\n    React.useEffect(() => {\r\n        setConnecting(true);\r\n        coreRequest().get('users')\r\n            .then(response => {\r\n                setUsers(response.body.data);\r\n                setConnecting(false);\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n    if (connecting) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <Box p={1}>\r\n                            <Breadcrumbs aria-label=\"breadcrumb\">\r\n                                <Typography color=\"textPrimary\">Користувачі</Typography>\r\n                            </Breadcrumbs>\r\n                        </Box>\r\n                    </Grid>\r\n                    {users.map(item => <UserCard key={`user-card-${item.id}`} user={item}/>)}\r\n                </Grid>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    threadsList: {\r\n        paddingRight: theme.spacing(6),\r\n    },\r\n    pagination: {\r\n        display: 'inline-flex',\r\n    },\r\n    paginationContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    ratingBadge: {\r\n        color: theme.palette.grey[500],\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {useHistory, useLocation, useParams} from 'react-router-dom'\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport qs from 'qs';\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\n\r\n//MUI components\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\n//MUI icons\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\n\r\n\r\nfunction ThreadListItem({thread, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    const primary = (\r\n        <Typography>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <ListItemSecondaryAction>\r\n            <Badge badgeContent={thread.reply_count} showZero color=\"primary\">\r\n                <QuestionAnswerIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n            <Badge badgeContent={thread.views_count} showZero color=\"primary\">\r\n                <VisibilityIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n        </ListItemSecondaryAction>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <ListItem button onClick={event => changeRoute(`/thread/${thread.id}`)}>\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${thread.user.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={primary}\r\n                    secondary={`${thread.user.name} | ${new Date(thread.created_at).toLocaleString()}`}\r\n                    className={classes.threadsList}\r\n                />\r\n                {secondary}\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function ThreadsViewer({articles, setArticles, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [sortBy, setSortBy] = React.useState('created_at');\r\n    const [pages, setPages] = React.useState(1);\r\n    const [page, setPage] = React.useState(1);\r\n    const location = useLocation();\r\n    const {mode} = useParams();\r\n    const {search} = qs.parse(location.search, {ignoreQueryPrefix: true});\r\n    const {user} = useAuth();\r\n    const updater = React.useRef();\r\n\r\n    function getArticles(page) {\r\n        if (!search) {\r\n            coreRequest().get(`questions${(mode && user) ? `/${mode}` : ''}`)\r\n                .query({page: page, sort: sortBy})\r\n                .then(response => {\r\n                    setArticles(response.body.data);\r\n                    setPages(response.body.meta.last_page);\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                });\r\n        } else {\r\n            coreRequest().get('questions')\r\n                .query({search, page, sort: sortBy})\r\n                .then(response => {\r\n                    setArticles(response.body.data);\r\n                }).catch(error => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getArticles(1);\r\n        clearInterval(updater.current);\r\n        updater.current = setInterval(() => {\r\n            if (!search) {\r\n                console.log(`Sync [threads]: synchronizing (${new Date().toLocaleString()})`);\r\n                getArticles();\r\n            } else {\r\n                console.log(`Sync [threads]: skipping synchronization (${new Date().toLocaleString()})`);\r\n            }\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater.current);\r\n        }\r\n    }, [mode, sortBy]);\r\n\r\n    React.useEffect(() => {\r\n        getArticles(1);\r\n    }, [search, sortBy]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleToggleSort(event, newValue) {\r\n        setSortBy(newValue);\r\n    }\r\n\r\n    function handleChangePage(event, page) {\r\n        setPage(page);\r\n        getArticles(page);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            {!search && <Typography color=\"textPrimary\">Питання</Typography>}\r\n                            {search && <Link onClick={event => changeRoute('/threads')} color=\"textPrimary\">Питання</Link>}\r\n                            {search && <Typography color=\"textPrimary\">Результати для: {search}</Typography>}\r\n                        </Breadcrumbs>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ToggleButtonGroup\r\n                            value={sortBy}\r\n                            size=\"small\"\r\n                            exclusive\r\n                            onChange={handleToggleSort}\r\n                        >\r\n                            <ToggleButton value=\"created_at\">\r\n                                Найновіші\r\n                            </ToggleButton>\r\n                            <ToggleButton value=\"reply_count\">\r\n                                По відповідям\r\n                            </ToggleButton>\r\n                            <ToggleButton value=\"views_count\">\r\n                                Популярні\r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </ListItem>\r\n                    {articles.map((item, index) => {\r\n                        return (\r\n                            <ThreadListItem thread={item} key={`artciles_${index}`}>\r\n                            </ThreadListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n                <div className={classes.paginationContainer}>\r\n                    <Pagination count={pages} page={page} onChange={handleChangePage} className={classes.pagination}/>\r\n                </div>\r\n            </Box>\r\n        </Grid>\r\n\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport useStyles from \"./style\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n//Custom components\r\nimport ParsedMessage from \"../../../Utilities/Components/ParsedMessage\";\r\nimport clsx from \"clsx\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\n\r\nexport default function AnswerListItem({\r\n                                           answer, onEdited = () => {\r\n    }, ...props\r\n                                       }) {\r\n    const {user, isAdmin} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState(answer.text);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const {id} = useParams();\r\n    const mounted = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n        mounted.current = true;\r\n        return () => mounted.current = false;\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        setNewData(answer.text);\r\n    }, [answer]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setNewData(event.target.value);\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`replies/${answer.id}`)\r\n            .send({text: newData})\r\n            .then(response => {\r\n                setEdit(false);\r\n                onEdited(newData);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleDelete() {\r\n        coreRequest().delete(`replies/${answer.id}`)\r\n            .then(response => {\r\n                onEdited();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData(answer.text);\r\n    }\r\n\r\n    const primary = (\r\n        <React.Fragment>\r\n            <Typography variant={'h6'}>\r\n                {answer.user.name}\r\n            </Typography>\r\n            {!edit && answer.text &&\r\n            <Typography style={{whiteSpace: 'pre-wrap'}}>\r\n                <ParsedMessage message={answer.text}/>\r\n            </Typography>\r\n            }\r\n            {edit &&\r\n            <TextField\r\n                fullWidth\r\n                label={'Відповідь'}\r\n                variant={'outlined'}\r\n                size={\"small\"}\r\n                multiline\r\n                rows={4}\r\n                onChange={handleDataInput}\r\n                value={newData}\r\n                required\r\n            />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        onClick={event => changeRoute(`/user/${answer.user.id}`)}\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${answer.user.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={primary}\r\n                    secondary={`опубліковано ${new Date(answer.created_at).toLocaleString()}`}\r\n                    className={clsx(classes.listItemTextFix, classes.overflowHidden)}\r\n                />\r\n                {(user && user.id === answer.user.id || isAdmin()) &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleDelete}>\r\n                            <DeleteIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport {withWidth, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport useStyles from \"./style\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as _ from 'lodash'\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\n//Custom components\r\nimport Question from './Components/Question'\r\nimport AnswerListItem from \"./Components/AnswerListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nfunction ThreadDetails({width, ...props}) {\r\n    const [author, setAuthor] = React.useState({});\r\n    const [thread, setThread] = React.useState({});\r\n    const [answers, setAnswers] = React.useState([]);\r\n    const [myAnswer, setMyAnswer] = React.useState('');\r\n    const {id} = useParams();\r\n    const {user} = useAuth();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const updater = React.useRef();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function getQuestions() {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setAuthor({...response.body.data.user});\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n                setAnswers([...response.body.data.replies]);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        clearInterval(updater.current);\r\n        getQuestions();\r\n        updater.current = setInterval(() => {\r\n            console.log(`Sync [thread]: synchronizing (${new Date().toLocaleString()})`);\r\n            getQuestions();\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater.current);\r\n        }\r\n    }, [id]);\r\n\r\n    function handleUpdateAnswers() {\r\n        coreRequest().get(`questions/${id}/replies`)\r\n            .then(response => {\r\n                setAnswers(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleUpdateThread() {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleInputAnswer(event) {\r\n        setMyAnswer(event.target.value);\r\n    }\r\n\r\n    function handleAnswer() {\r\n        coreRequest().post(`questions/${id}/replies`)\r\n            .send({text: myAnswer})\r\n            .then(response => {\r\n                handleUpdateAnswers();\r\n                setMyAnswer('');\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            <Link color=\"inherit\" onClick={() => changeRoute('/threads')}>\r\n                                Питання\r\n                            </Link>\r\n                            <Typography color=\"textPrimary\">{thread.title}</Typography>\r\n                        </Breadcrumbs>\r\n                    </ListItem>\r\n                    <Question author={author} thread={thread} onEdited={handleUpdateThread}/>\r\n                    <Divider/>\r\n                    <ListItem id={'answers'}>\r\n                        <List className={classes.width100}>\r\n                            {answers.map((item, index) => {\r\n                                return (\r\n                                    <AnswerListItem key={`answer_${index}_${thread.id}_${author.id}`} answer={item} onEdited={handleUpdateAnswers}/>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </ListItem>\r\n                    {user &&\r\n                    <ListItem id={'compose'}>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    value={myAnswer}\r\n                                    multiline\r\n                                    rows={8}\r\n                                    variant={'outlined'}\r\n                                    label={'Відповідь'}\r\n                                    fullWidth\r\n                                    onChange={handleInputAnswer}\r\n                                />\r\n                            </Grid>\r\n                            {isWidthUp('sm', width) && <Grid item md={9}/>}\r\n                            <Grid item xs={12} md={3}>\r\n                                <Button fullWidth onClick={handleAnswer}>\r\n                                    Відправити\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    }\r\n                    {!user &&\r\n                    <ListItem>\r\n                        <ListItemText\r\n                            secondary={\r\n                                <React.Fragment>\r\n                                    <Link onClick={event => changeRoute('?login=true')}>\r\n                                        Login\r\n                                    </Link>\r\n                                    &nbsp;or&nbsp;\r\n                                    <Link onClick={event => changeRoute('?register=true')}>\r\n                                        sign up\r\n                                    </Link>\r\n                                    &nbsp;to leave answers\r\n                                </React.Fragment>\r\n                            }\r\n                        />\r\n                    </ListItem>\r\n                    }\r\n                </List>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ThreadDetails);","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    logo: {\r\n        width: '100%',\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport useStyles from \"./style\";\r\nimport logo from './images/readit_logo_black.png'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nexport default function About() {\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route){\r\n        history.push(route);\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12}>\r\n            <List>\r\n                <ListItem>\r\n                    <Grid container justify={'center'}>\r\n                        <Grid item xs={8} md={6}>\r\n                            <img\r\n                                src={logo}\r\n                                className={classes.logo}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        Що таке Readit\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        Readit - це функціональний веб портал для знаходження відповіді на будь-які питання.\r\n                        Ви можете створювати питання на будь-які теми, а інші учасники можуть вам відповісти на ваше\r\n                        питання.\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        Чому Readit\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        У нас ви зможете знайти відзивчиве комьюніті. Політика сайту не дозволяє грубо відноситись до\r\n                        співучасників форуму. Знайдеться багато людей, що захочуть допомогти вам з вашою проблемою.\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        Що робити?\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        Платформа дозволяє:\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Створювати питання'}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Відповідати на питання інших людей'}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Кастомізувати свій профіль'}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Знаходити однодумців'}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        І що далі?\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        Вперед, спілкуватися!\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button\r\n                        onClick={() => changeRoute('/threads')}\r\n                        variant={'outlined'}\r\n                        fullWidth\r\n                    >\r\n                        До питань\r\n                    </Button>\r\n                </ListItem>\r\n            </List>\r\n        </Grid>\r\n    );\r\n}","import React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\n\r\n//Pages\r\nimport ThreadEditor from \"../../ThreadEditor\";\r\nimport Account from \"../../Account\";\r\nimport Users from \"../../Users\";\r\nimport ThreadsViewer from \"../../ThreadsViewer\";\r\nimport ThreadDetails from \"../../ThreadDetails\";\r\nimport About from \"../../About\";\r\n\r\n\r\nexport default function PagesSwitch({articles, setArticles, ...props}) {\r\n    const {user} = useAuth();\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path={'/threads/:mode?'}>\r\n                <ThreadsViewer articles={articles} setArticles={setArticles}/>\r\n            </Route>\r\n            <Route path={'/'} exact>\r\n                <ThreadsViewer articles={articles} setArticles={setArticles}/>\r\n            </Route>\r\n            <Route path={'/thread/:id'}>\r\n                <ThreadDetails/>\r\n            </Route>\r\n            {user &&\r\n            <Route path={'/editthread/:id'}>\r\n                <ThreadEditor/>\r\n            </Route>\r\n            }\r\n            <Route path={'/user/:id'}>\r\n                <Account/>\r\n            </Route>\r\n            <Route path={'/users'}>\r\n                <Users/>\r\n            </Route>\r\n            <Route path={'/about'}>\r\n                <About/>\r\n            </Route>\r\n        </Switch>\r\n\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\nimport {red} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    footer: {\r\n        backgroundColor: theme.palette.footer.main,\r\n        borderTop: '5px solid',\r\n        borderColor: theme.palette.footer.light,\r\n        color: theme.palette.common.white,\r\n    },\r\n    copyright: {\r\n        backgroundColor: theme.palette.footer.dark,\r\n        color: theme.palette.common.white,\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {BaseTheme} from \"../../../Themes/DefaultTheme\";\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport useStyles from \"./style\";\r\n\r\nexport default function Footer() {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <ThemeProvider theme={BaseTheme}>\r\n                <Box p={2} className={classes.footer}>\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Розробники\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/user/13`)}>\r\n                                        Андрєєв Данило\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/user/19`)}>\r\n                                        Соломаха Олександр\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/user/25`)}>\r\n                                        Нестеров Микита\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Розділи\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/threads`)}>\r\n                                        Питання\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/users`)}>\r\n                                        Користувачі\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/editthread/new`)}>\r\n                                        Створити питання\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Використані технології\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://reactjs.org/'}>\r\n                                        React\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://material-ui.com/'}>\r\n                                        Material UI\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://laravel.com/'}>\r\n                                        Laravel\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Розробка\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://github.com/DanilAndreev/starscream_project'}>\r\n                                        Github репозиторій\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://github.com/DanilAndreev/starscream_project/tree/master/web'}>\r\n                                        Github репозиторій front-end\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link\r\n                                        href={'https://github.com/DanilAndreev/starscream_project/tree/master/backend'}>\r\n                                        Github репозиторій back-end\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Grid container className={classes.copyright}>\r\n                    <Box p={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant={'subtitle2'} align={'center'}>\r\n                                Copyright (С) Andrieiev Solomaha Nesterov 2019 All rights reserved\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n            </ThemeProvider>\r\n        </Grid>\r\n    );\r\n}","import React from \"react\";\r\nimport useStyles from \"../style\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n//MUI components\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport FormatListBulletedIcon from \"@material-ui/icons/FormatListBulleted\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport RecordVoiceOverIcon from \"@material-ui/icons/RecordVoiceOver\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//MUI Icons\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport RateReviewIcon from \"@material-ui/icons/RateReview\";\r\n\r\n\r\nexport default function MenuButtons() {\r\n    const classes = useStyles();\r\n    const {user} = useAuth();\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute('/threads')}\r\n            >\r\n                <FormatListBulletedIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Всі питання\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n            {user &&\r\n            <React.Fragment>\r\n                <ListItem\r\n                    dense\r\n                    button\r\n                    onClick={event => changeRoute('/threads/my')}\r\n                >\r\n                    <RecordVoiceOverIcon fontSize={'small'}/>\r\n                    <ListItemText\r\n                        primary={\"Мої питання\"}\r\n                        className={classes.leftPanelButtonsText}\r\n                    />\r\n                </ListItem>\r\n                <ListItem\r\n                    dense\r\n                    button\r\n                    onClick={event => changeRoute('/threads/commented')}\r\n                >\r\n                    <RateReviewIcon fontSize={'small'}/>\r\n                    <ListItemText\r\n                        primary={\"Прокоментовані мною\"}\r\n                        className={classes.leftPanelButtonsText}\r\n                    />\r\n                </ListItem>\r\n            </React.Fragment>\r\n            }\r\n            <Divider/>\r\n            {user &&\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute(`/user/${user.id}`)}\r\n            >\r\n                <AccountCircleIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Мій профіль\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n            }\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute('/users')}\r\n            >\r\n                <PeopleIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Користувачі\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute('/about')}\r\n            >\r\n                <HelpIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Інформація\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {LightTheme, BaseTheme} from './../../Themes/DefaultTheme'\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {Route, Switch, useHistory, useLocation} from \"react-router-dom\";\r\nimport {withWidth, isWidthDown, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport qs from 'qs'\r\nimport logo from './images/readit_logo_light.png';\r\nimport clsx from \"clsx\";\r\n\r\n\r\n//Pages\r\nimport AuthDialog from \"../Auth\";\r\nimport RegistrationDialog from \"../Registration\";\r\n\r\n//MUI components\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\n//MUI icons\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\n//Custom components\r\nimport ThreadsListItem from \"./Components/ThreadsListItem\";\r\nimport PagesSwitch from \"./Components/PagesSwitch\";\r\nimport Footer from \"./Components/Footer\";\r\nimport MenuButtons from \"./Components/MenuButtons\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n\r\n\r\nfunction Layout({width, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [search, setSearch] = React.useState('');\r\n    const [articles, setArticles] = React.useState([]);\r\n    const [authData, setAuthData] = React.useState({email: null, password: null, remember: false});\r\n    const {user, setUser, setToken} = useAuth();\r\n    const [gotUser, setGotUser] = React.useState(false);\r\n    const location = useLocation();\r\n    const {register, login, menu} = qs.parse(location.search, {ignoreQueryPrefix: true});\r\n    let loading = false;\r\n\r\n    const [topArticles, setTopArticles] = React.useState([]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        //changeRoute('/threads');\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        coreRequest().get('users/me')\r\n            .then(response => {\r\n                setUser({...response.body.data, created_at: undefined, updated_at: undefined});\r\n                setGotUser(true);\r\n                console.log(`Automatically authorized as ${response.body.data.name}`);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        setUser(null);\r\n                        setGotUser(true);\r\n                        console.log(`Automatically authorized as guest`);\r\n                        break;\r\n                    default:\r\n                        console.error('Failed to auto-authorize, error:', error);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    function handleLoadTop10Threads() {\r\n        coreRequest().get('questions/top10')\r\n            .then(response => {\r\n                setTopArticles(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        handleLoadTop10Threads();\r\n        const updater = setInterval(() => {\r\n            handleLoadTop10Threads();\r\n            console.log(`Sync [top10threads]: synchronizing (${new Date().toLocaleString()})`);\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater);\r\n        }\r\n    }, []);\r\n\r\n    function handleLogout() {\r\n        coreRequest().post('auth/logout')\r\n            .send({})\r\n            .then(response => {\r\n                setToken(null);\r\n                setUser(null);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleFindQuestion() {\r\n        search && changeRoute(`/threads?search=${search}`);\r\n        !search && changeRoute('/threads');\r\n    }\r\n\r\n    function handleAuthenticated(user) {\r\n        changeRoute(location.pathname);\r\n    }\r\n\r\n    function handleAuthClose() {\r\n        changeRoute(location.pathname);\r\n        setAuthData({username: null, password: null});\r\n    }\r\n\r\n    function handleRegistrationClose() {\r\n        changeRoute(location.pathname);\r\n    }\r\n\r\n    function handleSearchInput(event) {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    function handleCreateThread(event) {\r\n        user && changeRoute('/editthread/new');\r\n        !user && changeRoute(`?login=true`);\r\n    }\r\n\r\n    if (loading || !gotUser) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={!!login} onClose={handleAuthClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Authentication</DialogTitle>\r\n                <AuthDialog authData={authData} setAuthData={setAuthData} onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={!!register} onClose={handleRegistrationClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Registration</DialogTitle>\r\n                <RegistrationDialog onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            {isWidthDown('md', width) &&\r\n            <SwipeableDrawer\r\n                anchor={'left'}\r\n                open={!!menu}\r\n                onClose={event => changeRoute(location.pathname)}\r\n                onOpen={event => changeRoute(`?menu=true`)}\r\n                swipeAreaWidth={40}\r\n                classes={{paperAnchorLeft: classes.menuDrawer}}\r\n            >\r\n                <List>\r\n                    {user &&\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                src={`${process.env.REACT_APP_CORE_AVATARS}/${user.id}.jpg`}\r\n                            >\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={user && user.name}\r\n                            secondary={user && user.email}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"logout\" onClick={handleLogout}>\r\n                                <ExitToAppIcon/>\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    }\r\n                    {!user &&\r\n                    <ListItem>\r\n                        <ButtonGroup fullWidth>\r\n                            <Button onClick={event => changeRoute('?register=true')}>\r\n                                Register\r\n                            </Button>\r\n                            <Button onClick={event => changeRoute('?login=true')}>\r\n                                Login\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </ListItem>\r\n                    }\r\n                </List>\r\n                <MenuButtons/>\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemText primary={\"Топ 10 питань\"}/>\r\n                    </ListItem>\r\n                    <Divider/>\r\n                    {topArticles.map((item, index) => {\r\n                        return (\r\n                            <ThreadsListItem key={`top_artciles_${index}`} thread={item}/>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </SwipeableDrawer>\r\n            }\r\n            <AppBar position={isWidthUp('md', width) ? \"static\" : 'fixed'}>\r\n                <Toolbar>\r\n                    {isWidthDown('sm', width) &&\r\n                    <IconButton onClick={event => isWidthDown('md', width) && changeRoute(`?menu=true`)}>\r\n                        <MenuIcon color={'inherit'} className={classes.menuIcon}/>\r\n                    </IconButton>\r\n                    }\r\n                    <div className={classes.title}>\r\n                        <Button onClick={event => changeRoute('/about')}>\r\n                            <img\r\n                                src={logo}\r\n                                className={clsx(classes.logo)}\r\n                            />\r\n                        </Button>\r\n                    </div>\r\n                    {!user && <Button color=\"inherit\" onClick={() => changeRoute(`?register=true`)}>Sign up</Button>}\r\n                    {!user && <Button color=\"inherit\" onClick={() => changeRoute(`?login=true`)}>Login</Button>}\r\n                    {user &&\r\n                    <Button color=\"inherit\" onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                        {isWidthUp('md', width) && user.name}\r\n                        <Avatar\r\n                            className={classes.avatar}\r\n                            src={`${process.env.REACT_APP_CORE_AVATARS}/${user.id}.jpg`}\r\n                        >\r\n                        </Avatar>\r\n                    </Button>\r\n                    }\r\n                    {user && isWidthUp('sm', width) && <Button color=\"inherit\" onClick={handleLogout}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container className={clsx(\r\n                isWidthDown('sm', width) && classes.appBarMobileMargin,\r\n            )}>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n                <Grid item xs={12} md={10} lg={8} id={'page'}>\r\n                    <Box>\r\n                        <ThemeProvider theme={LightTheme}>\r\n                            <Grid container className={classes.topLine}>\r\n                                <Grid item xs={12} md={2}/>\r\n                                <Grid item xs={12} md={7}>\r\n                                    <Box p={1}>\r\n                                        <div className={classes.searchLineBase}>\r\n                                            <TextField\r\n                                                value={search}\r\n                                                fullWidth\r\n                                                variant=\"filled\"\r\n                                                label={'Знайти питання'}\r\n                                                size={'small'}\r\n                                                name={'search'}\r\n                                                onChange={handleSearchInput}\r\n                                                onKeyPress={event => {\r\n                                                    if(event.key === 'Enter'){\r\n                                                        handleFindQuestion();\r\n                                                        setSearch('');\r\n                                                    }\r\n                                                }}\r\n                                                autoComplete={'search'}\r\n                                            />\r\n                                            <Button\r\n                                                variant={'contained'}\r\n                                                color={'primary'}\r\n                                                onClick={handleFindQuestion}\r\n                                            >\r\n                                                <SearchIcon/>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={3}>\r\n                                    <div className={classes.createThreadButtonContainer}>\r\n                                        <Box p={1} className={classes.createThreadButtonBox}>\r\n                                            <Button\r\n                                                fullWidth\r\n                                                variant={'contained'}\r\n                                                color={'secondary'}\r\n                                                className={classes.createThreadButton}\r\n                                                onClick={handleCreateThread}\r\n                                            >\r\n                                                Створити питання\r\n                                            </Button>\r\n                                        </Box>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ThemeProvider>\r\n                        <Grid container>\r\n                            <ThemeProvider theme={LightTheme}>\r\n                                {isWidthUp('md', width) &&\r\n                                <Grid item xs={12} md={2} className={classes.leftColumn}>\r\n                                    <Box p={1}>\r\n                                        <MenuButtons/>\r\n                                    </Box>\r\n                                </Grid>\r\n                                }\r\n                            </ThemeProvider>\r\n                            <Grid item xs={12} md={7} className={classes.contentColumn}>\r\n                                <Grid container>\r\n                                    <PagesSwitch\r\n                                        articles={articles}\r\n                                        setArticles={setArticles}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            {isWidthUp('md', width) &&\r\n                            <Grid item xs={12} md={3} className={classes.rightColumn}>\r\n                                <Box p={1}>\r\n                                    <List>\r\n                                        <ListItem>\r\n                                            <ListItemText primary={\"Топ 10 питань\"}/>\r\n                                        </ListItem>\r\n                                        <Divider/>\r\n                                        {topArticles.map((item, index) => {\r\n                                            return (\r\n                                                <ThreadsListItem key={`top_artciles_${index}`} thread={item}/>\r\n                                            );\r\n                                        })}\r\n                                    </List>\r\n                                </Box>\r\n                            </Grid>\r\n                            }\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n                <Footer/>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withWidth()(Layout);","import React from 'react';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport Layout from \"./Pages/Layout\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {BaseTheme} from \"./Themes/DefaultTheme\";\r\nimport {AuthProvider} from \"./Utilities/Auth\";\r\nimport {ConfirmDialogProvider} from \"./Utilities/ConfirmDialog\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <AuthProvider>\r\n                <ThemeProvider theme={BaseTheme}>\r\n                    <ConfirmDialogProvider>\r\n                        <Router>\r\n                            <Layout/>\r\n                        </Router>\r\n                    </ConfirmDialogProvider>\r\n                </ThemeProvider>\r\n            </AuthProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}