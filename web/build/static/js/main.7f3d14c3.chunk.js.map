{"version":3,"sources":["Pages/About/images/readit_logo_black.png","Pages/Layout/images/readit_logo_light.png","Themes/DefaultTheme/BaseTheme.js","Themes/DefaultTheme/LightTheme.js","Utilities/Auth.js","Utilities/ConfirmDialog.js","Pages/Layout/style.js","Utilities/Rest.js","Pages/Auth/style.js","Pages/Auth/index.js","Pages/Registration/index.js","Pages/Layout/Components/ThreadsListItem.js","Pages/ThreadDetails/Components/style.js","Utilities/Components/ParsedMessage.js","Pages/ThreadDetails/Components/Question.js","Pages/ThreadEditor/index.js","Pages/Account/Components/style.js","Pages/Account/Components/ImagePicker/style.js","Pages/Account/Components/ImagePicker/index.js","Pages/Account/Components/UserAvatar.js","Pages/Account/Components/Info.js","Pages/Account/Components/Password.js","Pages/Account/Components/DangerZone.js","Pages/Account/index.js","Pages/Users/index.js","Pages/ThreadsViewer/style.js","Pages/ThreadsViewer/index.js","Pages/ThreadDetails/style.js","Pages/ThreadDetails/Components/AnswerListItem.js","Pages/ThreadDetails/index.js","Pages/About/style.js","Pages/About/index.js","Pages/Layout/Components/PagesSwitch.js","Pages/Layout/Components/style.js","Pages/Layout/Components/Footer.js","Pages/Layout/Components/MenuButtons.js","Pages/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","overrides","MuiAppBar","colorPrimary","backgroundColor","grey","palette","primary","main","blueGrey","dark","light","layout","util","separator","footer","secondary","green","AuthContext","React","createContext","user","token","AuthProvider","props","useState","setUser","setToken","Provider","value","isAdmin","is_admin","useAuth","useContext","ConfirmDialogContext","ConfirmDialogProvider","children","defaultSettings","title","text","size","type","userFunc","settings","open","setSettings","a","func","handleClose","handleCancel","handleAgree","Fragment","Button","onClick","color","autoFocus","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","useConfirmDialog","useStyles","makeStyles","header","colorDefault","root","flexGrow","menuButton","marginRight","spacing","leftColumn","common","white","borderTop","topLine","contentColumn","minHeight","rightColumn","leftPanelButtonsText","paddingLeft","searchLineBase","display","width","createThreadButtonContainer","height","alignItems","createThreadButtonBox","avatar","marginLeft","menuIcon","menuDrawer","maxWidth","appBarMobileMargin","marginTop","appBarDesktopMargin","logo","whiteColor","InputRoot","borderTopRightRadius","borderBottomLeftRadius","shape","borderRadius","request","endPoint","console","error","rlog","p","s","log","post","route","url","superagent","set","withCredentials","put","delete","get","coreRequest","path","process","paper","Auth","authData","setAuthData","onComplete","showPassword","setShowPassword","setError","email","password","remember","data","setData","classes","Paper","className","List","ListItem","Typography","variant","Input","placeholder","fullWidth","required","autoComplete","onChange","event","persist","last","target","endAdornment","InputAdornment","position","IconButton","aria-label","item","Visibility","VisibilityOff","ListItemText","ListItemSecondaryAction","Checkbox","checked","send","then","response","body","catch","status","err","Registration","username","history","useHistory","repeatpassword","errors","setErrors","handleChangeData","name","FormHelperText","password_confirmation","undefined","push","key","message","handleRegisterError","ThreadsListItem","thread","reply_count","button","ListItemAvatar","Avatar","src","Divider","listItemTextFix","paddingRight","wordWrap","worldWrap","ParsedMessage","confirm","result","linkIndex","includes","indexOf","head","slice","tailIndex","length","link","linkText","Tooltip","Link","window","location","href","messageParser","Question","author","onEdited","preview","edit","setEdit","newData","setNewData","changeRoute","handleDataInput","handleDelete","useEffect","created_at","Date","toLocaleString","clsx","isError","checkFields","replace","TextField","helperText","label","style","whiteSpace","multiline","rows","TabPanel","index","other","role","hidden","ThreadEditor","tab","setTab","setThread","categories","setCategories","category","setCategory","handleInput","Grid","xs","Tabs","newValue","Tab","select","map","option","MenuItem","category_id","dangerZone","red","borderColor","noPaddingSides","overflow","justifyContent","alignContent","zIndex","input","left","top","textAlign","padding","messageUnloaded","img","imgIcon","displayNone","displayBlock","withWidth","onError","date","disabled","alt","files","accept","multiple","isWidthUp","UserAvatar","inputUser","rect","setRect","setWidth","handleBoundsChange","innerWidth","addEventListener","removeEventListener","useCallback","node","getBoundingClientRect","useClientRect","ref","image","toString","setAvatar","useParams","handleGetAvatar","picture","attach","Info","origUserdata","init","editMode","setEditMode","userdata","setUserdata","container","md","Box","updated_at","fontSize","about_me","ShowPasswordAdornment","handleClick","shown","Password","oldpassword","newpassword","confirmnewpassword","confirmpassword","passwords","setPasswords","handleShowPassword","FormControl","old_password","DangerZone","viewed_user","updateInfo","handleDeleteAccount","handleMakeAdmin","handleMakeNotAdmin","Account","interests","setOrigUserdata","connecting","setConnecting","loading","pause","UserCard","Card","CardActionArea","CardMedia","component","CardContent","gutterBottom","CardActions","Users","users","setUsers","Breadcrumbs","threadsList","pagination","paginationContainer","ratingBadge","ThreadListItem","Badge","badgeContent","showZero","views_count","ThreadsViewer","articles","setArticles","sortBy","setSortBy","pages","setPages","page","setPage","useLocation","mode","search","qs","parse","ignoreQueryPrefix","updater","useRef","getArticles","query","sort","meta","last_page","clearInterval","current","setInterval","ToggleButtonGroup","exclusive","ToggleButton","Pagination","count","width100","AnswerListItem","answer","mounted","overflowHidden","setAuthor","answers","setAnswers","myAnswer","setMyAnswer","getQuestions","replies","user_id","handleUpdateAnswers","About","justify","PagesSwitch","exact","copyright","Footer","ThemeProvider","BaseTheme","align","MenuButtons","dense","setSearch","gotUser","setGotUser","register","login","menu","topArticles","setTopArticles","handleLoadTop10Threads","handleLogout","handleFindQuestion","handleAuthenticated","pathname","isWidthDown","SwipeableDrawer","anchor","onOpen","swipeAreaWidth","paperAnchorLeft","edge","ButtonGroup","AppBar","Toolbar","lg","LightTheme","onKeyPress","InputLabelProps","InputProps","disableUnderline","createThreadButton","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f3d14c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/readit_logo_black.a15732c9.png\";","module.exports = __webpack_public_path__ + \"static/media/readit_logo_light.58a82056.png\";","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, grey} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            colorPrimary: {\r\n                backgroundColor: grey[900],\r\n            },\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[600],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[100],\r\n        },\r\n/*\r\n        secondary: {\r\n            main:\r\n        },\r\n\r\n */\r\n        layout: {\r\n            main: blueGrey[800],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[50],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        },\r\n        footer: {\r\n            light:  blueGrey[800],\r\n            main: blueGrey[900],\r\n            dark: grey[900],\r\n        }\r\n    },\r\n});\r\n\r\nexport default theme;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, green, grey} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[100],\r\n            dark: blueGrey[300],\r\n            light: blueGrey[50],\r\n        },\r\n        secondary: {\r\n            main: green[700],\r\n            dark: green[900],\r\n            light: green[500],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        },\r\n        layout: {\r\n            main: blueGrey[800],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[50],\r\n        },\r\n        footer: {\r\n            light:  blueGrey[800],\r\n            main: blueGrey[900],\r\n            dark: grey[900],\r\n        }\r\n    },\r\n});\r\n\r\nexport default theme;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react'\r\n\r\n\r\nconst AuthContext = React.createContext({user: null, token: null});\r\n\r\nfunction AuthProvider(props) {\r\n    const [user, setUser] = React.useState(null);\r\n    const [token, setToken] = React.useState(null);\r\n\r\n    const isAdmin = () => {\r\n        return user && !!user.is_admin;\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{user, setUser, token, setToken, isAdmin}} {...props} />\r\n    );\r\n}\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport {AuthProvider, useAuth}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react'\r\n\r\n//MUI components\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst ConfirmDialogContext = React.createContext({user: null, token: null});\r\n\r\nfunction ConfirmDialogProvider({children, ...props}) {\r\n    const defaultSettings = {\r\n        title: 'Are you sure?',\r\n        text: '',\r\n        size: 'middle',\r\n        type: 'yesno',\r\n        userFunc: () => {\r\n        }\r\n    };\r\n\r\n    const [settings, setSettings] = React.useState({\r\n        settings: defaultSettings,\r\n        open: false,\r\n    });\r\n\r\n    async function confirm(func = () => {}, {title = 'Are you sure?', text = '', size = 'middle', type = 'yesno'}) {\r\n        setSettings({\r\n            settings: {text, size, type, title, userFunc: func},\r\n            open: true,\r\n        });\r\n    }\r\n\r\n    function handleClose() {\r\n        setSettings({\r\n            settings: defaultSettings,\r\n            open: false,\r\n        });\r\n    }\r\n\r\n    function handleCancel() {\r\n        handleClose();\r\n    }\r\n\r\n    function handleAgree() {\r\n        handleClose();\r\n        settings.settings.userFunc();\r\n    }\r\n\r\n    let buttons = (\r\n        <React.Fragment>\r\n            <Button onClick={handleAgree} color=\"primary\">\r\n                Yes\r\n            </Button>\r\n            <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                No\r\n            </Button>\r\n        </React.Fragment>\r\n    );\r\n\r\n    switch (settings.settings.type) {\r\n        case 'continue':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Continue\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case 'accept':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Accept\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case 'confirmdecline':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                    <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                        Decline\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n    }\r\n\r\n\r\n    return (\r\n        <ConfirmDialogContext.Provider value={confirm} {...props} >\r\n            <Dialog\r\n                open={settings.open}\r\n                onClose={handleCancel}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{settings.settings.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {settings.settings.text}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                        No\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {children}\r\n        </ConfirmDialogContext.Provider>\r\n    );\r\n}\r\n\r\nconst useConfirmDialog = () => React.useContext(ConfirmDialogContext);\r\n\r\nexport {ConfirmDialogProvider, useConfirmDialog}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        colorDefault: theme.palette.primary.dark,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    leftColumn: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n        borderTop: `1px solid ${theme.palette.util.separator}`,\r\n    },\r\n    topLine: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n    },\r\n    contentColumn: {\r\n        backgroundColor: theme.palette.common.white,\r\n        minHeight: `calc(100vh - 64px)`,\r\n    },\r\n    rightColumn: {\r\n        backgroundColor: theme.palette.layout.light,\r\n    },\r\n    leftPanelButtonsText: {\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    searchLineBase: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    createThreadButtonContainer: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n        alignItems: 'stretch',\r\n    },\r\n    createThreadButtonBox: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n    menuIcon: {\r\n        color: theme.palette.common.white,\r\n    },\r\n    menuDrawer: {\r\n        maxWidth: '80vw',\r\n    },\r\n    appBarMobileMargin: {\r\n        marginTop: '56px',\r\n    },\r\n    appBarDesktopMargin: {\r\n        marginTop: '64px',\r\n    },\r\n    logo: {\r\n        height: '35px',\r\n    },\r\n    whiteColor: {\r\n        color: '#fff !important',\r\n    },\r\n    InputRoot: {\r\n        backgroundColor: 'rgba(255, 255,255, 0.09) !important',\r\n        borderTopRightRadius: '0 !important',\r\n        borderBottomLeftRadius: theme.shape.borderRadius,\r\n    }\r\n}));\r\n\r\nexport default useStyles;\r\n","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport superagent from 'superagent';\r\n\r\n\r\nexport const request = (endPoint) => {\r\n    if (!endPoint) {\r\n        console.error(\"request endPoint undefined\");\r\n    }\r\n    const rlog = (p, s) => console.log(`request.${p}:`, s);\r\n    return {\r\n        endPoint: () => endPoint,\r\n        post: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('post', url);\r\n            return superagent.post(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        put: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('put', url);\r\n            return superagent.put(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        delete: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('delete', url);\r\n            return superagent.delete(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        get: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('get', url);\r\n            return superagent.get(url).set('accept', 'application/json').withCredentials();\r\n        }\r\n    }\r\n};\r\n\r\nexport const coreRequest = (path = null) => {\r\n    return request(path || process.env.REACT_APP_CORE_URL);\r\n};\r\n","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        maxWidth: '300px',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react';\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\n\r\n//MUI components\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n//MUI Icons\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\n\r\nexport default function Auth({\r\n                                 authData,\r\n                                 setAuthData,\r\n                                 onComplete = () => {\r\n                                 },\r\n                                 ...props\r\n                             }) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [error, setError] = React.useState(null);\r\n    const [data, setData] = React.useState({email: null, password: null, remember: false});\r\n    const {setUser} = useAuth();\r\n    const classes = useStyles();\r\n\r\n    if (!authData) {\r\n        authData = data;\r\n        setAuthData = setData;\r\n    }\r\n\r\n    function handleLogin() {\r\n        if (!authData.email || !authData.password) {\r\n            setError('Credential cannot be empty');\r\n            return;\r\n        }\r\n\r\n        coreRequest().post('auth/login')\r\n            .send(authData)\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                onComplete(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                try {\r\n                    switch (error.status) {\r\n                        case 403:\r\n                            setError('Вже аутентифіковано');\r\n                            break;\r\n                        case 422:\r\n                            setError('Неправильна пошта чи пароль');\r\n                            break;\r\n                        default:\r\n                            setError('Unexpected error, see console for more information');\r\n                            console.error(error);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, password: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeEmail(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, email: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRememberMe(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, remember: event.target.checked || false}));\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <List>\r\n                {error && <ListItem>\r\n                    <Typography color={'error'} variant={'body2'}>\r\n                        {error}\r\n                    </Typography>\r\n                </ListItem>}\r\n                <ListItem>\r\n                    <Input\r\n                        placeholder={'Email'}\r\n                        fullWidth\r\n                        required\r\n                        autoComplete={'email'}\r\n                        onChange={handleChangeEmail}\r\n                        value={authData.email || ''}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Input\r\n                        id=\"standard-adornment-password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={authData.password || ''}\r\n                        placeholder={'Password'}\r\n                        onChange={handleChangePassword}\r\n                        autoComplete={'password'}\r\n                        fullWidth\r\n                        required\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleChangeShowPassword}\r\n                                >\r\n                                    {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={'Запам\\'ятати мене'}/>\r\n                    <ListItemSecondaryAction>\r\n                        <Checkbox checked={authData.remember} onChange={handleRememberMe}/>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button fullWidth onClick={handleLogin}>\r\n                        Увійти\r\n                    </Button>\r\n                </ListItem>\r\n            </List>\r\n        </Paper>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react';\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport Input from \"@material-ui/core/Input\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n//MUI icons\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\n\r\nexport default function Registration({authData, setAuthData, onComplete, ...props}) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [data, setData] = React.useState({username: null, password: null, email: null});\r\n    const {setUser} = useAuth();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = React.useState({username: null, email: null, password: null, repeatpassword: null});\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setData(last => ({...last, password: event.target.value || null}));\r\n    }\r\n\r\n    function handleChangeData(event) {\r\n        event.persist();\r\n        setData(last => ({...last, [event.target.name]: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRegisterError(error) {\r\n        setErrors({username: null, email: null, password: null, repeatpassword: null});\r\n        switch (error.status) {\r\n            case 422:\r\n                const errors = error.response.body.errors;\r\n                for (const key in errors) {\r\n                    let message = 'Unresolved error';\r\n                    const error = errors[key][0];\r\n                    if (error) {\r\n                        switch (error) {\r\n                            case 'validation.email':\r\n                                message = 'Incorrect email';\r\n                                break;\r\n                            case 'validation.min.string':\r\n                                message = 'Password is too short';\r\n                                break;\r\n                            case 'validation.unique':\r\n                                message = 'Username is already taken';\r\n                                break;\r\n                        }\r\n                        setErrors(last => ({...last, [key]: message}));\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    function handleRegister() {\r\n        coreRequest().post('auth/register')\r\n            .send({...data, password_confirmation: data.password, name: data.username, username: undefined})\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                changeRoute(`/user/${response.body.data.id}`);\r\n                onComplete();\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                handleRegisterError(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Username'}\r\n                            fullWidth\r\n                            required\r\n                            name={'username'}\r\n                            onChange={handleChangeData}\r\n                            value={data.username || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.username && <FormHelperText error> {errors.username} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Email'}\r\n                            fullWidth\r\n                            required\r\n                            name={'email'}\r\n                            onChange={handleChangeData}\r\n                            value={data.email || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.email && <FormHelperText error> {errors.email} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            id=\"standard-adornment-password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={data.password || ''}\r\n                            placeholder={'Password'}\r\n                            onChange={handleChangePassword}\r\n                            required\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleChangeShowPassword}\r\n                                    >\r\n                                        {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    }\r\n                    secondary={errors.password && <FormHelperText error> {errors.password} </FormHelperText>}\r\n                />\r\n\r\n            </ListItem>\r\n            <ListItem>\r\n                <Button fullWidth onClick={handleRegister}>\r\n                    Зареєструватися\r\n                </Button>\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n\r\nexport default function ThreadsListItem({thread, ...props}) {\r\n    const history = useHistory();\r\n\r\n    const primary = (\r\n        <Typography variant={'body2'}>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <>\r\n            {`${thread.reply_count} відповідей`}\r\n        </>\r\n    );\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem\r\n                button\r\n                onClick={event => changeRoute(`/thread/${thread.id}`)}\r\n            >\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${thread.user.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={primary} secondary={secondary}/>\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItemTextFix: {\r\n        paddingRight: theme.spacing(6),\r\n        wordWrap: 'break-word',\r\n    },\r\n    worldWrap: {\r\n        wordWrap: 'break-word',\r\n    }\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useConfirmDialog} from \"./../ConfirmDialog\";\r\n\r\n//MUI components\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\n\r\nexport function messageParser(message, confirm) {\r\n    const result = [];\r\n    while (message.includes('http://') || message.includes('https://')) {\r\n        const linkIndex = message.includes('http://') ? message.indexOf('http://') : message.indexOf('https://');\r\n        const head = message.slice(0, linkIndex);\r\n        let tailIndex = message.indexOf(' ', linkIndex);\r\n        if (tailIndex === -1) tailIndex = message.length - 1;\r\n        const link = message.slice(linkIndex, tailIndex);\r\n        let linkText = link.slice(0, 40);\r\n        if (link.length > 40) {\r\n            linkText += '...';\r\n        }\r\n        message = message.slice(tailIndex, message.length - 1);\r\n        head && result.push(head);\r\n        link && result.push(\r\n            <Tooltip title={link} aria-label=\"link\" key={`link-${link}`}>\r\n                <Link\r\n                    onClick={\r\n                        event => confirm(\r\n                            () => {\r\n                                window.location.href = link\r\n                            },\r\n                            {\r\n                                text: `Link ${linkText} is custom user link and does not belong to our application. You follow this link to your own risk and peril.`,\r\n                                title: `Confirm redirect by user hyperlink`,\r\n                                type: 'continue',\r\n                            })\r\n                    }\r\n                >\r\n                    {linkText}\r\n                </Link>\r\n            </Tooltip>\r\n        );\r\n    }\r\n    message && result.push(message);\r\n    return result;\r\n}\r\n\r\n\r\nexport default function ParsedMessage({message = ''}) {\r\n    const confirm = useConfirmDialog();\r\n    return (\r\n        <React.Fragment>\r\n            {messageParser(message, confirm)}\r\n        </React.Fragment>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useConfirmDialog} from '../../../Utilities/ConfirmDialog'\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n//Custom components\r\nimport ParsedMessage from \"../../../Utilities/Components/ParsedMessage\";\r\n\r\n\r\nexport default function Question({\r\n                                     author,\r\n                                     thread,\r\n                                     onEdited = () => {\r\n                                     },\r\n                                     preview = false,\r\n                                     ...props\r\n                                 }) {\r\n    const history = useHistory();\r\n    const {user, isAdmin} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState({title: thread.title, body: thread.body});\r\n    const loading = false;\r\n    const confirm = useConfirmDialog();\r\n    const classes = useStyles();\r\n    const [errors, setErrors] = React.useState({title: null, body: null});\r\n\r\n    React.useEffect(() => {\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }, [thread]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setNewData({...newData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function checkFields() {\r\n        let isError = false;\r\n        if (!newData.body) {\r\n            setErrors(last => ({...last, body: 'Заповніть обов\\'язкове поле'}));\r\n            isError = true;\r\n        } else {\r\n            setErrors(last => ({...last, body: null}));\r\n        }\r\n        if(!newData.title){\r\n            setErrors(last => ({...last, title: 'Заповніть обов\\'язкове поле'}));\r\n            isError = true;\r\n        } else {\r\n            setErrors(last => ({...last, title: null}));\r\n        }\r\n        return !isError;\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        if (!checkFields()) {\r\n            return null;\r\n        }\r\n\r\n        coreRequest().put(`questions/${thread.id}`)\r\n            .send({...newData, body: newData.body.replace(/(\\n\\n\\n)+/g, '\\n'), title: newData.title.replace(/\\n/g, '')})\r\n            .then(response => {\r\n                console.log(response);\r\n                setEdit(false);\r\n                onEdited(newData);\r\n                setErrors({title: null, body: null});\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        setErrors({title: 'Error', body: 'Error'});\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryToDelete() {\r\n        confirm(handleDelete, {\r\n            title: `Ви впевнені, що хочете видалити питання: ${thread.title}`,\r\n            text: 'Ця операція не може бути відмінена'\r\n        });\r\n    }\r\n\r\n    function handleDelete() {\r\n        coreRequest().delete(`questions/${thread.id}`)\r\n            .then(response => {\r\n                changeRoute('/threads');\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }\r\n\r\n    if (loading) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem id={'author'} button onClick={event => changeRoute(`/user/${author.id}`)}>\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${author.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={author.name}\r\n                    secondary={`опубліковано ${thread.created_at && new Date(thread.created_at).toLocaleString() || 'тільки що'}`}\r\n                    className={clsx((user && user.id === author.id || isAdmin()) && classes.listItemTextFix)}\r\n                />\r\n                {(user && user.id === author.id || isAdmin()) && !preview &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleTryToDelete}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <ListItem id={'question'}>\r\n                {!edit &&\r\n                <Typography variant={'h5'}>\r\n                    {thread.title}\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    helperText={errors.title}\r\n                    fullWidth\r\n                    label={'Питання'}\r\n                    required\r\n                    value={newData.title}\r\n                    name={'title'}\r\n                    variant={'outlined'}\r\n                    onChange={handleDataInput}\r\n                    error={errors.title}\r\n                />\r\n                }\r\n            </ListItem>\r\n            <ListItem>\r\n                {!edit &&\r\n                <Typography variant={'body1'}>\r\n                    {thread.body &&\r\n                    <Typography style={{whiteSpace: 'pre-wrap'}}>\r\n                        <ParsedMessage message={thread.body} style={{whiteSpace: 'pre-wrap'}}/>\r\n                    </Typography>\r\n                    }\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    fullWidth\r\n                    label={'Детально'}\r\n                    helperText={errors.body}\r\n                    required\r\n                    value={newData.body}\r\n                    name={'body'}\r\n                    variant={'outlined'}\r\n                    size={\"small\"}\r\n                    onChange={handleDataInput}\r\n                    multiline\r\n                    rows={6}\r\n                    error={errors.body}\r\n                />\r\n                }\r\n            </ListItem>\r\n        </>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react'\r\nimport {coreRequest} from '../../Utilities/Rest'\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n//Custom components\r\nimport Question from './../ThreadDetails/Components/Question'\r\n\r\n\r\nfunction TabPanel({children, value, index, ...other}) {\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`thread-editor-tabpanel--${index}`}\r\n            aria-labelledby={`thread-editor-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                children\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ThreadEditor({...props}) {\r\n    const [tab, setTab] = React.useState(0);\r\n    const [thread, setThread] = React.useState({title: '', body: ''});\r\n    const [categories, setCategories] = React.useState([]);\r\n    const [category, setCategory] = React.useState(null);\r\n    const [errors, setErrors] = React.useState({title: null, body: null, category: null});\r\n    const history = useHistory();\r\n    const {user} = useAuth();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        coreRequest().get('categories')\r\n            .then(response => {\r\n                setCategories(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    function checkFields() {\r\n        let error = false;\r\n        if (!thread.title) {\r\n            setErrors(last => ({...last, title: 'Заповніть обов\\'язкове поле'}));\r\n            error = true;\r\n        } else {\r\n            setErrors(last => ({...last, title: null}))\r\n        }\r\n        if (!thread.body) {\r\n            setErrors(last => ({...last, body: 'Заповніть обов\\'язкове поле'}));\r\n            error = true;\r\n        } else {\r\n            setErrors(last => ({...last, body: null}))\r\n        }\r\n        if (!category) {\r\n            setErrors(last => ({...last, category: 'Виберіть категорію'}));\r\n            error = true;\r\n        } else {\r\n            setErrors(last => ({...last, category: null}))\r\n        }\r\n\r\n        return !error;\r\n    }\r\n\r\n    function handleSubmit() {\r\n        if (!checkFields()) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            coreRequest().post('questions')\r\n                .send({...thread, category_id: category, body: thread.body.replace(/(\\n\\n\\n)+/g, '\\n'), title: thread.title.replace(/\\n/g, '')})\r\n                .then(response => {\r\n                    setErrors({title: null, body: null, category: null});\r\n                    changeRoute(`/thread/${response.body.data.id}`);\r\n                })\r\n                .catch(error => {\r\n                    switch (error.status) {\r\n                        case 401:\r\n                            changeRoute('?login=true');\r\n                            break;\r\n                    }\r\n                });\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    function handleChangeTab(event, newValue) {\r\n        setTab(newValue);\r\n    }\r\n\r\n    function handleInput(event) {\r\n        setThread({...thread, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function handleCategorySelect(event) {\r\n        setCategory(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Tabs\r\n                value={tab}\r\n                onChange={handleChangeTab}\r\n                aria-label=\"simple tabs example\"\r\n                variant={'fullWidth'}\r\n            >\r\n                <Tab label=\"Редагування\"/>\r\n                <Tab label=\"Перегляд\"/>\r\n            </Tabs>\r\n            <TabPanel value={tab} index={0}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography variant={'h6'}>\r\n                            Створити питання\r\n                        </Typography>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            error={!!errors.title}\r\n                            helperText={errors.title}\r\n                            label={'Питання'}\r\n                            value={thread.title || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            name={'title'}\r\n                            onChange={handleInput}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            error={!!errors.body}\r\n                            helperText={errors.body}\r\n                            label={'Детально'}\r\n                            value={thread.body || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            multiline\r\n                            rows={10}\r\n                            name={'body'}\r\n                            onChange={event => handleInput(event, 'body')}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            error={!!errors.category}\r\n                            helperText={errors.category}\r\n                            select\r\n                            name={'category_id'}\r\n                            label={'Категорія'}\r\n                            value={category || ''}\r\n                            onChange={handleCategorySelect}\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                        >\r\n                            {categories.map(option => (\r\n                                <MenuItem key={option.id} value={option.id}>\r\n                                    {option.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Підтвердити\r\n                        </Button>\r\n                    </ListItem>\r\n                </List>\r\n            </TabPanel>\r\n            <TabPanel value={tab} index={1}>\r\n                <Question\r\n                    preview\r\n                    thread={{\r\n                        title: thread.title || 'Заповніть поле питання щоб продовжити',\r\n                        body: thread.body || 'Заповніть поле детально щоб продовжити',\r\n                    }}\r\n                    author={user}\r\n                />\r\n            </TabPanel>\r\n        </Grid>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {red} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItemTextFix: {\r\n        paddingRight: theme.spacing(5),\r\n    },\r\n    dangerZone: {\r\n        backgroundColor: red[700],\r\n        color: theme.palette.common.white,\r\n        borderColor: theme.palette.common.white,\r\n    },\r\n    noPaddingSides: {\r\n        paddingLeft: theme.spacing(0),\r\n        paddingRight: theme.spacing(0),\r\n    }\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        '&:hover div': {\r\n            display: 'block',\r\n            backgroundColor: 'rgba(0.5,0.5,0.5,0.4)',\r\n            zIndex: '1000',\r\n        },\r\n    },\r\n    input: {\r\n        zIndex: '1001',\r\n        left: '0',\r\n        top: '-100px',\r\n        width: '100%',\r\n        height: 'calc(100% + 100px)',\r\n        position: 'absolute',\r\n        color: 'transparent',\r\n        backgroundColor: 'transparent',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0.2,0.2,0.2,0.2)',\r\n        },\r\n        '&:active': {\r\n            backgroundColor: 'rgba(0.2,0.2,0.2,0.3)',\r\n        },\r\n    },\r\n    message: {\r\n        marginTop: 'calc(50% - 26px)',\r\n        borderRadius: '5px',\r\n        textAlign: 'center',\r\n        height: '20px',\r\n        width: '60%',\r\n        padding: theme.spacing(2),\r\n    },\r\n    messageUnloaded: {\r\n        display: 'block',\r\n        backgroundColor: 'rgba(0.5,0.5,0.5,0.4)',\r\n        zIndex: '1000',\r\n    },\r\n    img: {\r\n        color: 'white',\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n    },\r\n    imgIcon: {\r\n        color: 'white',\r\n        width: '80%',\r\n        height: '80%',\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n        padding: '10%',\r\n    },\r\n    displayNone: {\r\n        display: 'none',\r\n    },\r\n    displayBlock: {\r\n        display: 'block',\r\n    },\r\n\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\nimport withWidth, {isWidthUp} from \"@material-ui/core/withWidth\";\r\n\r\n//MUI icons\r\nimport ImageIcon from '@material-ui/icons/Image';\r\n\r\n\r\nfunction ImagePicker({\r\n                         onChange = () => {\r\n                         },\r\n                         onError = () => {\r\n                         },\r\n                         src,\r\n                         width,\r\n                         date,\r\n                         children,\r\n                         disabled = false,\r\n                         ...props\r\n                     }) {\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n                <img\r\n                    src={src}\r\n                    className={clsx(classes.img, !src && classes.displayNone)}\r\n                    alt={date}\r\n                    onError={onError}\r\n                />\r\n                <ImageIcon className={clsx(classes.imgIcon, src && classes.displayNone)}/>\r\n                {!disabled &&\r\n                <React.Fragment>\r\n                    <input\r\n                        type={'file'}\r\n                        className={clsx(classes.input)}\r\n                        onChange={event => onChange(event.target.files)}\r\n                        accept={'.png,.jpg,.jpeg'}\r\n                        multiple={false}\r\n                    />\r\n                    {children &&\r\n                    <div\r\n                        className={clsx(classes.message, isWidthUp('md', width) && classes.displayNone, !src && classes.messageUnloaded)}\r\n                    >\r\n                        {children}\r\n                    </div>\r\n                    }\r\n                </React.Fragment>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ImagePicker);","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\n\r\n//MUI components\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n//Custom components\r\nimport ImagePicker from \"./ImagePicker\";\r\n\r\n\r\nfunction useClientRect() {\r\n    const [rect, setRect] = React.useState(null);\r\n    const [width, setWidth] = React.useState(0);\r\n    React.useEffect(() => {\r\n        function handleBoundsChange() {\r\n            setWidth(window.innerWidth);\r\n        }\r\n\r\n        window.addEventListener('resize', handleBoundsChange);\r\n        return () => window.removeEventListener('resize', handleBoundsChange);\r\n    }, []);\r\n\r\n    const ref = React.useCallback(node => {\r\n        if (node !== null) {\r\n            setRect(node.getBoundingClientRect());\r\n        }\r\n    }, [width]);\r\n    return [rect, ref];\r\n}\r\n\r\nexport default function UserAvatar({inputUser = {}}) {\r\n    const [rect, ref] = useClientRect();\r\n    const [avatar, setAvatar] = React.useState({image: null, date: new Date().toString()});\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n    const {user, isAdmin} = useAuth();\r\n\r\n    React.useEffect(() => {\r\n        handleGetAvatar();\r\n    }, [id]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleGetAvatar() {\r\n        setAvatar({image: `${process.env.REACT_APP_CORE_AVATARS}/${inputUser.id}.jpg`, date: new Date().toString()});\r\n    }\r\n\r\n    function handleChangeAvatar(picture) {\r\n        coreRequest().post(`users/${inputUser.id}/avatar`)\r\n            .attach('avatar', picture[0])\r\n            .then(response => {\r\n                handleGetAvatar();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Avatar\r\n            ref={ref}\r\n            style={{width: '100%', height: rect && rect.width}}\r\n        >\r\n            <ImagePicker\r\n                onChange={handleChangeAvatar}\r\n                onError={event => setAvatar({image: null, date: new Date().toString()})}\r\n                src={avatar.image}\r\n                date={avatar.date}\r\n                disabled={!((user && user.id === inputUser.id) || isAdmin())}\r\n            >\r\n                Загрузити аватар\r\n            </ImagePicker>\r\n        </Avatar>\r\n\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useParams, useHistory} from 'react-router-dom'\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n//MUI icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n//Custom components\r\nimport UserAvatar from \"./UserAvatar\";\r\n\r\n\r\nexport default function Info({origUserdata, init, ...props}) {\r\n    const [editMode, setEditMode] = React.useState(false);\r\n    const {id} = useParams();\r\n    const [userdata, setUserdata] = React.useState({...origUserdata, id: undefined});\r\n    const {user, setUser, isAdmin} = useAuth();\r\n    const [errors, setErrors] = React.useState({name: null, email: null});\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    let loading = false;\r\n\r\n    React.useEffect(() => {\r\n        setUserdata({...origUserdata, id: undefined});\r\n    }, [origUserdata]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function checkFields() {\r\n        let error = false;\r\n        if (!userdata.name) {\r\n            setErrors(last => ({...last, name: 'Заповніть обов\\'язкове поле'}));\r\n            error = true;\r\n        } else {\r\n            setErrors(last => ({...last, name: null}))\r\n        }\r\n        if (!userdata.email) {\r\n            setErrors(last => ({...last, email: 'Заповніть обов\\'язкове поле'}));\r\n            error = true;\r\n        } else {\r\n            setErrors(last => ({...last, email: null}))\r\n        }\r\n        return !error;\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        if (!checkFields()) {\r\n            return null;\r\n        }\r\n\r\n        coreRequest().put(`users/${id}`)\r\n            .send(userdata)\r\n            .then(response => {\r\n                if (user.id === +id) {\r\n                    setUser(response.body.data);\r\n                }\r\n                setEditMode(false);\r\n                init();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleEdit() {\r\n        setEditMode(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setUserdata(origUserdata);\r\n        setEditMode(false);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setUserdata({...userdata, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    if (loading) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <ListItem>\r\n            <Grid container>\r\n                <Grid item xs={12} md={6}>\r\n                    <Box p={1}>\r\n                        <UserAvatar inputUser={origUserdata}/>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={`${origUserdata.is_admin ? 'Admin |' : ''} Інформація`}\r\n                                secondary={`Оновлено ${new Date(userdata.updated_at).toLocaleString() || 'recently'}`}\r\n                                className={clsx(editMode && classes.listItemTextFix)}\r\n                            />\r\n                            {(user && user.id === +id || isAdmin()) &&\r\n                            <ListItemSecondaryAction>\r\n                                {!editMode &&\r\n                                <IconButton onClick={handleEdit}>\r\n                                    <EditIcon fontSize={'small'}/>\r\n                                </IconButton>\r\n                                }\r\n                                {editMode &&\r\n                                <React.Fragment>\r\n                                    <IconButton onClick={handleEditSubmit}>\r\n                                        <DoneIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                    <IconButton onClick={handleCancel}>\r\n                                        <CloseIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                </React.Fragment>\r\n                                }\r\n                            </ListItemSecondaryAction>\r\n                            }\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                error={!!errors.name}\r\n                                helperText={errors.name}\r\n                                disabled={!editMode}\r\n                                fullWidth\r\n                                name={'name'}\r\n                                label={'Ім\\'я'}\r\n                                value={userdata.name}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                error={!!errors.email}\r\n                                helperText={errors.email}\r\n                                disabled={!editMode}\r\n                                name={'email'}\r\n                                fullWidth\r\n                                label={'Email'}\r\n                                value={userdata.email}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid xs={12}>\r\n                    <TextField\r\n                        variant={'outlined'}\r\n                        multiline\r\n                        rows={editMode ? 10 : 5}\r\n                        label={'Про мене'}\r\n                        fullWidth\r\n                        name={'about_me'}\r\n                        onChange={handleDataInput}\r\n                        value={userdata.about_me}\r\n                        disabled={!editMode}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </ListItem>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport Input from \"@material-ui/core/Input\";\r\nimport React from \"react\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//MUI icons\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\n\r\n\r\nfunction ShowPasswordAdornment({handleClick, shown, name}) {\r\n    return (\r\n        <InputAdornment position=\"end\">\r\n            <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={event => handleClick(event, name)}\r\n            >\r\n                {shown ? <Visibility/> : <VisibilityOff/>}\r\n            </IconButton>\r\n        </InputAdornment>\r\n    );\r\n}\r\n\r\nexport default function Password({inputUser}) {\r\n    const [showPassword, setShowPassword] = React.useState({\r\n        oldpassword: false,\r\n        newpassword: false,\r\n        confirmnewpassword: false,\r\n    });\r\n    const [passwords, setPasswords] = React.useState({\r\n        password: null,\r\n        newpassword: null,\r\n        confirmpassword: null\r\n    });\r\n    const [error, setError] = React.useState(null);\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleShowPassword(event, name) {\r\n        setShowPassword({...showPassword, [name]: !showPassword[name]})\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setPasswords({...passwords, [event.target.name] : event.target.value});\r\n    }\r\n\r\n    function checkFields() {\r\n        let error = false;\r\n        if (passwords.newpassword !== passwords.confirmpassword) {\r\n            setError('Паролі не співпадають');\r\n            error = true;\r\n        }\r\n        if (!passwords.newpassword || !passwords.confirmpassword || !passwords.password) {\r\n            setError('Введіть пароль');\r\n            error = true;\r\n        }\r\n        return error;\r\n    }\r\n\r\n    function handleChangePassword () {\r\n        if (checkFields()) {\r\n            return null;\r\n        }\r\n\r\n        coreRequest().put(`users/${inputUser.id}`)\r\n            .send({old_password: passwords.password, password: passwords.newpassword})\r\n            .then(response => {\r\n                console.log(`Changed password for ${inputUser.name} | ${inputUser.email}`);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    case 422:\r\n                        setError('Некорректний пароль');\r\n                        setPasswords({...passwords, password: null});\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <ListItem>\r\n            <FormControl fullWidth>\r\n                <FormHelperText>\r\n                    Change password\r\n                </FormHelperText>\r\n                <Grid container>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                name={'password'}\r\n                                onChange={handleDataInput}\r\n                                type={showPassword.oldpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Старий пароль'}\r\n                                autoComplete={'password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.oldpassword}\r\n                                        name={'oldpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                type={showPassword.newpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Новий пароль'}\r\n                                autoComplete={'new-password'}\r\n                                name={'newpassword'}\r\n                                onChange={handleDataInput}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.newpassword}\r\n                                        name={'newpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <Input\r\n                                name={'confirmpassword'}\r\n                                onChange={handleDataInput}\r\n                                required\r\n                                type={showPassword.confirmnewpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Підтвердити новий пароль'}\r\n                                autoComplete={'confirm-new-password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.confirmnewpassword}\r\n                                        name={'confirmnewpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <FormHelperText error>{error}</FormHelperText>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            onClick={handleChangePassword}\r\n                        >\r\n                            Змінити пароль\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n        </ListItem>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {useConfirmDialog} from \"../../../Utilities/ConfirmDialog\";\r\nimport useStyles from \"./style\";\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\n\r\nexport default function DangerZone({viewed_user, updateInfo, ...props}) {\r\n    const classes = useStyles();\r\n    const {user, setUser, setToken, isAdmin} = useAuth();\r\n    const {id} = useParams();\r\n    const history = useHistory();\r\n    const confirm = useConfirmDialog();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDeleteAccount() {\r\n        if (user) {\r\n            coreRequest().delete(`users/${id}`)\r\n                .then(response => {\r\n                    if (user.id == id) {\r\n                        setUser(null);\r\n                        setToken(null);\r\n                        changeRoute('/threads');\r\n                    } else {\r\n                        changeRoute('/users');\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    switch (error.status) {\r\n                        case 401:\r\n                            changeRoute('?login=true');\r\n                            break;\r\n                        default:\r\n                            console.error(error);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    function handleTryToDeleteAccount() {\r\n        confirm(handleDeleteAccount, {\r\n            title: ` Ви впевнені, що хочете видалити акаунт: ${viewed_user.name}`,\r\n            text: `Ця операція не може бути відмінена`,\r\n        })\r\n    }\r\n\r\n    function handleMakeAdmin() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send({is_admin: true})\r\n            .then(response => {\r\n                updateInfo();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryMakeAdmin() {\r\n        confirm(handleMakeAdmin, {\r\n            title: `Зробити ${viewed_user.name} | ${viewed_user.email} адміністратором?`,\r\n            text: `Це опасна операція, адміністратор може видаляти питання, відповіді, і користувачів. Також адміністратор може пивисити іншого користувача до адміністратора чи видалити його`,\r\n        });\r\n    }\r\n\r\n    function handleMakeNotAdmin() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send({is_admin: false})\r\n            .then(response => {\r\n                updateInfo();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryMakeNotAdmin() {\r\n        confirm(handleMakeNotAdmin, {\r\n            title: `Remove admin on ${viewed_user.name} | ${viewed_user.email}?`,\r\n            text: `After removing admin user can not modify and delete threads, answers, users and manage admins`,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ListItem className={classes.dangerZone}>\r\n            <FormControl fullWidth>\r\n                <FormHelperText className={classes.dangerZone}>\r\n                    Небезпечна зона\r\n                </FormHelperText>\r\n                <List>\r\n                    <ListItem className={classes.noPaddingSides}>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            className={classes.dangerZone}\r\n                            onClick={handleTryToDeleteAccount}\r\n                        >\r\n                            Видалити акаунт\r\n                        </Button>\r\n                    </ListItem>\r\n                    {isAdmin() && viewed_user.id !== user.id &&\r\n                    <React.Fragment>\r\n                        {!viewed_user.is_admin &&\r\n                        <ListItem className={classes.noPaddingSides}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant={'outlined'}\r\n                                className={classes.dangerZone}\r\n                                onClick={handleTryMakeAdmin}\r\n                            >\r\n                                Зробити адміністратором\r\n                            </Button>\r\n                        </ListItem>\r\n                        }\r\n                        {viewed_user.is_admin &&\r\n                        <ListItem className={classes.noPaddingSides}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant={'outlined'}\r\n                                className={classes.dangerZone}\r\n                                onClick={handleTryMakeNotAdmin}\r\n                            >\r\n                                Забрати адмінімтратора\r\n                            </Button>\r\n                        </ListItem>\r\n                        }\r\n                    </React.Fragment>\r\n                    }\r\n                </List>\r\n            </FormControl>\r\n        </ListItem>\r\n\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react'\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//Custom components\r\nimport Info from './Components/Info'\r\nimport Password from \"./Components/Password\";\r\nimport DangerZone from \"./Components/DangerZone\";\r\n\r\n\r\nexport default function Account() {\r\n    const {user, isAdmin} = useAuth();\r\n    const {id} = useParams();\r\n    const [origUserdata, setOrigUserdata] = React.useState({\r\n        name: '',\r\n        email: '',\r\n        interests: '',\r\n        about_me: '',\r\n    });\r\n    const [connecting, setConnecting] = React.useState(true);\r\n    let loading = false;\r\n\r\n    function init(pause = false) {\r\n        pause && setConnecting(true);\r\n        coreRequest().get(`users/${id}`)\r\n            .then(response => {\r\n                const data = {...response.body.data, interests: 'lol'};\r\n                setOrigUserdata(data);\r\n                pause && setConnecting(false);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                pause && setConnecting(false);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        init(true);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        init(true);\r\n    }, [id, user]);\r\n\r\n    if (loading || connecting) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <List>\r\n                <Info origUserdata={origUserdata} init={init}/>\r\n                {user && user.id === +id &&\r\n                <React.Fragment>\r\n                    <Divider/>\r\n                    <Password inputUser={origUserdata}/>\r\n                </React.Fragment>\r\n                }\r\n                {(user && user.id === +id || isAdmin()) &&\r\n                <React.Fragment>\r\n                    <Divider/>\r\n                    <DangerZone\r\n                        viewed_user={origUserdata}\r\n                        updateInfo={init}\r\n                    />\r\n                    <Divider/>\r\n                </React.Fragment>\r\n                }\r\n            </List>\r\n        </Grid>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\n\r\n\r\nfunction UserCard({user, ...props}) {\r\n    const history = useHistory();\r\n    const [imageLoaded, setImageLoaded] = React.useState(true);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid item xs={12} md={6}>\r\n            <Box p={1}>\r\n                <Card>\r\n                    <CardActionArea onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            image={`${process.env.REACT_APP_CORE_AVATARS}/${user.id}.jpg`}\r\n                            alt={`Avatar of user ${user.name}`}\r\n                            height=\"140\"\r\n                            title={user.name}\r\n                            onError={event => event.target.src = 'https://ssl.gstatic.com/images/branding/product/1x/avatar_circle_grey_512dp.png'}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                {user.name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                {`${user.is_admin ? 'Admin | ' : ''}${user.email}`}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\" onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                            Профіль\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default function Users() {\r\n    const [users, setUsers] = React.useState([]);\r\n    const [connecting, setConnecting] = React.useState(true);\r\n\r\n    React.useEffect(() => {\r\n        setConnecting(true);\r\n        coreRequest().get('users')\r\n            .then(response => {\r\n                setUsers(response.body.data);\r\n                setConnecting(false);\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n    if (connecting) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <Box p={1}>\r\n                            <Breadcrumbs aria-label=\"breadcrumb\">\r\n                                <Typography color=\"textPrimary\">Користувачі</Typography>\r\n                            </Breadcrumbs>\r\n                        </Box>\r\n                    </Grid>\r\n                    {users.map(item => <UserCard key={`user-card-${item.id}`} user={item}/>)}\r\n                </Grid>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    threadsList: {\r\n        paddingRight: theme.spacing(6),\r\n    },\r\n    pagination: {\r\n        display: 'inline-flex',\r\n    },\r\n    paginationContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    ratingBadge: {\r\n        color: theme.palette.grey[500],\r\n    }\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {useHistory, useLocation, useParams} from 'react-router-dom'\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport qs from 'qs';\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\n\r\n//MUI components\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\n//MUI icons\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\n\r\n\r\nfunction ThreadListItem({thread, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    const primary = (\r\n        <Typography>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <ListItemSecondaryAction>\r\n            <Badge badgeContent={thread.reply_count} showZero color=\"primary\">\r\n                <QuestionAnswerIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n            <Badge badgeContent={thread.views_count} showZero color=\"primary\">\r\n                <VisibilityIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n        </ListItemSecondaryAction>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <ListItem button onClick={event => changeRoute(`/thread/${thread.id}`)}>\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${thread.user.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={primary}\r\n                    secondary={`${thread.user.name} | ${new Date(thread.created_at).toLocaleString()}`}\r\n                    className={classes.threadsList}\r\n                />\r\n                {secondary}\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function ThreadsViewer({articles, setArticles, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [sortBy, setSortBy] = React.useState('created_at');\r\n    const [pages, setPages] = React.useState(1);\r\n    const [page, setPage] = React.useState(1);\r\n    const location = useLocation();\r\n    const {mode} = useParams();\r\n    const {search} = qs.parse(location.search, {ignoreQueryPrefix: true});\r\n    const {user} = useAuth();\r\n    const updater = React.useRef();\r\n\r\n    function getArticles(page) {\r\n        if (!search) {\r\n            coreRequest().get(`questions${(mode && user) ? `/${mode}` : ''}`)\r\n                .query({page: page, sort: sortBy})\r\n                .then(response => {\r\n                    setArticles(response.body.data);\r\n                    setPages(response.body.meta.last_page);\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                });\r\n        } else {\r\n            coreRequest().get('questions')\r\n                .query({search, page, sort: sortBy})\r\n                .then(response => {\r\n                    setArticles(response.body.data);\r\n                }).catch(error => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getArticles(1);\r\n        clearInterval(updater.current);\r\n        updater.current = setInterval(() => {\r\n            if (!search) {\r\n                console.log(`Sync [threads]: synchronizing (${new Date().toLocaleString()})`);\r\n                getArticles();\r\n            } else {\r\n                console.log(`Sync [threads]: skipping synchronization (${new Date().toLocaleString()})`);\r\n            }\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater.current);\r\n        }\r\n    }, [mode, sortBy]);\r\n\r\n    React.useEffect(() => {\r\n        getArticles(1);\r\n    }, [search, sortBy]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleToggleSort(event, newValue) {\r\n        setSortBy(newValue);\r\n    }\r\n\r\n    function handleChangePage(event, page) {\r\n        setPage(page);\r\n        getArticles(page);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            {!search && <Typography color=\"textPrimary\">Питання</Typography>}\r\n                            {search && <Link onClick={event => changeRoute('/threads')} color=\"textPrimary\">Питання</Link>}\r\n                            {search && <Typography color=\"textPrimary\">Результати для: {search}</Typography>}\r\n                        </Breadcrumbs>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ToggleButtonGroup\r\n                            value={sortBy}\r\n                            size=\"small\"\r\n                            exclusive\r\n                            onChange={handleToggleSort}\r\n                        >\r\n                            <ToggleButton value=\"created_at\">\r\n                                Найновіші\r\n                            </ToggleButton>\r\n                            <ToggleButton value=\"reply_count\">\r\n                                По відповідям\r\n                            </ToggleButton>\r\n                            <ToggleButton value=\"views_count\">\r\n                                Популярні\r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </ListItem>\r\n                    {articles.map((item, index) => {\r\n                        return (\r\n                            <ThreadListItem thread={item} key={`artciles_${index}`}>\r\n                            </ThreadListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n                <div className={classes.paginationContainer}>\r\n                    <Pagination count={pages} page={page} onChange={handleChangePage} className={classes.pagination}/>\r\n                </div>\r\n            </Box>\r\n        </Grid>\r\n\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n//Custom components\r\nimport ParsedMessage from \"../../../Utilities/Components/ParsedMessage\";\r\n\r\n\r\nexport default function AnswerListItem({\r\n                                           answer, onEdited = () => {\r\n    }, ...props\r\n                                       }) {\r\n    const {user, isAdmin} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState(answer.text);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const {id} = useParams();\r\n    const mounted = React.useRef();\r\n    const [errors, setErrors] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        mounted.current = true;\r\n        return () => mounted.current = false;\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        setNewData(answer.text);\r\n    }, [answer]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setNewData(event.target.value);\r\n    }\r\n\r\n    function checkFields() {\r\n        if (newData === '') {\r\n            setErrors('Заповніть обов\\'язкове поле');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        if (!checkFields()) {\r\n            return null;\r\n        }\r\n\r\n        coreRequest().put(`replies/${answer.id}`)\r\n            .send({text: newData})\r\n            .then(response => {\r\n                setEdit(false);\r\n                onEdited(newData);\r\n                setErrors(null);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        setErrors('Error');\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleDelete() {\r\n        coreRequest().delete(`replies/${answer.id}`)\r\n            .then(response => {\r\n                onEdited();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData(answer.text);\r\n    }\r\n\r\n    const primary = (\r\n        <React.Fragment>\r\n            <Typography variant={'h6'}>\r\n                {answer.user.name}\r\n            </Typography>\r\n            {!edit && answer.text &&\r\n            <Typography style={{whiteSpace: 'pre-wrap'}}>\r\n                <ParsedMessage message={answer.text}/>\r\n            </Typography>\r\n            }\r\n            {edit &&\r\n            <TextField\r\n                helperText={errors}\r\n                error={!!errors}\r\n                fullWidth\r\n                label={'Відповідь'}\r\n                variant={'outlined'}\r\n                size={\"small\"}\r\n                multiline\r\n                rows={4}\r\n                onChange={handleDataInput}\r\n                value={newData}\r\n                required\r\n            />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        onClick={event => changeRoute(`/user/${answer.user.id}`)}\r\n                        src={`${process.env.REACT_APP_CORE_AVATARS}/${answer.user.id}.jpg`}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={primary}\r\n                    secondary={`опубліковано ${new Date(answer.created_at).toLocaleString()}`}\r\n                    className={clsx(classes.listItemTextFix, classes.overflowHidden)}\r\n                />\r\n                {(user && user.id === answer.user.id || isAdmin()) &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleDelete}>\r\n                            <DeleteIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react';\r\nimport {withWidth, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport useStyles from \"./style\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//Custom components\r\nimport Question from './Components/Question'\r\nimport AnswerListItem from \"./Components/AnswerListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nfunction ThreadDetails({width, ...props}) {\r\n    const [author, setAuthor] = React.useState({});\r\n    const [thread, setThread] = React.useState({});\r\n    const [answers, setAnswers] = React.useState([]);\r\n    const [myAnswer, setMyAnswer] = React.useState('');\r\n    const [errors, setErrors] = React.useState(null);\r\n    const {id} = useParams();\r\n    const {user} = useAuth();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const updater = React.useRef();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function getQuestions() {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setAuthor({...response.body.data.user});\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n                setAnswers([...response.body.data.replies]);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        clearInterval(updater.current);\r\n        getQuestions();\r\n        updater.current = setInterval(() => {\r\n            console.log(`Sync [thread]: synchronizing (${new Date().toLocaleString()})`);\r\n            getQuestions();\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater.current);\r\n        }\r\n    }, [id]);\r\n\r\n    function handleUpdateAnswers() {\r\n        coreRequest().get(`questions/${id}/replies`)\r\n            .then(response => {\r\n                setAnswers(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleUpdateThread() {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleInputAnswer(event) {\r\n        setMyAnswer(event.target.value);\r\n    }\r\n\r\n    function checkFilds() {\r\n        if (myAnswer === '') {\r\n            setErrors('Заповніть обов\\'язкове поле');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function handleAnswer() {\r\n        if (!checkFilds()) {\r\n            return null;\r\n        }\r\n\r\n        coreRequest().post(`questions/${id}/replies`)\r\n            .send({text: myAnswer})\r\n            .then(response => {\r\n                handleUpdateAnswers();\r\n                setMyAnswer('');\r\n                setErrors(null);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        setErrors('Error');\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            <Link color=\"inherit\" onClick={() => changeRoute('/threads')}>\r\n                                Питання\r\n                            </Link>\r\n                            <Typography color=\"textPrimary\">{thread.title}</Typography>\r\n                        </Breadcrumbs>\r\n                    </ListItem>\r\n                    <Question author={author} thread={thread} onEdited={handleUpdateThread}/>\r\n                    <Divider/>\r\n                    <ListItem id={'answers'}>\r\n                        <List className={classes.width100}>\r\n                            {answers.map((item, index) => {\r\n                                return (\r\n                                    <AnswerListItem key={`answer_${index}_${thread.id}_${author.id}`} answer={item}\r\n                                                    onEdited={handleUpdateAnswers}/>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </ListItem>\r\n                    {user &&\r\n                    <ListItem id={'compose'}>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    error={!!errors}\r\n                                    helperText={errors}\r\n                                    value={myAnswer}\r\n                                    multiline\r\n                                    rows={8}\r\n                                    variant={'outlined'}\r\n                                    label={'Відповідь'}\r\n                                    fullWidth\r\n                                    onChange={handleInputAnswer}\r\n                                />\r\n                            </Grid>\r\n                            {isWidthUp('sm', width) && <Grid item md={9}/>}\r\n                            <Grid item xs={12} md={3}>\r\n                                <Button fullWidth onClick={handleAnswer}>\r\n                                    Відправити\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    }\r\n                    {!user &&\r\n                    <ListItem>\r\n                        <ListItemText\r\n                            secondary={\r\n                                <React.Fragment>\r\n                                    <Link onClick={event => changeRoute('?login=true')}>\r\n                                        Login\r\n                                    </Link>\r\n                                    &nbsp;or&nbsp;\r\n                                    <Link onClick={event => changeRoute('?register=true')}>\r\n                                        sign up\r\n                                    </Link>\r\n                                    &nbsp;to leave answers\r\n                                </React.Fragment>\r\n                            }\r\n                        />\r\n                    </ListItem>\r\n                    }\r\n                </List>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ThreadDetails);","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    logo: {\r\n        width: '100%',\r\n    }\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//Images\r\nimport logo from './images/readit_logo_black.png'\r\n\r\n\r\nexport default function About() {\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route){\r\n        history.push(route);\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12}>\r\n            <List>\r\n                <ListItem>\r\n                    <Grid container justify={'center'}>\r\n                        <Grid item xs={8} md={6}>\r\n                            <img\r\n                                src={logo}\r\n                                alt={'Logo'}\r\n                                className={classes.logo}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        Що таке Readit\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        Readit - це функціональний веб портал для знаходження відповіді на будь-які питання.\r\n                        Ви можете створювати питання на будь-які теми, а інші учасники можуть вам відповісти на ваше\r\n                        питання.\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        Чому Readit\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        У нас ви зможете знайти відзивчиве комьюніті. Політика сайту не дозволяє грубо відноситись до\r\n                        співучасників форуму. Знайдеться багато людей, що захочуть допомогти вам з вашою проблемою.\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        Що робити?\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        Платформа дозволяє:\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Створювати питання'}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Відповідати на питання інших людей'}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Кастомізувати свій профіль'}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'Знаходити однодумців'}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'h5'}>\r\n                        І що далі?\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography variant={'body1'}>\r\n                        Вперед, спілкуватися!\r\n                    </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button\r\n                        onClick={() => changeRoute('/threads')}\r\n                        variant={'outlined'}\r\n                        fullWidth\r\n                    >\r\n                        До питань\r\n                    </Button>\r\n                </ListItem>\r\n            </List>\r\n        </Grid>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\n\r\n//Pages\r\nimport ThreadEditor from \"../../ThreadEditor\";\r\nimport Account from \"../../Account\";\r\nimport Users from \"../../Users\";\r\nimport ThreadsViewer from \"../../ThreadsViewer\";\r\nimport ThreadDetails from \"../../ThreadDetails\";\r\nimport About from \"../../About\";\r\n\r\n\r\nexport default function PagesSwitch({articles, setArticles, ...props}) {\r\n    const {user} = useAuth();\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path={'/threads/:mode?'}>\r\n                <ThreadsViewer articles={articles} setArticles={setArticles}/>\r\n            </Route>\r\n            <Route path={'/'} exact>\r\n                <ThreadsViewer articles={articles} setArticles={setArticles}/>\r\n            </Route>\r\n            <Route path={'/thread/:id'}>\r\n                <ThreadDetails/>\r\n            </Route>\r\n            {user &&\r\n            <Route path={'/editthread/:id'}>\r\n                <ThreadEditor/>\r\n            </Route>\r\n            }\r\n            <Route path={'/user/:id'}>\r\n                <Account/>\r\n            </Route>\r\n            <Route path={'/users'}>\r\n                <Users/>\r\n            </Route>\r\n            <Route path={'/about'}>\r\n                <About/>\r\n            </Route>\r\n        </Switch>\r\n\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    footer: {\r\n        backgroundColor: theme.palette.footer.main,\r\n        borderTop: '5px solid',\r\n        borderColor: theme.palette.footer.light,\r\n        color: theme.palette.common.white,\r\n    },\r\n    copyright: {\r\n        backgroundColor: theme.palette.footer.dark,\r\n        color: theme.palette.common.white,\r\n    }\r\n}));\r\n\r\nexport default useStyles;","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {BaseTheme} from \"../../../Themes/DefaultTheme\";\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport useStyles from \"./style\";\r\n\r\n//MUI components\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nexport default function Footer() {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <ThemeProvider theme={BaseTheme}>\r\n                <Box p={2} className={classes.footer}>\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Розробники\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/user/13`)}>\r\n                                        Андрєєв Данило\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/user/19`)}>\r\n                                        Соломаха Олександр\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/user/25`)}>\r\n                                        Нестеров Микита\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Розділи\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/threads`)}>\r\n                                        Питання\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/users`)}>\r\n                                        Користувачі\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'#'} onClick={event => changeRoute(`/editthread/new`)}>\r\n                                        Створити питання\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Використані технології\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://reactjs.org/'}>\r\n                                        React\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://material-ui.com/'}>\r\n                                        Material UI\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://laravel.com/'}>\r\n                                        Laravel\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <List>\r\n                                <ListItem>\r\n                                    Розробка\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://github.com/DanilAndreev/starscream_project'}>\r\n                                        Github репозиторій\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link href={'https://github.com/DanilAndreev/starscream_project/tree/master/web'}>\r\n                                        Github репозиторій front-end\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Link\r\n                                        href={'https://github.com/DanilAndreev/starscream_project/tree/master/backend'}>\r\n                                        Github репозиторій back-end\r\n                                    </Link>\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Grid container className={classes.copyright}>\r\n                    <Box p={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant={'subtitle2'} align={'center'}>\r\n                                Copyright (С) Andrieiev Solomaha Nesterov 2020 All rights reserved\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n            </ThemeProvider>\r\n        </Grid>\r\n    );\r\n}","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from \"react\";\r\nimport useStyles from \"../style\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n//MUI components\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport FormatListBulletedIcon from \"@material-ui/icons/FormatListBulleted\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport RecordVoiceOverIcon from \"@material-ui/icons/RecordVoiceOver\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//MUI Icons\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport RateReviewIcon from \"@material-ui/icons/RateReview\";\r\n\r\n\r\nexport default function MenuButtons() {\r\n    const classes = useStyles();\r\n    const {user} = useAuth();\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute('/threads')}\r\n            >\r\n                <FormatListBulletedIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Всі питання\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n            {user &&\r\n            <React.Fragment>\r\n                <ListItem\r\n                    dense\r\n                    button\r\n                    onClick={event => changeRoute('/threads/my')}\r\n                >\r\n                    <RecordVoiceOverIcon fontSize={'small'}/>\r\n                    <ListItemText\r\n                        primary={\"Мої питання\"}\r\n                        className={classes.leftPanelButtonsText}\r\n                    />\r\n                </ListItem>\r\n                <ListItem\r\n                    dense\r\n                    button\r\n                    onClick={event => changeRoute('/threads/commented')}\r\n                >\r\n                    <RateReviewIcon fontSize={'small'}/>\r\n                    <ListItemText\r\n                        primary={\"Прокоментовані мною\"}\r\n                        className={classes.leftPanelButtonsText}\r\n                    />\r\n                </ListItem>\r\n            </React.Fragment>\r\n            }\r\n            <Divider/>\r\n            {user &&\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute(`/user/${user.id}`)}\r\n            >\r\n                <AccountCircleIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Мій профіль\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n            }\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute('/users')}\r\n            >\r\n                <PeopleIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Користувачі\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n            <ListItem\r\n                dense\r\n                button\r\n                onClick={event => changeRoute('/about')}\r\n            >\r\n                <HelpIcon fontSize={'small'}/>\r\n                <ListItemText\r\n                    primary={\"Інформація\"}\r\n                    className={classes.leftPanelButtonsText}\r\n                />\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}\r\n","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {LightTheme, BaseTheme} from './../../Themes/DefaultTheme'\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport {withWidth, isWidthDown, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport qs from 'qs'\r\nimport clsx from \"clsx\";\r\n\r\n//Pages\r\nimport AuthDialog from \"../Auth\";\r\nimport RegistrationDialog from \"../Registration\";\r\n\r\n//MUI components\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\n//MUI icons\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\n//Custom components\r\nimport ThreadsListItem from \"./Components/ThreadsListItem\";\r\nimport PagesSwitch from \"./Components/PagesSwitch\";\r\nimport Footer from \"./Components/Footer\";\r\nimport MenuButtons from \"./Components/MenuButtons\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n\r\n//Images\r\nimport logo from './images/readit_logo_light.png';\r\n\r\n\r\nfunction Layout({width, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [search, setSearch] = React.useState('');\r\n    const [articles, setArticles] = React.useState([]);\r\n    const [authData, setAuthData] = React.useState({email: null, password: null, remember: false});\r\n    const {user, setUser, setToken} = useAuth();\r\n    const [gotUser, setGotUser] = React.useState(false);\r\n    const location = useLocation();\r\n    const {register, login, menu} = qs.parse(location.search, {ignoreQueryPrefix: true});\r\n    let loading = false;\r\n\r\n    const [topArticles, setTopArticles] = React.useState([]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        //changeRoute('/threads');\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        coreRequest().get('users/me')\r\n            .then(response => {\r\n                setUser({...response.body.data, created_at: undefined, updated_at: undefined});\r\n                setGotUser(true);\r\n                console.log(`Automatically authorized as ${response.body.data.name}`);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        setUser(null);\r\n                        setGotUser(true);\r\n                        console.log(`Automatically authorized as guest`);\r\n                        break;\r\n                    default:\r\n                        console.error('Failed to auto-authorize, error:', error);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    function handleLoadTop10Threads() {\r\n        coreRequest().get('questions/top10')\r\n            .then(response => {\r\n                setTopArticles(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        handleLoadTop10Threads();\r\n        const updater = setInterval(() => {\r\n            handleLoadTop10Threads();\r\n            console.log(`Sync [top10threads]: synchronizing (${new Date().toLocaleString()})`);\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater);\r\n        }\r\n    }, []);\r\n\r\n    function handleLogout() {\r\n        coreRequest().post('auth/logout')\r\n            .send({})\r\n            .then(response => {\r\n                setToken(null);\r\n                setUser(null);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleFindQuestion() {\r\n        search && changeRoute(`/threads?search=${search}`);\r\n        !search && changeRoute('/threads');\r\n    }\r\n\r\n    function handleAuthenticated(user) {\r\n        changeRoute(location.pathname);\r\n    }\r\n\r\n    function handleAuthClose() {\r\n        changeRoute(location.pathname);\r\n        setAuthData({username: null, password: null});\r\n    }\r\n\r\n    function handleRegistrationClose() {\r\n        changeRoute(location.pathname);\r\n    }\r\n\r\n    function handleSearchInput(event) {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    function handleCreateThread(event) {\r\n        user && changeRoute('/editthread/new');\r\n        !user && changeRoute(`?login=true`);\r\n    }\r\n\r\n    if (loading || !gotUser) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={!!login} onClose={handleAuthClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Аутентифікація</DialogTitle>\r\n                <AuthDialog authData={authData} setAuthData={setAuthData} onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={!!register} onClose={handleRegistrationClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Реєстрація</DialogTitle>\r\n                <RegistrationDialog onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            {isWidthDown('md', width) &&\r\n            <SwipeableDrawer\r\n                anchor={'left'}\r\n                open={!!menu}\r\n                onClose={event => changeRoute(location.pathname)}\r\n                onOpen={event => changeRoute(`?menu=true`)}\r\n                swipeAreaWidth={40}\r\n                classes={{paperAnchorLeft: classes.menuDrawer}}\r\n            >\r\n                <List>\r\n                    {user &&\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                src={`${process.env.REACT_APP_CORE_AVATARS}/${user.id}.jpg`}\r\n                            >\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={user && user.name}\r\n                            secondary={user && user.email}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"logout\" onClick={handleLogout}>\r\n                                <ExitToAppIcon/>\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    }\r\n                    {!user &&\r\n                    <ListItem>\r\n                        <ButtonGroup fullWidth>\r\n                            <Button onClick={event => changeRoute('?register=true')}>\r\n                                Register\r\n                            </Button>\r\n                            <Button onClick={event => changeRoute('?login=true')}>\r\n                                Login\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </ListItem>\r\n                    }\r\n                </List>\r\n                <MenuButtons/>\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemText primary={\"Топ 10 питань\"}/>\r\n                    </ListItem>\r\n                    <Divider/>\r\n                    {topArticles.map((item, index) => {\r\n                        return (\r\n                            <ThreadsListItem key={`top_artciles_${index}`} thread={item}/>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </SwipeableDrawer>\r\n            }\r\n            <AppBar position={isWidthUp('md', width) ? \"static\" : 'fixed'}>\r\n                <Toolbar>\r\n                    {isWidthDown('sm', width) &&\r\n                    <IconButton onClick={event => isWidthDown('md', width) && changeRoute(`?menu=true`)}>\r\n                        <MenuIcon color={'inherit'} className={classes.menuIcon}/>\r\n                    </IconButton>\r\n                    }\r\n                    <div className={classes.title}>\r\n                        <Button onClick={event => changeRoute('/about')}>\r\n                            <img\r\n                                src={logo}\r\n                                alt={'Logo'}\r\n                                className={clsx(classes.logo)}\r\n                            />\r\n                        </Button>\r\n                    </div>\r\n                    {!user && <Button color=\"inherit\" onClick={() => changeRoute(`?register=true`)}>Sign up</Button>}\r\n                    {!user && <Button color=\"inherit\" onClick={() => changeRoute(`?login=true`)}>Login</Button>}\r\n                    {user &&\r\n                    <Button color=\"inherit\" onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                        {isWidthUp('md', width) && user.name}\r\n                        <Avatar\r\n                            className={classes.avatar}\r\n                            src={`${process.env.REACT_APP_CORE_AVATARS}/${user.id}.jpg`}\r\n                        >\r\n                        </Avatar>\r\n                    </Button>\r\n                    }\r\n                    {user && isWidthUp('sm', width) && <Button color=\"inherit\" onClick={handleLogout}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container className={clsx(\r\n                isWidthDown('sm', width) && classes.appBarMobileMargin,\r\n            )}>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n                <Grid item xs={12} md={10} lg={8} id={'page'}>\r\n                    <Box>\r\n                        <ThemeProvider theme={LightTheme}>\r\n                            <Grid container className={classes.topLine}>\r\n                                <Grid item xs={12} md={2}/>\r\n                                <Grid item xs={12} md={7}>\r\n                                    <Box p={1}>\r\n                                        <div className={classes.searchLineBase}>\r\n                                            <TextField\r\n                                                value={search}\r\n                                                fullWidth\r\n                                                variant=\"filled\"\r\n                                                label={'Знайти питання'}\r\n                                                size={'small'}\r\n                                                name={'search'}\r\n                                                onChange={handleSearchInput}\r\n                                                onKeyPress={event => {\r\n                                                    if (event.key === 'Enter') {\r\n                                                        handleFindQuestion();\r\n                                                        setSearch('');\r\n                                                    }\r\n                                                }}\r\n                                                autoComplete={'search'}\r\n                                                InputLabelProps={{\r\n                                                    classes: {\r\n                                                        root: classes.whiteColor,\r\n                                                    }\r\n                                                }}\r\n                                                InputProps={{\r\n                                                    disableUnderline: true,\r\n                                                    classes: {\r\n                                                        root: classes.InputRoot,\r\n                                                        input: classes.whiteColor,\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            <Button\r\n                                                variant={'contained'}\r\n                                                color={'primary'}\r\n                                                onClick={handleFindQuestion}\r\n                                            >\r\n                                                <SearchIcon/>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={3}>\r\n                                    <div className={classes.createThreadButtonContainer}>\r\n                                        <Box p={1} className={classes.createThreadButtonBox}>\r\n                                            <Button\r\n                                                fullWidth\r\n                                                variant={'contained'}\r\n                                                color={'secondary'}\r\n                                                className={classes.createThreadButton}\r\n                                                onClick={handleCreateThread}\r\n                                            >\r\n                                                Створити питання\r\n                                            </Button>\r\n                                        </Box>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ThemeProvider>\r\n                        <Grid container>\r\n                            <ThemeProvider theme={LightTheme}>\r\n                                {isWidthUp('md', width) &&\r\n                                <Grid item xs={12} md={2} className={classes.leftColumn}>\r\n                                    <Box p={1}>\r\n                                        <MenuButtons/>\r\n                                    </Box>\r\n                                </Grid>\r\n                                }\r\n                            </ThemeProvider>\r\n                            <Grid item xs={12} md={7} className={classes.contentColumn}>\r\n                                <Grid container>\r\n                                    <PagesSwitch\r\n                                        articles={articles}\r\n                                        setArticles={setArticles}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            {isWidthUp('md', width) &&\r\n                            <Grid item xs={12} md={3} className={classes.rightColumn}>\r\n                                <Box p={1}>\r\n                                    <List>\r\n                                        <ListItem>\r\n                                            <ListItemText primary={\"Топ 10 питань\"}/>\r\n                                        </ListItem>\r\n                                        <Divider/>\r\n                                        {topArticles.map((item, index) => {\r\n                                            return (\r\n                                                <ThreadsListItem key={`top_artciles_${index}`} thread={item}/>\r\n                                            );\r\n                                        })}\r\n                                    </List>\r\n                                </Box>\r\n                            </Grid>\r\n                            }\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n                <Footer/>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withWidth()(Layout);\r\n","/* Author: Andrieiev Danil | danssg08@gmail.com | https://github.com/DanilAndreev\r\n   Copyright (C) 2020 */\r\nimport React from 'react';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport {BaseTheme} from \"./Themes/DefaultTheme\";\r\n\r\n//Providers\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {AuthProvider} from \"./Utilities/Auth\";\r\nimport {ConfirmDialogProvider} from \"./Utilities/ConfirmDialog\";\r\n\r\n//Custom components\r\nimport Layout from \"./Pages/Layout\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <AuthProvider>\r\n                <ThemeProvider theme={BaseTheme}>\r\n                    <ConfirmDialogProvider>\r\n                        <Router>\r\n                            <Layout/>\r\n                        </Router>\r\n                    </ConfirmDialogProvider>\r\n                </ThemeProvider>\r\n            </AuthProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}