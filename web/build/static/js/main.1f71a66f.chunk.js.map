{"version":3,"sources":["Pages/Layout/style.js","Themes/DefaultTheme/BaseTheme.js","Themes/DefaultTheme/LightTheme.js","Utilities/Rest.js","Utilities/Auth.js","Pages/ThreadsViewer/style.js","Pages/ThreadsViewer/index.js","Pages/ThreadDetails/style.js","Utilities/Components/ConfirmDialog.js","Pages/ThreadDetails/Components/Question.js","Pages/ThreadDetails/Components/AnswerListItem.js","Pages/ThreadDetails/index.js","Pages/ThreadEditor/index.js","Pages/Auth/style.js","Pages/Auth/index.js","Pages/Registration/index.js","Pages/Account/Components/style.js","Pages/Account/Components/Info.js","Pages/Account/Components/Password.js","Pages/Account/Components/DangerZone.js","Pages/Account/index.js","Pages/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","header","colorDefault","palette","primary","dark","root","flexGrow","menuButton","marginRight","spacing","title","leftColumn","backgroundColor","layout","main","color","common","white","borderTop","util","separator","topLine","contentColumn","minHeight","rightColumn","light","leftPanelButtonsText","paddingLeft","searchLineBase","display","width","createThreadButtonContainer","height","alignItems","createThreadButtonBox","avatar","marginLeft","createMuiTheme","overrides","MuiAppBar","colorPrimary","grey","blueGrey","secondary","green","coreRequest","endPoint","console","error","rlog","p","s","log","post","route","url","superagent","set","withCredentials","put","delete","get","request","process","AuthContext","React","createContext","user","token","AuthProvider","props","useState","setUser","setToken","Provider","value","isAdmin","is_admin","useAuth","useContext","threadsList","paddingRight","pagination","paginationContainer","justifyContent","ratingBadge","ThreadListItem","thread","classes","history","useHistory","Typography","ListItemSecondaryAction","Badge","badgeContent","reply_count","showZero","className","views_count","ListItem","button","onClick","event","id","push","ListItemAvatar","Avatar","ListItemText","name","Date","created_at","toLocaleString","Divider","ThreadsViewer","articles","setArticles","sortBy","setSortBy","pages","setPages","page","setPage","getArticles","query","then","response","body","data","meta","last_page","catch","err","useEffect","Grid","item","xs","Box","List","ToggleButtonGroup","size","exclusive","onChange","newValue","ToggleButton","map","index","key","Pagination","count","width100","paper_small","maxWidth","paper_middle","paper_large","ConfirmDialog","children","onCancel","onAccept","open","yes","no","class_paper","Dialog","onClose","aria-labelledby","Paper","DialogTitle","container","Button","fullWidth","Question","author","onEdited","edit","setEdit","newData","setNewData","deleteDialogOpened","setDeleteDialogOpened","handleDataInput","target","Fragment","IconButton","send","variant","TextField","label","required","multiline","rows","AnswerListItem","answer","text","fontSize","withWidth","setAuthor","setThread","answers","setAnswers","myAnswer","setMyAnswer","useParams","handleUpdateAnswers","replies","undefined","user_id","Breadcrumbs","aria-label","Link","isWidthUp","md","TabPanel","other","role","hidden","ThreadEditor","tab","setTab","categories","setCategories","category","setCategory","handleInput","Tabs","Tab","select","option","MenuItem","category_id","username","paper","Auth","authData","setAuthData","onComplete","showPassword","setShowPassword","setError","email","password","remember_me","setData","Input","placeholder","autoComplete","persist","last","type","endAdornment","InputAdornment","position","VisibilityOff","Checkbox","checked","message","JSON","parse","status","Registration","repeatpassword","errors","setErrors","handleChangeData","FormHelperText","password_confirmation","handleRegisterError","listItemTextFix","dangerZone","red","borderColor","Info","rect","setRect","useCallback","node","getBoundingClientRect","useClientRect","ref","editMode","setEditMode","interests","origUserdata","setOrigUserdata","userdata","setUserdata","connecting","setConnecting","loading","init","pause","style","updated_at","clsx","disabled","ShowPasswordAdornment","handleClick","shown","Password","oldpassword","newpassword","confirmnewpassword","handleShowPassword","FormControl","DangerZone","confirmDeleteAccountOpened","setConfirmDeleteAccountOpened","Account","ThreadsListItem","PagesSwitch","path","search","setSearch","authOpened","setAuthOpened","registrationOpened","setRegistrationOpened","gotUser","setGotUser","handleAuthenticated","changeRoute","AppBar","Toolbar","lg","ThemeProvider","LightTheme","createThreadButton","dense","App","BaseTheme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f71a66f.chunk.js","sourcesContent":["import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        colorDefault: theme.palette.primary.dark,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    leftColumn: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n        borderTop: `1px solid ${theme.palette.util.separator}`,\r\n    },\r\n    topLine: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n    },\r\n    contentColumn: {\r\n        backgroundColor: theme.palette.common.white,\r\n        minHeight: `calc(100vh - 64px)`,\r\n    },\r\n    rightColumn: {\r\n        backgroundColor: theme.palette.layout.light,\r\n    },\r\n    leftPanelButtonsText: {\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    searchLineBase: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    createThreadButtonContainer: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n        alignItems: 'stretch',\r\n    },\r\n    createThreadButtonBox: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, grey} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            colorPrimary: {\r\n                backgroundColor: grey[900],\r\n            },\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[600],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[100],\r\n        },\r\n/*\r\n        secondary: {\r\n            main:\r\n        },\r\n\r\n */\r\n        layout: {\r\n            main: blueGrey[800],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[50],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        }\r\n\r\n    },\r\n});\r\n\r\nexport default theme;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, green} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[100],\r\n            dark: blueGrey[300],\r\n            light: blueGrey[50],\r\n        },\r\n        secondary: {\r\n            main: green[700],\r\n            dark: green[900],\r\n            light: green[500],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        }\r\n    },\r\n});\r\n\r\nexport default theme;","import superagent from 'superagent';\r\n\r\n\r\nexport const request = (endPoint) => {\r\n    if (!endPoint) {\r\n        console.error(\"request endPoint undefined\");\r\n    }\r\n    const rlog = (p, s) => console.log(`request.${p}:`, s);\r\n    return {\r\n        endPoint: () => endPoint,\r\n        post: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('post', url);\r\n            return superagent.post(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        put: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('put', url);\r\n            return superagent.put(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        delete: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('delete', url);\r\n            return superagent.delete(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        get: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('get', url);\r\n            return superagent.get(url).set('accept', 'application/json').withCredentials();\r\n        }\r\n    }\r\n};\r\n\r\nexport const coreRequest = () => {\r\n    return request(process.env.REACT_APP_CORE_URL);\r\n};\r\n","import React from 'react'\r\n\r\n\r\nconst AuthContext = React.createContext({user: null, token: null});\r\n\r\nfunction AuthProvider(props) {\r\n    const [user, setUser] = React.useState(null);\r\n    const [token, setToken] = React.useState(null);\r\n\r\n    const isAdmin = () => {\r\n        return !!user.is_admin;\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{user, setUser, token, setToken, isAdmin}} {...props} />\r\n    );\r\n}\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport {AuthProvider, useAuth}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    threadsList: {\r\n        paddingRight: theme.spacing(6),\r\n    },\r\n    pagination: {\r\n        display: 'inline-flex',\r\n    },\r\n    paginationContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    ratingBadge: {\r\n        color: theme.palette.grey[500],\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\n\r\n//MUI components\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\n//MUI icons\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\n\r\n\r\nfunction ThreadListItem({thread, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    const primary = (\r\n        <Typography>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <ListItemSecondaryAction>\r\n            <Badge badgeContent={thread.reply_count} showZero color=\"primary\">\r\n                <QuestionAnswerIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n            <Badge badgeContent={thread.views_count} showZero color=\"primary\">\r\n                <VisibilityIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n        </ListItemSecondaryAction>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <ListItem button onClick={event => changeRoute(`/thread/${thread.id}`)}>\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                        <ImageIcon/>\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={primary} secondary={`${thread.user.name} | ${new Date(thread.created_at).toLocaleString()}`} className={classes.threadsList}/>\r\n                {secondary}\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function ThreadsViewer({articles, setArticles, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [sortBy, setSortBy] = React.useState('newest');\r\n    const [pages, setPages] = React.useState(1);\r\n    const [page, setPage] = React.useState(1);\r\n\r\n    function getArticles(page) {\r\n        coreRequest().get('questions')\r\n            .query({page: page})\r\n            .then(response => {\r\n                setArticles(response.body.data);\r\n                setPages(response.body.meta.last_page);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getArticles(1);\r\n    }, []);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleToggleSort(event, newValue) {\r\n        setSortBy(newValue);\r\n    }\r\n\r\n    function handleChangePage(event, page) {\r\n        setPage(page);\r\n        getArticles(page);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemText primary={\"All threads\"}/>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ToggleButtonGroup\r\n                            value={sortBy}\r\n                            size=\"small\"\r\n                            exclusive\r\n                            onChange={handleToggleSort}\r\n                        >\r\n                            <ToggleButton value=\"newest\">\r\n                                Newest\r\n                            </ToggleButton>\r\n                            <ToggleButton value=\"popular\">\r\n                                Most popular\r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </ListItem>\r\n                    {articles.map((item, index) => {\r\n                        return (\r\n                            <ThreadListItem thread={item} key={`artciles_${index}`}>\r\n                            </ThreadListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n                <div className={classes.paginationContainer}>\r\n                    <Pagination count={pages} page={page} onChange={handleChangePage} className={classes.pagination}/>\r\n                </div>\r\n            </Box>\r\n        </Grid>\r\n\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper_small: {\r\n        maxWidth: '300px',\r\n    },\r\n    paper_middle: {\r\n        maxWidth: '400px',\r\n    },\r\n    paper_large: {\r\n        maxWidth: '500px',\r\n    },\r\n}));\r\n\r\nexport default function ConfirmDialog({\r\n                                          children,\r\n                                          onCancel = () => {\r\n                                          },\r\n                                          onAccept = () => {\r\n                                          },\r\n                                          open = true,\r\n                                          yes = 'Yes',\r\n                                          no = 'No',\r\n                                          size = 'middle',\r\n                                          ...props\r\n                                      }) {\r\n    const classes = useStyles();\r\n\r\n    let class_paper = classes.paper_middle;\r\n    switch (size){\r\n        case 'small':\r\n            class_paper = classes.paper_small;\r\n            break;\r\n        case 'large':\r\n            class_paper = classes.paper_large;\r\n            break;\r\n        case 'middle':\r\n            break;\r\n        default:\r\n            console.error(`Unresolved size props, expected (\"small\",\"middle\",\"large\"), got ${size}`);\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={onCancel} aria-labelledby=\"confirm-dialog-title\" open={open}>\r\n            <Paper className={class_paper}>\r\n                <DialogTitle id=\"confirm-dialog-title\">{children}</DialogTitle>\r\n                <Grid container>\r\n                    <Grid item xs={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size={\"large\"}\r\n                            onClick={onCancel}\r\n                        >\r\n                            {no}\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size={\"large\"}\r\n                            onClick={onAccept}\r\n                        >\r\n                            {yes}\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </Dialog>\r\n    );\r\n}","import React from \"react\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n\r\n//Custom components\r\nimport ConfirmDialog from \"../../../Utilities/Components/ConfirmDialog\";\r\n\r\nexport default function Question({author, thread, onEdited = () => {}, ...props}) {\r\n    const history = useHistory();\r\n    const {user} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState({title: thread.title, body: thread.body});\r\n    const [deleteDialogOpened, setDeleteDialogOpened] = React.useState(false);\r\n    const loading = false;\r\n\r\n    React.useEffect(() => {\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }, [thread]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setNewData({...newData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`questions/${thread.id}`)\r\n            .send(newData)\r\n            .then(response => {\r\n                console.log(response);\r\n                setEdit(false);\r\n                onEdited(newData);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleDelete() {\r\n        setDeleteDialogOpened(false);\r\n        coreRequest().delete(`questions/${thread.id}`)\r\n            .then(response => {\r\n                changeRoute('/threads');\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }\r\n\r\n    if (loading) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ConfirmDialog\r\n                open={deleteDialogOpened}\r\n                onAccept={handleDelete}\r\n                onCancel={() => setDeleteDialogOpened(false)}\r\n            >\r\n                Are you sure you want delete thread: {thread.title}\r\n            </ConfirmDialog>\r\n            <ListItem id={'author'}>\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={author.name}\r\n                              secondary={`posted ${thread.created_at && new Date(thread.created_at).toLocaleString() || 'just now'}`}/>\r\n                {user && user.id === author.id &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={() => setDeleteDialogOpened(true)}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <ListItem id={'question'}>\r\n                {!edit &&\r\n                <Typography variant={'h5'}>\r\n                    {thread.title}\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    fullWidth\r\n                    label={'Summary'}\r\n                    required\r\n                    value={newData.title}\r\n                    name={'title'}\r\n                    variant={'outlined'}\r\n                    onChange={handleDataInput}\r\n                />\r\n                }\r\n            </ListItem>\r\n            <ListItem>\r\n                {!edit &&\r\n                <Typography variant={'body1'}>\r\n                    {thread.body}\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    fullWidth\r\n                    label={'Description'}\r\n                    required\r\n                    value={newData.body}\r\n                    name={'body'}\r\n                    variant={'outlined'}\r\n                    size={\"small\"}\r\n                    onChange={handleDataInput}\r\n                    multiline\r\n                    rows={6}\r\n                />\r\n                }\r\n            </ListItem>\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n\r\nexport default function AnswerListItem({answer, onEdited = () => {}, ...props}) {\r\n    const {user} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState(answer.text);\r\n\r\n    React.useEffect(() => {\r\n        setNewData(answer.text);\r\n    }, [answer]);\r\n\r\n    function handleDataInput(event) {\r\n        setNewData(event.target.value);\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        console.log(newData);\r\n        coreRequest().put(`replies/${answer.id}`)\r\n            .send({text: newData})\r\n            .then(response => {\r\n                console.log(response);\r\n                setEdit(false);\r\n                onEdited(newData);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleDelete() {\r\n        coreRequest().delete(`replies/${answer.id}`)\r\n            .then(response => {\r\n                onEdited();\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData(answer.text);\r\n    }\r\n\r\n    const primary = (\r\n        <React.Fragment>\r\n            <Typography variant={'h6'}>\r\n                {answer.user.name}\r\n            </Typography>\r\n            {!edit && answer.text}\r\n            {edit &&\r\n            <TextField\r\n                fullWidth\r\n                label={'Answer'}\r\n                variant={'outlined'}\r\n                size={\"small\"}\r\n                multiline\r\n                rows={4}\r\n                onChange={handleDataInput}\r\n                value={newData}\r\n                required\r\n            />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={primary} secondary={`posted ${new Date(answer.created_at).toLocaleString()}`}/>\r\n                {user && user.id === answer.user.id &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleDelete}>\r\n                            <DeleteIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport {withWidth, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport useStyles from \"./style\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\n//Custom components\r\nimport Question from './Components/Question'\r\nimport AnswerListItem from \"./Components/AnswerListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nfunction ThreadDetails({width, ...props}) {\r\n    const [author, setAuthor] = React.useState({});\r\n    const [thread, setThread] = React.useState({});\r\n    const [answers, setAnswers] = React.useState([]);\r\n    const [myAnswer, setMyAnswer] = React.useState('');\r\n    const {id} = useParams();\r\n    const {user} = useAuth();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setAuthor(response.body.data.user);\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n                setAnswers(response.body.data.replies);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    function handleUpdateAnswers() {\r\n        coreRequest().get(`questions/${id}/replies`)\r\n            .then(response => {\r\n                setAnswers(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleUpdateThread() {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleInputAnswer(event) {\r\n        setMyAnswer(event.target.value);\r\n    }\r\n\r\n    function handleAnswer() {\r\n        coreRequest().post(`questions/${id}/replies`)\r\n            .send({text: myAnswer})\r\n            .then(response => {\r\n                handleUpdateAnswers();\r\n                setMyAnswer('');\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            <Link color=\"inherit\" onClick={() => changeRoute('/threads')}>\r\n                                Threads\r\n                            </Link>\r\n                            <Typography color=\"textPrimary\">{thread.title}</Typography>\r\n                        </Breadcrumbs>\r\n                    </ListItem>\r\n                    <Question author={author} thread={thread} onEdited={handleUpdateThread}/>\r\n                    <Divider/>\r\n                    <ListItem id={'answers'}>\r\n                        <List className={classes.width100}>\r\n                            {answers.map((item, index) => {\r\n                                return (\r\n                                    <AnswerListItem key={`answer_${index}`} answer={item} onEdited={handleUpdateAnswers}/>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </ListItem>\r\n                    {user &&\r\n                    <ListItem id={'compose'}>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    value={myAnswer}\r\n                                    multiline\r\n                                    rows={8}\r\n                                    variant={'outlined'}\r\n                                    label={'Answer'}\r\n                                    fullWidth\r\n                                    onChange={handleInputAnswer}\r\n                                />\r\n                            </Grid>\r\n                            {isWidthUp('sm', width) && <Grid item md={10}/>}\r\n                            <Grid item xs={12} md={2}>\r\n                                <Button fullWidth onClick={handleAnswer}>\r\n                                    Send\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    }\r\n                    {!user &&\r\n                    <ListItem>\r\n                        <ListItemText\r\n                            secondary={'Login or sign up to leave messages'}\r\n                        />\r\n                    </ListItem>\r\n                    }\r\n                </List>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ThreadDetails);","import React from 'react'\r\nimport {coreRequest} from '../../Utilities/Rest'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Question from './../ThreadDetails/Components/Question'\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nfunction TabPanel({children, value, index, ...other}) {\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`thread-editor-tabpanel--${index}`}\r\n            aria-labelledby={`thread-editor-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                children\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ThreadEditor({...props}) {\r\n    const [tab, setTab] = React.useState(0);\r\n    const [thread, setThread] = React.useState({title: null, body: null});\r\n    const [categories, setCategories] = React.useState([]);\r\n    const [category, setCategory] = React.useState(null);\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        coreRequest().get('categories')\r\n            .then(response => {\r\n                setCategories(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    function handleSubmit() {\r\n        coreRequest().post('questions')\r\n            .send({...thread, category_id: category})\r\n            .then(response => {\r\n                changeRoute(`/thread/${response.body.data.id}`);\r\n            })\r\n            .catch(error => {\r\n            });\r\n    }\r\n\r\n    function handleChangeTab(event, newValue) {\r\n        setTab(newValue);\r\n    }\r\n\r\n    function handleInput(event) {\r\n        setThread({...thread, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function handleCategorySelect(event) {\r\n        setCategory(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Tabs\r\n                value={tab}\r\n                onChange={handleChangeTab}\r\n                aria-label=\"simple tabs example\"\r\n                variant={'fullWidth'}\r\n            >\r\n                <Tab label=\"Edit\"/>\r\n                <Tab label=\"Preview\"/>\r\n            </Tabs>\r\n            <TabPanel value={tab} index={0}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography variant={'h6'}>\r\n                            Create new thread\r\n                        </Typography>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            label={'Sumarry'}\r\n                            value={thread.title || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            name={'title'}\r\n                            onChange={handleInput}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            label={'Description'}\r\n                            value={thread.body || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            multiline\r\n                            rows={10}\r\n                            name={'body'}\r\n                            onChange={event => handleInput(event, 'body')}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            select\r\n                            name={'category_id'}\r\n                            label={'Category'}\r\n                            value={category || ''}\r\n                            onChange={handleCategorySelect}\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                        >\r\n                            {categories.map(option => (\r\n                                <MenuItem key={option.id} value={option.id}>\r\n                                    {option.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </ListItem>\r\n                </List>\r\n            </TabPanel>\r\n            <TabPanel value={tab} index={1}>\r\n                <Question\r\n                    author={{username: 'Andreev Danil'}}\r\n                    thread={{\r\n                        title: thread.title || 'Fill the summary input line',\r\n                        body: thread.body || 'Fill the description input line',\r\n                    }}\r\n                />\r\n            </TabPanel>\r\n        </Grid>\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        maxWidth: '300px',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\nexport default function Auth({\r\n                                 authData,\r\n                                 setAuthData,\r\n                                 onComplete = () => {\r\n                                 },\r\n                                 ...props\r\n                             }) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [error, setError] = React.useState(null);\r\n    const [data, setData] = React.useState({email: null, password: null, remember_me: false});\r\n    const {setUser} = useAuth();\r\n    const classes = useStyles();\r\n\r\n    if (!authData) {\r\n        authData = data;\r\n        setAuthData = setData;\r\n    }\r\n\r\n    function handleLogin() {\r\n        if (!authData.email || !authData.password) {\r\n            setError('Credential cannot be empty');\r\n            return;\r\n        }\r\n\r\n        coreRequest().post('auth/login')\r\n            .send(authData)\r\n            .then(response => {\r\n                console.log(response);\r\n                setUser(response.body.data);\r\n                onComplete(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                const message = JSON.parse(error.message).message;\r\n                switch (error.status) {\r\n                    case 403:\r\n                        setError(message);\r\n                        break;\r\n                    case 422:\r\n                        setError('Incorrect email or password');\r\n                        break;\r\n                    default:\r\n                        setError('Unexpected error, see console for more information');\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, password: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeEmail(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, email: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRememberMe(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, remember_me: event.target.checked || false}));\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <List>\r\n                {error && <ListItem>\r\n                    <Typography color={'error'} variant={'body2'}>\r\n                        {error}\r\n                    </Typography>\r\n                </ListItem>}\r\n                <ListItem>\r\n                    <Input\r\n                        placeholder={'Email'}\r\n                        fullWidth\r\n                        required\r\n                        autoComplete={'email'}\r\n                        onChange={handleChangeEmail}\r\n                        value={authData.email || ''}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Input\r\n                        id=\"standard-adornment-password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={authData.password || ''}\r\n                        placeholder={'Password'}\r\n                        onChange={handleChangePassword}\r\n                        autoComplete={'password'}\r\n                        fullWidth\r\n                        required\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleChangeShowPassword}\r\n                                >\r\n                                    {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={'Remember me'}/>\r\n                    <ListItemSecondaryAction>\r\n                        <Checkbox checked={authData.remember_me} onChange={handleRememberMe}/>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button fullWidth onClick={handleLogin}>\r\n                        Sign in\r\n                    </Button>\r\n                </ListItem>\r\n            </List>\r\n        </Paper>\r\n    );\r\n}","import React from 'react';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nexport default function Registration({authData, setAuthData, onComplete, ...props}) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [data, setData] = React.useState({username: null, password: null, email: null});\r\n    const {setUser} = useAuth();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = React.useState({username: null, email: null, password: null, repeatpassword: null});\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setData(last => ({...last, password: event.target.value || null}));\r\n    }\r\n\r\n    function handleChangeData(event) {\r\n        event.persist();\r\n        setData(last => ({...last, [event.target.name]: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRegisterError(error) {\r\n        setErrors({username: null, email: null, password: null, repeatpassword: null});\r\n\r\n        switch (error.status) {\r\n            case 422:\r\n                setErrors(last => ({...last, password: 'Password is too short'}));\r\n                const errors = JSON.parse(error.message).errors;\r\n                for (const key in errors) {\r\n                    let message = 'Unresolved error';\r\n                    const error = errors[key][0];\r\n                    if (error) {\r\n                        switch (error) {\r\n                            case 'validation.email':\r\n                                message = 'Incorrect email';\r\n                                break;\r\n                            case 'validation.min.string':\r\n                                message = 'Password is too short';\r\n                                break;\r\n                            case 'validation.unique':\r\n                                message = 'Username is already taken';\r\n                                break;\r\n                        }\r\n                        setErrors(last => ({...last, [key]: message}));\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    function handleRegister() {\r\n        coreRequest().post('auth/register')\r\n            .send({...data, password_confirmation: data.password, name: data.username, username: undefined})\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                changeRoute(`/user/${response.body.data.id}`);\r\n                onComplete();\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                handleRegisterError(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Username'}\r\n                            fullWidth\r\n                            required\r\n                            name={'username'}\r\n                            onChange={handleChangeData}\r\n                            value={data.username || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.username && <FormHelperText error> {errors.username} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Email'}\r\n                            fullWidth\r\n                            required\r\n                            name={'email'}\r\n                            onChange={handleChangeData}\r\n                            value={data.email || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.email && <FormHelperText error> {errors.email} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            id=\"standard-adornment-password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={data.password || ''}\r\n                            placeholder={'Password'}\r\n                            onChange={handleChangePassword}\r\n                            required\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleChangeShowPassword}\r\n                                    >\r\n                                        {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    }\r\n                    secondary={errors.password && <FormHelperText error> {errors.password} </FormHelperText>}\r\n                />\r\n\r\n            </ListItem>\r\n            <ListItem>\r\n                <Button fullWidth onClick={handleRegister}>\r\n                    Sign up\r\n                </Button>\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\nimport {red} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItemTextFix: {\r\n        paddingRight: theme.spacing(5),\r\n    },\r\n    dangerZone: {\r\n        backgroundColor: red[700],\r\n        color: theme.palette.common.white,\r\n        borderColor: theme.palette.common.white,\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport {useParams} from 'react-router-dom'\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n//MUI icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n\r\nfunction useClientRect() {\r\n    const [rect, setRect] = React.useState(null);\r\n    const ref = React.useCallback(node => {\r\n        if (node !== null) {\r\n            setRect(node.getBoundingClientRect());\r\n        }\r\n    }, []);\r\n    return [rect, ref];\r\n}\r\n\r\nexport default function Info() {\r\n    const [rect, ref] = useClientRect();\r\n    const [editMode, setEditMode] = React.useState(false);\r\n    const {id} = useParams();\r\n    const [origUserdata, setOrigUserdata] = React.useState({\r\n        name: '',\r\n        email: '',\r\n        interests: ''\r\n    });\r\n    const [userdata, setUserdata] = React.useState({\r\n        name: '',\r\n        email: '',\r\n        interests: ''\r\n    });\r\n    const [connecting, setConnecting] = React.useState(true);\r\n    const {user, setUser} = useAuth();\r\n    const classes = useStyles();\r\n    let loading = false;\r\n\r\n    function init(pause = false) {\r\n        pause && setConnecting(true);\r\n        coreRequest().get(`users/${id}`)\r\n            .then(response => {\r\n                const data = {...response.body.data, id: undefined, interests: 'lol'};\r\n                setOrigUserdata(data);\r\n                setUserdata(data);\r\n                pause && setConnecting(false);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                pause && setConnecting(false);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        init(true);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        init(true);\r\n    }, [id, user]);\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send(userdata)\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                setEditMode(false);\r\n                init();\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleEdit() {\r\n        setEditMode(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setUserdata(origUserdata);\r\n        setEditMode(false);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setUserdata({...userdata, [event.target.name]: event.target.value});\r\n    }\r\n\r\n   if (loading || connecting) {\r\n       return null;\r\n   }\r\n\r\n    return (\r\n        <ListItem>\r\n            <Grid container>\r\n                <Grid item xs={12} md={6}>\r\n                    <Box p={1}>\r\n                        <Avatar\r\n                            ref={ref}\r\n                            style={{width: '100%', height: rect && rect.width}}\r\n                        >\r\n                        </Avatar>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={'User info'}\r\n                                secondary={`Last updated ${new Date(userdata.updated_at).toLocaleString() || 'recently'}`}\r\n                                className={clsx(editMode && classes.listItemTextFix)}\r\n                            />\r\n                            {user && user.id === +id &&\r\n                            <ListItemSecondaryAction>\r\n                                {!editMode &&\r\n                                <IconButton onClick={handleEdit}>\r\n                                    <EditIcon fontSize={'small'}/>\r\n                                </IconButton>\r\n                                }\r\n                                {editMode &&\r\n                                <React.Fragment>\r\n                                    <IconButton onClick={handleEditSubmit}>\r\n                                        <DoneIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                    <IconButton onClick={handleCancel}>\r\n                                        <CloseIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                </React.Fragment>\r\n                                }\r\n                            </ListItemSecondaryAction>\r\n                            }\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                fullWidth\r\n                                name={'name'}\r\n                                label={'Name'}\r\n                                value={userdata.name}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                name={'email'}\r\n                                fullWidth\r\n                                label={'Email'}\r\n                                value={userdata.email}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                name={'interests'}\r\n                                fullWidth\r\n                                label={'Interests'}\r\n                                value={userdata.interests}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n            </Grid>\r\n        </ListItem>\r\n    );\r\n}","import ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport React from \"react\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\n\r\nfunction ShowPasswordAdornment({handleClick, shown, name}) {\r\n    return (\r\n        <InputAdornment position=\"end\">\r\n            <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={event => handleClick(event, name)}\r\n            >\r\n                {shown ? <Visibility/> : <VisibilityOff/>}\r\n            </IconButton>\r\n        </InputAdornment>\r\n    );\r\n}\r\n\r\nexport default function Password() {\r\n    const [showPassword, setShowPassword] = React.useState({\r\n        oldpassword: false,\r\n        newpassword: false,\r\n        confirmnewpassword: false,\r\n    });\r\n\r\n    function handleShowPassword(event, name) {\r\n        setShowPassword({...showPassword, [name]: !showPassword[name]})\r\n    }\r\n\r\n    return (\r\n        <ListItem>\r\n            <FormControl fullWidth>\r\n                <FormHelperText>\r\n                    Change password\r\n                </FormHelperText>\r\n                <Grid container>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                type={showPassword.oldpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Old password'}\r\n                                autoComplete={'password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.oldpassword}\r\n                                        name={'oldpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                type={showPassword.newpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'New password'}\r\n                                autoComplete={'new-password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.newpassword}\r\n                                        name={'newpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <Input\r\n                                required\r\n                                type={showPassword.confirmnewpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Confirm new password'}\r\n                                autoComplete={'confirm-new-password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.confirmnewpassword}\r\n                                        name={'confirmnewpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                        >\r\n                            Change password\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n        </ListItem>\r\n    );\r\n}","import ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport React from \"react\";\r\nimport useStyles from \"./style\";\r\nimport ConfirmDialog from \"../../../Utilities/Components/ConfirmDialog\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport default function DangerZone() {\r\n    const classes = useStyles();\r\n    const [confirmDeleteAccountOpened, setConfirmDeleteAccountOpened] = React.useState(false);\r\n    const {user, setUser, setToken} = useAuth();\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDeleteAccount() {\r\n        setConfirmDeleteAccountOpened(false);\r\n        if (user) {\r\n            coreRequest().delete(`users/${user.id}`)\r\n                .then(response => {\r\n                    setUser(null);\r\n                    setToken(null);\r\n                    changeRoute('/threads');\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    function handleCancelDeleteAccount() {\r\n        setConfirmDeleteAccountOpened(false);\r\n    }\r\n\r\n    return (\r\n        <ListItem className={classes.dangerZone}>\r\n            <ConfirmDialog\r\n                open={confirmDeleteAccountOpened}\r\n                onCancel={handleCancelDeleteAccount}\r\n                onAccept={handleDeleteAccount}\r\n            >\r\n                Are you sure you want delete account: {user.name}\r\n            </ConfirmDialog>\r\n            <FormControl fullWidth>\r\n                <FormHelperText className={classes.dangerZone}>\r\n                    Danger zone\r\n                </FormHelperText>\r\n                <Button\r\n                    fullWidth\r\n                    variant={'outlined'}\r\n                    className={classes.dangerZone}\r\n                    onClick={event => setConfirmDeleteAccountOpened(true)}\r\n                >\r\n                    Delete account\r\n                </Button>\r\n            </FormControl>\r\n        </ListItem>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//Custom components\r\nimport Info from './Components/Info'\r\nimport Password from \"./Components/Password\";\r\nimport DangerZone from \"./Components/DangerZone\";\r\n\r\n\r\nexport default function Account() {\r\n    const {user} = useAuth();\r\n    const {id} = useParams();\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <List>\r\n                <Info/>\r\n                {user && user.id === +id &&\r\n                <React.Fragment>\r\n                    <Divider/>\r\n                    <Password />\r\n                    <Divider/>\r\n                    <DangerZone/>\r\n                    <Divider/>\r\n                </React.Fragment>\r\n                }\r\n            </List>\r\n        </Grid>\r\n    );\r\n}","import React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {LightTheme} from './../../Themes/DefaultTheme'\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {Route, Switch, useHistory} from \"react-router-dom\";\r\nimport {withWidth, isWidthDown, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\n\r\n\r\n//Pages\r\nimport ThreadsViewer from \"../ThreadsViewer\";\r\nimport ThreadDetails from \"../ThreadDetails\";\r\nimport ThreadEditor from \"../ThreadEditor\";\r\nimport AuthDialog from \"../Auth\";\r\nimport RegistrationDialog from \"../Registration\";\r\nimport Account from \"../Account\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\n//MUI icons\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport RecordVoiceOverIcon from '@material-ui/icons/RecordVoiceOver';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nfunction ThreadsListItem({thread, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const primary = (\r\n        <Typography variant={'body2'}>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <>\r\n            {`${thread.answers} answers`}\r\n        </>\r\n    );\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem\r\n                button\r\n                onClick={event => changeRoute('/thread/1')}\r\n            >\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                        <ImageIcon/>\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={primary} secondary={secondary}/>\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction PagesSwitch({articles, setArticles, ...props}) {\r\n    const {user} = useAuth();\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path={'/threads'}>\r\n                <ThreadsViewer articles={articles} setArticles={setArticles}/>\r\n            </Route>\r\n            <Route path={'/thread/:id'}>\r\n                <ThreadDetails/>\r\n            </Route>\r\n            {user &&\r\n                <Route path={'/editthread/:id'}>\r\n                <ThreadEditor/>\r\n            </Route>\r\n            }\r\n            <Route path={'/user/:id'}>\r\n                <Account/>\r\n            </Route>\r\n        </Switch>\r\n\r\n    );\r\n}\r\n\r\nfunction Layout({width, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [search, setSearch] = React.useState('');\r\n    const [articles, setArticles] = React.useState([]);\r\n    const [authOpened, setAuthOpened] = React.useState(false);\r\n    const [authData, setAuthData] = React.useState({email: null, password: null, remember_me: false});\r\n    const [registrationOpened, setRegistrationOpened] = React.useState(false);\r\n    const {user, setUser, setToken} = useAuth();\r\n    const [gotUser, setGotUser] = React.useState(false);\r\n    let loading = false;\r\n\r\n    const topArticles = [\r\n        {title: 'Какие книги читать по python для продолжение изучения?\\n', answers: 4},\r\n        {title: 'Как добавлять текст к input?', answers: 2},\r\n        {title: 'Какой монитор на IPS матрице выбрать?', answers: 8},\r\n        {title: 'Как устроена андроид разработка по аналогии с веб фронтенд разработкой?', answers: 4},\r\n        {title: 'Что не так с кодом ютуба?', answers: 10}\r\n    ];\r\n\r\n    React.useEffect(() => {\r\n        loading=true;\r\n        changeRoute('/threads');\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        coreRequest().get('users/me')\r\n            .then(response => {\r\n                setUser({...response.body.data, created_at: undefined, updated_at: undefined});\r\n                setGotUser(true);\r\n            })\r\n            .catch(error => {\r\n                setUser(null);\r\n                setGotUser(true);\r\n            });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        /*\r\n        coreRequest().get('')\r\n            .then(response => {\r\n\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n\r\n         */\r\n    }, []);\r\n\r\n    function handleLogout() {\r\n        coreRequest().post('auth/logout')\r\n            .send({})\r\n            .then(response => {\r\n                setToken(null);\r\n                setUser(null);\r\n            })\r\n            .catch(console.error);\r\n    }\r\n\r\n    function handleFindQuestion() {\r\n        let request = coreRequest().get('questions');\r\n        if (search && search !== '') {\r\n            request = request.query({search});\r\n        }\r\n        request.then(response => {\r\n            setArticles(response.body.data);\r\n            changeRoute('/threads');\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    function handleAuthenticated(user) {\r\n        setAuthOpened(false);\r\n        setRegistrationOpened(false);\r\n    }\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleAuthClose() {\r\n        setAuthOpened(false);\r\n        setAuthData({username: null, password: null});\r\n    }\r\n\r\n    function handleRegistrationClose() {\r\n        setRegistrationOpened(false);\r\n    }\r\n\r\n    function handleSearchInput(event) {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    function handleCreateThread(event) {\r\n        user && changeRoute('/editthread/new');\r\n        !user && setAuthOpened(true);\r\n    }\r\n\r\n    if (loading || !gotUser) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={authOpened} onClose={handleAuthClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Authentication</DialogTitle>\r\n                <AuthDialog authData={authData} setAuthData={setAuthData} onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={registrationOpened} onClose={handleRegistrationClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Registration</DialogTitle>\r\n                <RegistrationDialog onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Forum\r\n                    </Typography>\r\n                    {!user && <Button color=\"inherit\" onClick={() => setRegistrationOpened(true)}>Sign up</Button>}\r\n                    {!user && <Button color=\"inherit\" onClick={() => setAuthOpened(true)}>Login</Button>}\r\n                    {user && <Button color=\"inherit\">\r\n                        {user.name}\r\n                        <Avatar className={classes.avatar}>\r\n                            <ImageIcon/>\r\n                        </Avatar>\r\n                    </Button>}\r\n                    {user && <Button color=\"inherit\" onClick={handleLogout}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n                <Grid item xs={12} md={10} lg={8} id={'page'}>\r\n                    <Box>\r\n                        <ThemeProvider theme={LightTheme}>\r\n                            <Grid container className={classes.topLine}>\r\n                                <Grid item xs={12} md={2}/>\r\n                                <Grid item xs={12} md={7}>\r\n                                    <Box p={1}>\r\n                                        <div className={classes.searchLineBase}>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                variant=\"filled\"\r\n                                                label={'Find question'}\r\n                                                size={'small'}\r\n                                                name={'search'}\r\n                                                onChange={handleSearchInput}\r\n                                                autoComplete={'search'}\r\n                                            />\r\n                                            <Button\r\n                                                variant={'contained'}\r\n                                                color={'primary'}\r\n                                                onClick={handleFindQuestion}\r\n                                            >\r\n                                                <SearchIcon/>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={3}>\r\n                                    <div className={classes.createThreadButtonContainer}>\r\n                                        <Box p={1} className={classes.createThreadButtonBox}>\r\n                                            <Button\r\n                                                fullWidth\r\n                                                variant={'contained'}\r\n                                                color={'secondary'}\r\n                                                className={classes.createThreadButton}\r\n                                                onClick={handleCreateThread}\r\n                                            >\r\n                                                Create thread\r\n                                            </Button>\r\n                                        </Box>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ThemeProvider>\r\n                        <Grid container>\r\n                            <ThemeProvider theme={LightTheme}>\r\n                                <Grid item xs={12} md={2} className={classes.leftColumn}>\r\n                                    <Box p={1}>\r\n                                        <List>\r\n                                            <ListItem\r\n                                                dense\r\n                                                button\r\n                                                onClick={event => changeRoute('/threads')}\r\n                                            >\r\n                                                <FormatListBulletedIcon fontSize={'small'}/>\r\n                                                <ListItemText\r\n                                                    primary={\"All threads\"}\r\n                                                    className={classes.leftPanelButtonsText}\r\n                                                />\r\n                                            </ListItem>\r\n                                            <ListItem\r\n                                                dense\r\n                                                button\r\n                                                onClick={event => changeRoute('/threads/my')}\r\n                                            >\r\n                                                <RecordVoiceOverIcon fontSize={'small'}/>\r\n                                                <ListItemText\r\n                                                    primary={\"My threads\"}\r\n                                                    className={classes.leftPanelButtonsText}\r\n                                                />\r\n                                            </ListItem>\r\n                                            <ListItem\r\n                                                dense\r\n                                                button\r\n                                                onClick={event => changeRoute('/threads/reviewed')}\r\n                                            >\r\n                                                <RateReviewIcon fontSize={'small'}/>\r\n                                                <ListItemText\r\n                                                    primary={\"Commented by me\"}\r\n                                                    className={classes.leftPanelButtonsText}\r\n                                                />\r\n                                            </ListItem>\r\n                                            <Divider/>\r\n                                            {user &&\r\n                                            <ListItem\r\n                                                dense\r\n                                                button\r\n                                                onClick={event => changeRoute(`/user/${user.id}`)}\r\n                                            >\r\n                                                <AccountCircleIcon fontSize={'small'}/>\r\n                                                <ListItemText\r\n                                                    primary={\"My account\"}\r\n                                                    className={classes.leftPanelButtonsText}\r\n                                                />\r\n                                            </ListItem>\r\n                                            }\r\n                                        </List>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </ThemeProvider>\r\n                            <Grid item xs={12} md={7} className={classes.contentColumn}>\r\n                                <Grid container>\r\n                                    <PagesSwitch\r\n                                        articles={articles}\r\n                                        setArticles={setArticles}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3} className={classes.rightColumn}>\r\n                                <Box p={1}>\r\n                                    <List>\r\n                                        <ListItem>\r\n                                            <ListItemText primary={\"Top 10 threads\"}/>\r\n                                        </ListItem>\r\n                                        <Divider/>\r\n                                        {topArticles.map((item, index) => {\r\n                                            return (\r\n                                                <ThreadsListItem key={`top_artciles_${index}`} thread={item}/>\r\n                                            );\r\n                                        })}\r\n                                    </List>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withWidth()(Layout);","import React from 'react';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport Layout from \"./Pages/Layout\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {BaseTheme} from \"./Themes/DefaultTheme\";\r\nimport {AuthProvider} from \"./Utilities/Auth\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <AuthProvider>\r\n                <ThemeProvider theme={BaseTheme}>\r\n                    <Router>\r\n                        <Layout/>\r\n                    </Router>\r\n                </ThemeProvider>\r\n            </AuthProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}