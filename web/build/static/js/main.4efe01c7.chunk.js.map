{"version":3,"sources":["Pages/Layout/style.js","Themes/DefaultTheme/BaseTheme.js","Themes/DefaultTheme/LightTheme.js","Utilities/Rest.js","Utilities/Auth.js","Pages/ThreadsViewer/style.js","Utilities/getAvatar.js","Pages/ThreadsViewer/index.js","Pages/ThreadDetails/style.js","Utilities/ConfirmDialog.js","Utilities/Components/ParsedMessage.js","Pages/ThreadDetails/Components/Question.js","Pages/ThreadDetails/Components/style.js","Pages/ThreadDetails/Components/AnswerListItem.js","Pages/ThreadDetails/index.js","Pages/ThreadEditor/index.js","Pages/Auth/style.js","Pages/Auth/index.js","Pages/Registration/index.js","Pages/Account/Components/style.js","Pages/Account/Components/ImagePicker/style.js","Pages/Account/Components/ImagePicker/index.js","Pages/Account/Components/Info.js","Pages/Account/Components/Password.js","Pages/Account/Components/DangerZone.js","Pages/Account/index.js","Pages/Layout/Components/ThreadsListItem.js","Pages/Users/index.js","Pages/Layout/Components/PagesSwitch.js","Pages/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","header","colorDefault","palette","primary","dark","root","flexGrow","menuButton","marginRight","spacing","title","leftColumn","backgroundColor","layout","main","color","common","white","borderTop","util","separator","topLine","contentColumn","minHeight","rightColumn","light","leftPanelButtonsText","paddingLeft","searchLineBase","display","width","createThreadButtonContainer","height","alignItems","createThreadButtonBox","avatar","marginLeft","createMuiTheme","overrides","MuiAppBar","colorPrimary","grey","blueGrey","secondary","green","request","endPoint","console","error","rlog","p","s","log","post","route","url","superagent","set","withCredentials","put","delete","get","coreRequest","path","process","AuthContext","React","createContext","user","token","AuthProvider","props","useState","setUser","setToken","Provider","value","isAdmin","is_admin","useAuth","useContext","threadsList","paddingRight","pagination","paginationContainer","justifyContent","ratingBadge","getAvatar","id","a","ThreadListItem","thread","classes","history","useHistory","image","date","Date","authorAvatar","setAuthorAvatar","useEffect","then","response","toString","Typography","ListItemSecondaryAction","Badge","badgeContent","reply_count","showZero","className","views_count","ListItem","button","onClick","event","push","ListItemAvatar","Avatar","src","ListItemText","name","created_at","toLocaleString","Divider","ThreadsViewer","articles","setArticles","sortBy","setSortBy","pages","setPages","page","setPage","location","useLocation","mode","useParams","search","qs","parse","ignoreQueryPrefix","getArticles","query","sort","body","data","catch","meta","last_page","err","updater","setInterval","clearInterval","Grid","item","xs","Box","List","Breadcrumbs","aria-label","ToggleButtonGroup","size","exclusive","onChange","newValue","ToggleButton","map","index","key","Pagination","count","width100","ConfirmDialogContext","ConfirmDialogProvider","children","defaultSettings","text","type","userFunc","settings","open","setSettings","func","handleClose","handleCancel","handleAgree","Fragment","Button","autoFocus","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","useConfirmDialog","ParsedMessage","message","confirm","result","linkIndex","includes","indexOf","head","slice","tailIndex","length","link","linkText","Tooltip","Link","window","href","messageParser","Question","author","onEdited","edit","setEdit","newData","setNewData","changeRoute","handleDataInput","target","handleDelete","status","IconButton","send","replace","variant","TextField","fullWidth","label","required","style","whiteSpace","multiline","rows","listItemTextFix","AnswerListItem","answer","mounted","useRef","current","imageUrl","fontSize","withWidth","setAuthor","setThread","answers","setAnswers","myAnswer","setMyAnswer","getQuestions","replies","undefined","user_id","handleUpdateAnswers","container","isWidthUp","md","TabPanel","other","role","hidden","ThreadEditor","tab","setTab","categories","setCategories","category","setCategory","handleInput","Tabs","Tab","select","option","MenuItem","category_id","username","paper","maxWidth","Auth","authData","setAuthData","onComplete","showPassword","setShowPassword","setError","email","password","remember","setData","Paper","Input","placeholder","autoComplete","persist","last","endAdornment","InputAdornment","position","VisibilityOff","Checkbox","checked","Registration","repeatpassword","errors","setErrors","handleChangeData","FormHelperText","password_confirmation","handleRegisterError","dangerZone","red","borderColor","noPaddingSides","overflow","alignContent","zIndex","input","left","top","marginTop","borderRadius","textAlign","padding","messageUnloaded","img","imgIcon","displayNone","displayBlock","clsx","alt","files","accept","multiple","Info","origUserdata","init","rect","setRect","useCallback","node","getBoundingClientRect","useClientRect","ref","editMode","setEditMode","userdata","setUserdata","setAvatar","handleGetAvatar","picture","attach","updated_at","disabled","interests","ShowPasswordAdornment","handleClick","shown","Password","oldpassword","newpassword","confirmnewpassword","handleShowPassword","FormControl","DangerZone","viewed_user","updateInfo","handleDeleteAccount","handleMakeAdmin","handleMakeNotAdmin","Account","setOrigUserdata","connecting","setConnecting","loading","pause","ThreadsListItem","UserCard","Card","CardActionArea","CardMedia","component","CardContent","gutterBottom","CardActions","Users","users","setUsers","PagesSwitch","setSearch","gotUser","setGotUser","register","login","topArticles","setTopArticles","handleLoadTop10Threads","handleAuthenticated","pathname","AppBar","Toolbar","lg","ThemeProvider","LightTheme","createThreadButton","dense","App","BaseTheme","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4efe01c7.chunk.js","sourcesContent":["import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        colorDefault: theme.palette.primary.dark,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    leftColumn: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n        borderTop: `1px solid ${theme.palette.util.separator}`,\r\n    },\r\n    topLine: {\r\n        backgroundColor: theme.palette.layout.main,\r\n        color: theme.palette.common.white,\r\n    },\r\n    contentColumn: {\r\n        backgroundColor: theme.palette.common.white,\r\n        minHeight: `calc(100vh - 64px)`,\r\n    },\r\n    rightColumn: {\r\n        backgroundColor: theme.palette.layout.light,\r\n    },\r\n    leftPanelButtonsText: {\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    searchLineBase: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    createThreadButtonContainer: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n        alignItems: 'stretch',\r\n    },\r\n    createThreadButtonBox: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, grey} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            colorPrimary: {\r\n                backgroundColor: grey[900],\r\n            },\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[600],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[100],\r\n        },\r\n/*\r\n        secondary: {\r\n            main:\r\n        },\r\n\r\n */\r\n        layout: {\r\n            main: blueGrey[800],\r\n            dark: blueGrey[900],\r\n            light: blueGrey[50],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        }\r\n\r\n    },\r\n});\r\n\r\nexport default theme;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {blueGrey, green} from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: blueGrey[100],\r\n            dark: blueGrey[300],\r\n            light: blueGrey[50],\r\n        },\r\n        secondary: {\r\n            main: green[700],\r\n            dark: green[900],\r\n            light: green[500],\r\n        },\r\n        util: {\r\n            separator: 'rgba(0, 0, 0, 0.12)',\r\n        }\r\n    },\r\n});\r\n\r\nexport default theme;","import superagent from 'superagent';\r\n\r\n\r\nexport const request = (endPoint) => {\r\n    if (!endPoint) {\r\n        console.error(\"request endPoint undefined\");\r\n    }\r\n    const rlog = (p, s) => console.log(`request.${p}:`, s);\r\n    return {\r\n        endPoint: () => endPoint,\r\n        post: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('post', url);\r\n            return superagent.post(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        put: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('put', url);\r\n            return superagent.put(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        delete: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('delete', url);\r\n            return superagent.delete(url).set('accept', 'application/json').withCredentials();\r\n        },\r\n\r\n        get: (route) => {\r\n            const url = `${endPoint}/${route}`;\r\n            rlog('get', url);\r\n            return superagent.get(url).set('accept', 'application/json').withCredentials();\r\n        }\r\n    }\r\n};\r\n\r\nexport const coreRequest = (path = null) => {\r\n    return request(path || process.env.REACT_APP_CORE_URL);\r\n};\r\n","import React from 'react'\r\n\r\n\r\nconst AuthContext = React.createContext({user: null, token: null});\r\n\r\nfunction AuthProvider(props) {\r\n    const [user, setUser] = React.useState(null);\r\n    const [token, setToken] = React.useState(null);\r\n\r\n    const isAdmin = () => {\r\n        return user && !!user.is_admin;\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{user, setUser, token, setToken, isAdmin}} {...props} />\r\n    );\r\n}\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport {AuthProvider, useAuth}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    threadsList: {\r\n        paddingRight: theme.spacing(6),\r\n    },\r\n    pagination: {\r\n        display: 'inline-flex',\r\n    },\r\n    paginationContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    ratingBadge: {\r\n        color: theme.palette.grey[500],\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import {coreRequest} from \"./Rest\";\r\n\r\nexport default async function getAvatar(id) {\r\n    try{\r\n//        return (await coreRequest(process.env.REACT_APP_CORE_AVATARS).get(`${id}`))\r\n        return (await coreRequest(process.env.REACT_APP_CORE_AVATARS).get(`${id}.jpg`))\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}","import React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {useHistory, useLocation, useParams} from 'react-router-dom'\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport qs from 'qs';\r\n\r\n//MUI components\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\n\r\n//MUI icons\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport getAvatar from \"../../Utilities/getAvatar\";\r\n\r\n\r\nfunction ThreadListItem({thread, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [authorAvatar, setAuthorAvatar] = React.useState({image: null, date: new Date()});\r\n\r\n    React.useEffect(() => {\r\n        handleGetAvatar();\r\n    }, []);\r\n\r\n    function handleGetAvatar() {\r\n        getAvatar(thread.user.id).then(response => {\r\n            response && setAuthorAvatar({image: `${process.env.REACT_APP_CORE_AVATARS}/${thread.user.id}.jpg`, date: new Date().toString()});\r\n        });\r\n    }\r\n\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    const primary = (\r\n        <Typography>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <ListItemSecondaryAction>\r\n            <Badge badgeContent={thread.reply_count} showZero color=\"primary\">\r\n                <QuestionAnswerIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n            <Badge badgeContent={thread.views_count} showZero color=\"primary\">\r\n                <VisibilityIcon className={classes.ratingBadge}/>\r\n            </Badge>\r\n        </ListItemSecondaryAction>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <ListItem button onClick={event => changeRoute(`/thread/${thread.id}`)}>\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={authorAvatar.image}\r\n                    >\r\n                        <ImageIcon/>\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={primary}\r\n                              secondary={`${thread.user.name} | ${new Date(thread.created_at).toLocaleString()}`}\r\n                              className={classes.threadsList}/>\r\n                {secondary}\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function ThreadsViewer({articles, setArticles, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [sortBy, setSortBy] = React.useState('created_at');\r\n    const [pages, setPages] = React.useState(1);\r\n    const [page, setPage] = React.useState(1);\r\n    const location = useLocation();\r\n    const {mode} = useParams();\r\n    const {search} = qs.parse(location.search, {ignoreQueryPrefix: true});\r\n    const {user} = useAuth();\r\n\r\n    function getArticles(page) {\r\n        if (!search) {\r\n            coreRequest().get(`questions${(mode && user) ? `/${mode}` : ''}`)\r\n                .query({page: page, sort: sortBy})\r\n                .then(response => {\r\n                    setArticles(response.body.data);\r\n                    setPages(response.body.meta.last_page);\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                });\r\n        } else {\r\n            coreRequest().get('questions')\r\n                .query({search, page, sort: sortBy})\r\n                .then(response => {\r\n                    setArticles(response.body.data);\r\n                }).catch(error => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getArticles(1);\r\n        const updater = setInterval(() => {\r\n            if (!search) {\r\n                console.log(`Sync [threads]: synchronizing (${new Date().toLocaleString()})`)\r\n                getArticles();\r\n            } else {\r\n                console.log(`Sync [threads]: skipping synchronization (${new Date().toLocaleString()})`)\r\n            }\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater);\r\n        }\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        getArticles(1);\r\n    }, [search, mode, sortBy]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleToggleSort(event, newValue) {\r\n        setSortBy(newValue);\r\n    }\r\n\r\n    function handleChangePage(event, page) {\r\n        setPage(page);\r\n        getArticles(page);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            <Typography color=\"textPrimary\">Threads</Typography>\r\n                        </Breadcrumbs>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ToggleButtonGroup\r\n                            value={sortBy}\r\n                            size=\"small\"\r\n                            exclusive\r\n                            onChange={handleToggleSort}\r\n                        >\r\n                            <ToggleButton value=\"created_at\">\r\n                                Newest\r\n                            </ToggleButton>\r\n                            <ToggleButton value=\"reply_count\">\r\n                                Most commented\r\n                            </ToggleButton>\r\n                            <ToggleButton value=\"views_count\">\r\n                                Most viewed\r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </ListItem>\r\n                    {articles.map((item, index) => {\r\n                        return (\r\n                            <ThreadListItem thread={item} key={`artciles_${index}`}>\r\n                            </ThreadListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n                <div className={classes.paginationContainer}>\r\n                    <Pagination count={pages} page={page} onChange={handleChangePage} className={classes.pagination}/>\r\n                </div>\r\n            </Box>\r\n        </Grid>\r\n\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React from 'react'\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst ConfirmDialogContext = React.createContext({user: null, token: null});\r\n\r\nfunction ConfirmDialogProvider({children, ...props}) {\r\n    const defaultSettings = {\r\n        title: 'Are you sure?',\r\n        text: '',\r\n        size: 'middle',\r\n        type: 'yesno',\r\n        userFunc: () => {\r\n        }\r\n    };\r\n\r\n    const [settings, setSettings] = React.useState({\r\n        settings: defaultSettings,\r\n        open: false,\r\n    });\r\n\r\n    async function confirm(func = () => {}, {title = 'Are you sure?', text = '', size = 'middle', type = 'yesno'}) {\r\n        setSettings({\r\n            settings: {text, size, type, title, userFunc: func},\r\n            open: true,\r\n        });\r\n    }\r\n\r\n    function handleClose() {\r\n        setSettings({\r\n            settings: defaultSettings,\r\n            open: false,\r\n        });\r\n    }\r\n\r\n    function handleCancel() {\r\n        handleClose();\r\n    }\r\n\r\n    function handleAgree() {\r\n        handleClose();\r\n        settings.settings.userFunc();\r\n    }\r\n\r\n    let buttons = (\r\n        <React.Fragment>\r\n            <Button onClick={handleAgree} color=\"primary\">\r\n                Yes\r\n            </Button>\r\n            <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                No\r\n            </Button>\r\n        </React.Fragment>\r\n    );\r\n\r\n    switch (settings.settings.type) {\r\n        case 'continue':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Continue\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case 'accept':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Accept\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case 'confirmdecline':\r\n            buttons = (\r\n                <React.Fragment>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                    <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                        Decline\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n    }\r\n\r\n\r\n    return (\r\n        <ConfirmDialogContext.Provider value={confirm} {...props} >\r\n            <Dialog\r\n                open={settings.open}\r\n                onClose={handleCancel}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{settings.settings.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {settings.settings.text}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAgree} color=\"primary\">\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={handleCancel} color=\"primary\" autoFocus>\r\n                        No\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {children}\r\n        </ConfirmDialogContext.Provider>\r\n    );\r\n}\r\n\r\nconst useConfirmDialog = () => React.useContext(ConfirmDialogContext);\r\n\r\nexport {ConfirmDialogProvider, useConfirmDialog}","import Link from \"@material-ui/core/Link\";\r\nimport React from \"react\";\r\nimport {useConfirmDialog} from \"./../ConfirmDialog\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nexport function messageParser(message, confirm) {\r\n    const result = [];\r\n    while (message.includes('http://') || message.includes('https://')) {\r\n        const linkIndex = message.includes('http://') ? message.indexOf('http://') : message.indexOf('https://');\r\n        const head = message.slice(0, linkIndex);\r\n        let tailIndex = message.indexOf(' ', linkIndex);\r\n        if (tailIndex === -1) tailIndex = message.length - 1;\r\n        const link = message.slice(linkIndex, tailIndex);\r\n        let linkText = link.slice(0, 40);\r\n        if (link.length > 40) {\r\n            linkText += '...';\r\n        }\r\n        message = message.slice(tailIndex, message.length - 1);\r\n        head && result.push(head);\r\n        link && result.push(\r\n            <Tooltip title={link} aria-label=\"link\" key={`link-${link}`}>\r\n                <Link\r\n                    onClick={\r\n                        event => confirm(\r\n                            () => {\r\n                                window.location.href = link\r\n                            },\r\n                            {\r\n                                text: `Link ${linkText} is custom user link and does not belong to our application. You follow this link to your own risk and peril.`,\r\n                                title: `Confirm redirect by user hyperlink`,\r\n                                type: 'continue',\r\n                            })\r\n                    }\r\n                >\r\n                    {linkText}\r\n                </Link>\r\n            </Tooltip>\r\n        );\r\n    }\r\n    message && result.push(message);\r\n    return result;\r\n}\r\n\r\n\r\nexport default function ParsedMessage({message = ''}) {\r\n    const confirm = useConfirmDialog();\r\n    return (\r\n        <React.Fragment>\r\n            {messageParser(message, confirm)}\r\n        </React.Fragment>\r\n    );\r\n}","import React from \"react\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useConfirmDialog} from '../../../Utilities/ConfirmDialog'\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n\r\n//Custom components\r\nimport ParsedMessage from \"../../../Utilities/Components/ParsedMessage\";\r\n\r\nexport default function Question({\r\n                                     author, thread, onEdited = () => {\r\n    }, ...props\r\n                                 }) {\r\n    const history = useHistory();\r\n    const {user, isAdmin} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState({title: thread.title, body: thread.body});\r\n    const loading = false;\r\n    const confirm = useConfirmDialog();\r\n\r\n    React.useEffect(() => {\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }, [thread]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setNewData({...newData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`questions/${thread.id}`)\r\n            .send({...newData, body: newData.body.replace(/(\\n\\n\\n)+/g, '\\n'), title: newData.title.replace(/\\n/g, '')})\r\n            .then(response => {\r\n                console.log(response);\r\n                setEdit(false);\r\n                onEdited(newData);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryToDelete() {\r\n        confirm(handleDelete, {\r\n            title: `Are you sure you want delete thread: ${thread.title}`,\r\n            text: 'This operation cannot be undone'\r\n        });\r\n    }\r\n\r\n    function handleDelete() {\r\n        coreRequest().delete(`questions/${thread.id}`)\r\n            .then(response => {\r\n                changeRoute('/threads');\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData({title: thread.title, body: thread.body});\r\n    }\r\n\r\n    if (loading) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem id={'author'}>\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={author.name}\r\n                              secondary={`posted ${thread.created_at && new Date(thread.created_at).toLocaleString() || 'just now'}`}/>\r\n                {(user && user.id === author.id || isAdmin()) &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleTryToDelete}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <ListItem id={'question'}>\r\n                {!edit &&\r\n                <Typography variant={'h5'}>\r\n                    {thread.title}\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    fullWidth\r\n                    label={'Summary'}\r\n                    required\r\n                    value={newData.title}\r\n                    name={'title'}\r\n                    variant={'outlined'}\r\n                    onChange={handleDataInput}\r\n                />\r\n                }\r\n            </ListItem>\r\n            <ListItem>\r\n                {!edit &&\r\n                <Typography variant={'body1'}>\r\n                    {thread.body && <ParsedMessage message={thread.body} style={{whiteSpace: 'pre-wrap'}}/>}\r\n                </Typography>\r\n                }\r\n                {edit &&\r\n                <TextField\r\n                    fullWidth\r\n                    label={'Description'}\r\n                    required\r\n                    value={newData.body}\r\n                    name={'body'}\r\n                    variant={'outlined'}\r\n                    size={\"small\"}\r\n                    onChange={handleDataInput}\r\n                    multiline\r\n                    rows={6}\r\n                />\r\n                }\r\n            </ListItem>\r\n        </>\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItemTextFix: {\r\n        paddingRight: theme.spacing(6),\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport useStyles from \"./style\";\r\nimport {useConfirmDialog} from \"../../../Utilities/ConfirmDialog\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//MUI icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n//Custom components\r\nimport ParsedMessage from \"../../../Utilities/Components/ParsedMessage\";\r\nimport getAvatar from \"../../../Utilities/getAvatar\";\r\n\r\n\r\nexport default function AnswerListItem({answer, onEdited = () => {}, ...props}) {\r\n    const {user, isAdmin} = useAuth();\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [newData, setNewData] = React.useState(answer.text);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const confirm = useConfirmDialog();\r\n    const [authorAvatar, setAuthorAvatar] = React.useState({image: null, date: new Date()});\r\n    const {id} = useParams();\r\n    const mounted = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n        mounted.current = true;\r\n        return () => mounted.current = false;\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        handleGetAvatar();\r\n    }, [answer.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        setNewData(answer.text);\r\n    }, [answer]);\r\n\r\n    function handleGetAvatar() {\r\n        getAvatar(answer.user.id).then(response => {\r\n            const imageUrl = `${process.env.REACT_APP_CORE_AVATARS}/${answer.user.id}.jpg`;\r\n            response && mounted.current && setAuthorAvatar({image: imageUrl, date: new Date().toString()});\r\n        });\r\n    }\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setNewData(event.target.value);\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`replies/${answer.id}`)\r\n            .send({text: newData})\r\n            .then(response => {\r\n                setEdit(false);\r\n                onEdited(newData);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleDelete() {\r\n        coreRequest().delete(`replies/${answer.id}`)\r\n            .then(response => {\r\n                onEdited();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleCancelEdit(event) {\r\n        setEdit(false);\r\n        setNewData(answer.text);\r\n    }\r\n\r\n    const primary = (\r\n        <React.Fragment>\r\n            <Typography variant={'h6'}>\r\n                {answer.user.name}\r\n            </Typography>\r\n            {!edit && answer.text && <ParsedMessage message={answer.text} style={{whiteSpace: 'pre-wrap'}}/>}\r\n            {edit &&\r\n            <TextField\r\n                fullWidth\r\n                label={'Answer'}\r\n                variant={'outlined'}\r\n                size={\"small\"}\r\n                multiline\r\n                rows={4}\r\n                onChange={handleDataInput}\r\n                value={newData}\r\n                required\r\n            />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        src={authorAvatar.image}\r\n                    >\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={primary}\r\n                    secondary={`posted ${new Date(answer.created_at).toLocaleString()}`}\r\n                    className={classes.listItemTextFix}\r\n                />\r\n                {(user && user.id === answer.user.id || isAdmin()) &&\r\n                <ListItemSecondaryAction>\r\n                    {!edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={event => setEdit(true)}>\r\n                            <EditIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleDelete}>\r\n                            <DeleteIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                    {edit &&\r\n                    <React.Fragment>\r\n                        <IconButton onClick={handleEditSubmit}>\r\n                            <DoneIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handleCancelEdit}>\r\n                            <CloseIcon fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                    }\r\n                </ListItemSecondaryAction>\r\n                }\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport {withWidth, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport useStyles from \"./style\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as _ from 'lodash'\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\n//Custom components\r\nimport Question from './Components/Question'\r\nimport AnswerListItem from \"./Components/AnswerListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nfunction ThreadDetails({width, ...props}) {\r\n    const [author, setAuthor] = React.useState({});\r\n    const [thread, setThread] = React.useState({});\r\n    const [answers, setAnswers] = React.useState([]);\r\n    const [myAnswer, setMyAnswer] = React.useState('');\r\n    const {id} = useParams();\r\n    const {user} = useAuth();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const updater = React.useRef();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function getQuestions() {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setAuthor({...response.body.data.user});\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n                setAnswers([...response.body.data.replies]);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        clearInterval(updater.current);\r\n        getQuestions();\r\n        updater.current = setInterval(() => {\r\n            console.log(`Sync [thread]: synchronizing (${new Date().toLocaleString()})`);\r\n            getQuestions();\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater.current);\r\n        }\r\n    }, [id]);\r\n\r\n    function handleUpdateAnswers() {\r\n        coreRequest().get(`questions/${id}/replies`)\r\n            .then(response => {\r\n                setAnswers(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleUpdateThread() {\r\n        coreRequest().get(`questions/${id}`)\r\n            .then(response => {\r\n                setThread({...response.body.data, replies: undefined, user: undefined, user_id: undefined});\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function handleInputAnswer(event) {\r\n        setMyAnswer(event.target.value);\r\n    }\r\n\r\n    function handleAnswer() {\r\n        coreRequest().post(`questions/${id}/replies`)\r\n            .send({text: myAnswer})\r\n            .then(response => {\r\n                handleUpdateAnswers();\r\n                setMyAnswer('');\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            <Link color=\"inherit\" onClick={() => changeRoute('/threads')}>\r\n                                Threads\r\n                            </Link>\r\n                            <Typography color=\"textPrimary\">{thread.title}</Typography>\r\n                        </Breadcrumbs>\r\n                    </ListItem>\r\n                    <Question author={author} thread={thread} onEdited={handleUpdateThread}/>\r\n                    <Divider/>\r\n                    <ListItem id={'answers'}>\r\n                        <List className={classes.width100}>\r\n                            {answers.map((item, index) => {\r\n                                return (\r\n                                    <AnswerListItem key={`answer_${index}_${thread.id}_${author.id}`} answer={item} onEdited={handleUpdateAnswers}/>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </ListItem>\r\n                    {user &&\r\n                    <ListItem id={'compose'}>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    value={myAnswer}\r\n                                    multiline\r\n                                    rows={8}\r\n                                    variant={'outlined'}\r\n                                    label={'Answer'}\r\n                                    fullWidth\r\n                                    onChange={handleInputAnswer}\r\n                                />\r\n                            </Grid>\r\n                            {isWidthUp('sm', width) && <Grid item md={10}/>}\r\n                            <Grid item xs={12} md={2}>\r\n                                <Button fullWidth onClick={handleAnswer}>\r\n                                    Send\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    }\r\n                    {!user &&\r\n                    <ListItem>\r\n                        <ListItemText\r\n                            secondary={\r\n                                <React.Fragment>\r\n                                    <Link onClick={event => changeRoute('?login=true')}>\r\n                                        Login\r\n                                    </Link>\r\n                                    &nbsp;or&nbsp;\r\n                                    <Link onClick={event => changeRoute('?register=true')}>\r\n                                        sign up\r\n                                    </Link>\r\n                                    &nbsp;to leave answers\r\n                                </React.Fragment>\r\n                            }\r\n                        />\r\n                    </ListItem>\r\n                    }\r\n                </List>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ThreadDetails);","import React from 'react'\r\nimport {coreRequest} from '../../Utilities/Rest'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Question from './../ThreadDetails/Components/Question'\r\nimport {useHistory} from 'react-router-dom';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n\r\nfunction TabPanel({children, value, index, ...other}) {\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`thread-editor-tabpanel--${index}`}\r\n            aria-labelledby={`thread-editor-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                children\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ThreadEditor({...props}) {\r\n    const [tab, setTab] = React.useState(0);\r\n    const [thread, setThread] = React.useState({title: null, body: null});\r\n    const [categories, setCategories] = React.useState([]);\r\n    const [category, setCategory] = React.useState(null);\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        coreRequest().get('categories')\r\n            .then(response => {\r\n                setCategories(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    function handleSubmit() {\r\n        try {\r\n            coreRequest().post('questions')\r\n                .send({...thread, category_id: category, body: thread.body.replace(/(\\n\\n\\n)+/g, '\\n'), title: thread.title.replace(/\\n/g, '')})\r\n                .then(response => {\r\n                    changeRoute(`/thread/${response.body.data.id}`);\r\n                })\r\n                .catch(error => {\r\n                    switch (error.status) {\r\n                        case 401:\r\n                            changeRoute('?login=true');\r\n                            break;\r\n                    }\r\n                });\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    function handleChangeTab(event, newValue) {\r\n        setTab(newValue);\r\n    }\r\n\r\n    function handleInput(event) {\r\n        setThread({...thread, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    function handleCategorySelect(event) {\r\n        setCategory(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Tabs\r\n                value={tab}\r\n                onChange={handleChangeTab}\r\n                aria-label=\"simple tabs example\"\r\n                variant={'fullWidth'}\r\n            >\r\n                <Tab label=\"Edit\"/>\r\n                <Tab label=\"Preview\"/>\r\n            </Tabs>\r\n            <TabPanel value={tab} index={0}>\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography variant={'h6'}>\r\n                            Create new thread\r\n                        </Typography>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            label={'Sumarry'}\r\n                            value={thread.title || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            name={'title'}\r\n                            onChange={handleInput}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            label={'Description'}\r\n                            value={thread.body || ''}\r\n                            required\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            multiline\r\n                            rows={10}\r\n                            name={'body'}\r\n                            onChange={event => handleInput(event, 'body')}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <TextField\r\n                            select\r\n                            name={'category_id'}\r\n                            label={'Category'}\r\n                            value={category || ''}\r\n                            onChange={handleCategorySelect}\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                        >\r\n                            {categories.map(option => (\r\n                                <MenuItem key={option.id} value={option.id}>\r\n                                    {option.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </ListItem>\r\n                </List>\r\n            </TabPanel>\r\n            <TabPanel value={tab} index={1}>\r\n                <Question\r\n                    author={{username: 'Andreev Danil'}}\r\n                    thread={{\r\n                        title: thread.title || 'Fill the summary input line',\r\n                        body: thread.body || 'Fill the description input line',\r\n                    }}\r\n                />\r\n            </TabPanel>\r\n        </Grid>\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        maxWidth: '300px',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\nexport default function Auth({\r\n                                 authData,\r\n                                 setAuthData,\r\n                                 onComplete = () => {\r\n                                 },\r\n                                 ...props\r\n                             }) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [error, setError] = React.useState(null);\r\n    const [data, setData] = React.useState({email: null, password: null, remember: false});\r\n    const {setUser} = useAuth();\r\n    const classes = useStyles();\r\n\r\n    if (!authData) {\r\n        authData = data;\r\n        setAuthData = setData;\r\n    }\r\n\r\n    function handleLogin() {\r\n        if (!authData.email || !authData.password) {\r\n            setError('Credential cannot be empty');\r\n            return;\r\n        }\r\n\r\n        coreRequest().post('auth/login')\r\n            .send(authData)\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                onComplete(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                try {\r\n                    switch (error.status) {\r\n                        case 403:\r\n                            setError('aAlready authenticated');\r\n                            break;\r\n                        case 422:\r\n                            setError('Incorrect email or password');\r\n                            break;\r\n                        default:\r\n                            setError('Unexpected error, see console for more information');\r\n                            console.error(error);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, password: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeEmail(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, email: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRememberMe(event) {\r\n        event.persist();\r\n        setAuthData(last => ({...last, remember: event.target.checked || false}));\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <List>\r\n                {error && <ListItem>\r\n                    <Typography color={'error'} variant={'body2'}>\r\n                        {error}\r\n                    </Typography>\r\n                </ListItem>}\r\n                <ListItem>\r\n                    <Input\r\n                        placeholder={'Email'}\r\n                        fullWidth\r\n                        required\r\n                        autoComplete={'email'}\r\n                        onChange={handleChangeEmail}\r\n                        value={authData.email || ''}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Input\r\n                        id=\"standard-adornment-password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={authData.password || ''}\r\n                        placeholder={'Password'}\r\n                        onChange={handleChangePassword}\r\n                        autoComplete={'password'}\r\n                        fullWidth\r\n                        required\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleChangeShowPassword}\r\n                                >\r\n                                    {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={'Remember me'}/>\r\n                    <ListItemSecondaryAction>\r\n                        <Checkbox checked={authData.remember} onChange={handleRememberMe}/>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button fullWidth onClick={handleLogin}>\r\n                        Sign in\r\n                    </Button>\r\n                </ListItem>\r\n            </List>\r\n        </Paper>\r\n    );\r\n}","import React from 'react';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nexport default function Registration({authData, setAuthData, onComplete, ...props}) {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [data, setData] = React.useState({username: null, password: null, email: null});\r\n    const {setUser} = useAuth();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = React.useState({username: null, email: null, password: null, repeatpassword: null});\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleChangePassword(event) {\r\n        event.persist();\r\n        setData(last => ({...last, password: event.target.value || null}));\r\n    }\r\n\r\n    function handleChangeData(event) {\r\n        event.persist();\r\n        setData(last => ({...last, [event.target.name]: event.target.value || null}))\r\n    }\r\n\r\n    function handleChangeShowPassword(event) {\r\n        setShowPassword(item => !item);\r\n    }\r\n\r\n    function handleRegisterError(error) {\r\n        setErrors({username: null, email: null, password: null, repeatpassword: null});\r\n        switch (error.status) {\r\n            case 422:\r\n                const errors = error.response.body.errors;\r\n                for (const key in errors) {\r\n                    let message = 'Unresolved error';\r\n                    const error = errors[key][0];\r\n                    if (error) {\r\n                        switch (error) {\r\n                            case 'validation.email':\r\n                                message = 'Incorrect email';\r\n                                break;\r\n                            case 'validation.min.string':\r\n                                message = 'Password is too short';\r\n                                break;\r\n                            case 'validation.unique':\r\n                                message = 'Username is already taken';\r\n                                break;\r\n                        }\r\n                        setErrors(last => ({...last, [key]: message}));\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    function handleRegister() {\r\n        coreRequest().post('auth/register')\r\n            .send({...data, password_confirmation: data.password, name: data.username, username: undefined})\r\n            .then(response => {\r\n                setUser(response.body.data);\r\n                changeRoute(`/user/${response.body.data.id}`);\r\n                onComplete();\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                handleRegisterError(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Username'}\r\n                            fullWidth\r\n                            required\r\n                            name={'username'}\r\n                            onChange={handleChangeData}\r\n                            value={data.username || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.username && <FormHelperText error> {errors.username} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            placeholder={'Email'}\r\n                            fullWidth\r\n                            required\r\n                            name={'email'}\r\n                            onChange={handleChangeData}\r\n                            value={data.email || ''}\r\n                        />\r\n                    }\r\n                    secondary={errors.email && <FormHelperText error> {errors.email} </FormHelperText>}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemText\r\n                    primary={\r\n                        <Input\r\n                            id=\"standard-adornment-password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={data.password || ''}\r\n                            placeholder={'Password'}\r\n                            onChange={handleChangePassword}\r\n                            required\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleChangeShowPassword}\r\n                                    >\r\n                                        {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    }\r\n                    secondary={errors.password && <FormHelperText error> {errors.password} </FormHelperText>}\r\n                />\r\n\r\n            </ListItem>\r\n            <ListItem>\r\n                <Button fullWidth onClick={handleRegister}>\r\n                    Sign up\r\n                </Button>\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}","import {makeStyles} from '@material-ui/core/styles';\r\nimport {red} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItemTextFix: {\r\n        paddingRight: theme.spacing(5),\r\n    },\r\n    dangerZone: {\r\n        backgroundColor: red[700],\r\n        color: theme.palette.common.white,\r\n        borderColor: theme.palette.common.white,\r\n    },\r\n    noPaddingSides: {\r\n        paddingLeft: theme.spacing(0),\r\n        paddingRight: theme.spacing(0),\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        '&:hover div': {\r\n            display: 'block',\r\n            backgroundColor: 'rgba(0.5,0.5,0.5,0.4)',\r\n            zIndex: '1000',\r\n        },\r\n    },\r\n    input: {\r\n        zIndex: '1001',\r\n        left: '0',\r\n        top: '-100px',\r\n        width: '100%',\r\n        height: 'calc(100% + 100px)',\r\n        position: 'absolute',\r\n        color: 'transparent',\r\n        backgroundColor: 'transparent',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0.2,0.2,0.2,0.2)',\r\n        },\r\n        '&:active': {\r\n            backgroundColor: 'rgba(0.2,0.2,0.2,0.3)',\r\n        },\r\n    },\r\n    message: {\r\n        marginTop: 'calc(50% - 26px)',\r\n        borderRadius: '5px',\r\n        textAlign: 'center',\r\n        height: '20px',\r\n        width: '60%',\r\n        padding: theme.spacing(2),\r\n    },\r\n    messageUnloaded: {\r\n        display: 'block',\r\n        backgroundColor: 'rgba(0.5,0.5,0.5,0.4)',\r\n        zIndex: '1000',\r\n    },\r\n    img: {\r\n        color: 'white',\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n    },\r\n    imgIcon: {\r\n        color: 'white',\r\n        width: '80%',\r\n        height: '80%',\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n        padding: '10%',\r\n    },\r\n    displayNone: {\r\n        display: 'none',\r\n    },\r\n    displayBlock: {\r\n        display: 'block',\r\n    },\r\n\r\n}));\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport withWidth, {isWidthUp} from \"@material-ui/core/withWidth\";\r\n\r\n\r\nfunction ImagePicker({\r\n                         onChange = () => {\r\n                         },\r\n                         src,\r\n                         width,\r\n                         date,\r\n                         children,\r\n                         ...props\r\n                     }) {\r\n    const classes = useStyles();\r\n\r\n\r\n    console.log(date);\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n                <img src={src} className={clsx(classes.img, !src && classes.displayNone)} alt={date}/>\r\n                <ImageIcon className={clsx(classes.imgIcon, src && classes.displayNone)}/>\r\n                <input\r\n                    type={'file'}\r\n                    className={clsx(classes.input)}\r\n                    onChange={event => onChange(event.target.files)}\r\n                    accept={'.png'}\r\n                    multiple={false}\r\n                />\r\n                {children &&\r\n                <div\r\n                    className={clsx(classes.message, isWidthUp('md', width) && classes.displayNone, !src && classes.messageUnloaded)}\r\n                >\r\n                    {children}\r\n                </div>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ImagePicker);","import React from \"react\";\r\nimport {useParams, useHistory} from 'react-router-dom'\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport useStyles from \"./style\";\r\nimport clsx from \"clsx\";\r\nimport ImagePicker from './ImagePicker'\r\nimport imageResize from 'resize-image'\r\n\r\n//MUI components\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n//MUI icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport getAvatar from \"../../../Utilities/getAvatar\";\r\n\r\n\r\nfunction useClientRect() {\r\n    const [rect, setRect] = React.useState(null);\r\n    const ref = React.useCallback(node => {\r\n        if (node !== null) {\r\n            setRect(node.getBoundingClientRect());\r\n        }\r\n    }, []);\r\n    return [rect, ref];\r\n}\r\n\r\nexport default function Info({origUserdata, init, ...props}) {\r\n    const [rect, ref] = useClientRect();\r\n    const [editMode, setEditMode] = React.useState(false);\r\n    const {id} = useParams();\r\n    const [userdata, setUserdata] = React.useState({...origUserdata, id: undefined});\r\n    const {user, setUser, isAdmin} = useAuth();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [avatar, setAvatar] = React.useState({image: null, date: new Date().toString()});\r\n    let loading = false;\r\n\r\n    React.useEffect(() => {\r\n        setUserdata({...origUserdata, id: undefined});\r\n    }, [origUserdata]);\r\n\r\n    React.useEffect(() => {\r\n        handleGetAvatar();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        handleGetAvatar();\r\n    }, [id]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleEditSubmit() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send(userdata)\r\n            .then(response => {\r\n                if (user.id === +id) {\r\n                    setUser(response.body.data);\r\n                }\r\n                setEditMode(false);\r\n                init();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleEdit() {\r\n        setEditMode(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setUserdata(origUserdata);\r\n        setEditMode(false);\r\n    }\r\n\r\n    function handleDataInput(event) {\r\n        setUserdata({...userdata, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    if (loading) {\r\n        return null;\r\n    }\r\n\r\n    function handleGetAvatar() {\r\n        getAvatar(origUserdata.id).then(response => {\r\n            response && setAvatar({image: `${process.env.REACT_APP_CORE_AVATARS}/${origUserdata.id}.jpg`, date: new Date().toString()});\r\n        });\r\n    }\r\n\r\n    function handleChangeAvatar(picture) {\r\n        coreRequest().post(`users/${origUserdata.id}/avatar`)\r\n            .attach('avatar', picture[0])\r\n            .then(response => {\r\n                handleGetAvatar();\r\n            })\r\n            .catch(console.error);\r\n    }\r\n\r\n    return (\r\n        <ListItem>\r\n            <Grid container>\r\n                <Grid item xs={12} md={6}>\r\n                    <Box p={1}>\r\n                        <Avatar\r\n                            ref={ref}\r\n                            style={{width: '100%', height: rect && rect.width}}\r\n                        >\r\n                            <ImagePicker\r\n                                onChange={handleChangeAvatar}\r\n                                src={avatar.image}\r\n                                date={avatar.date}\r\n                            >\r\n                                Upload avatar\r\n                            </ImagePicker>\r\n                        </Avatar>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={`${origUserdata.is_admin ? 'Admin |' : ''} User info`}\r\n                                secondary={`Last updated ${new Date(userdata.updated_at).toLocaleString() || 'recently'}`}\r\n                                className={clsx(editMode && classes.listItemTextFix)}\r\n                            />\r\n                            {(user && user.id === +id || isAdmin()) &&\r\n                            <ListItemSecondaryAction>\r\n                                {!editMode &&\r\n                                <IconButton onClick={handleEdit}>\r\n                                    <EditIcon fontSize={'small'}/>\r\n                                </IconButton>\r\n                                }\r\n                                {editMode &&\r\n                                <React.Fragment>\r\n                                    <IconButton onClick={handleEditSubmit}>\r\n                                        <DoneIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                    <IconButton onClick={handleCancel}>\r\n                                        <CloseIcon fontSize={'small'}/>\r\n                                    </IconButton>\r\n                                </React.Fragment>\r\n                                }\r\n                            </ListItemSecondaryAction>\r\n                            }\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                fullWidth\r\n                                name={'name'}\r\n                                label={'Name'}\r\n                                value={userdata.name}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                name={'email'}\r\n                                fullWidth\r\n                                label={'Email'}\r\n                                value={userdata.email}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <TextField\r\n                                disabled={!editMode}\r\n                                name={'interests'}\r\n                                fullWidth\r\n                                label={'Interests'}\r\n                                value={userdata.interests}\r\n                                onChange={handleDataInput}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n            </Grid>\r\n        </ListItem>\r\n    );\r\n}","import ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport React from \"react\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\n\r\nfunction ShowPasswordAdornment({handleClick, shown, name}) {\r\n    return (\r\n        <InputAdornment position=\"end\">\r\n            <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={event => handleClick(event, name)}\r\n            >\r\n                {shown ? <Visibility/> : <VisibilityOff/>}\r\n            </IconButton>\r\n        </InputAdornment>\r\n    );\r\n}\r\n\r\nexport default function Password() {\r\n    const [showPassword, setShowPassword] = React.useState({\r\n        oldpassword: false,\r\n        newpassword: false,\r\n        confirmnewpassword: false,\r\n    });\r\n\r\n    function handleShowPassword(event, name) {\r\n        setShowPassword({...showPassword, [name]: !showPassword[name]})\r\n    }\r\n\r\n    return (\r\n        <ListItem>\r\n            <FormControl fullWidth>\r\n                <FormHelperText>\r\n                    Change password\r\n                </FormHelperText>\r\n                <Grid container>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                type={showPassword.oldpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Old password'}\r\n                                autoComplete={'password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.oldpassword}\r\n                                        name={'oldpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={1}>\r\n                            <Input\r\n                                required\r\n                                type={showPassword.newpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'New password'}\r\n                                autoComplete={'new-password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.newpassword}\r\n                                        name={'newpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <Input\r\n                                required\r\n                                type={showPassword.confirmnewpassword ? 'text' : 'password'}\r\n                                fullWidth\r\n                                placeholder={'Confirm new password'}\r\n                                autoComplete={'confirm-new-password'}\r\n                                endAdornment={\r\n                                    <ShowPasswordAdornment\r\n                                        handleClick={handleShowPassword}\r\n                                        shown={showPassword.confirmnewpassword}\r\n                                        name={'confirmnewpassword'}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                        >\r\n                            Change password\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n        </ListItem>\r\n    );\r\n}","import ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {coreRequest} from \"../../../Utilities/Rest\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {useConfirmDialog} from \"../../../Utilities/ConfirmDialog\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nexport default function DangerZone({viewed_user, updateInfo, ...props}) {\r\n    const classes = useStyles();\r\n    const {user, setUser, setToken, isAdmin} = useAuth();\r\n    const {id} = useParams();\r\n    const history = useHistory();\r\n    const confirm = useConfirmDialog();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    function handleDeleteAccount() {\r\n        if (user) {\r\n            coreRequest().delete(`users/${id}`)\r\n                .then(response => {\r\n                    if (user.id == id) {\r\n                        setUser(null);\r\n                        setToken(null);\r\n                        changeRoute('/threads');\r\n                    } else {\r\n                        changeRoute('/users');\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    switch (error.status) {\r\n                        case 401:\r\n                            changeRoute('?login=true');\r\n                            break;\r\n                        default:\r\n                            console.error(error);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    function handleTryToDeleteAccount() {\r\n        confirm(handleDeleteAccount, {\r\n            title: ` Are you sure you want delete account: ${viewed_user.name}`,\r\n            text: `This operation cannot be undone`,\r\n        })\r\n    }\r\n\r\n    function handleMakeAdmin() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send({is_admin: true})\r\n            .then(response => {\r\n                updateInfo();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryMakeAdmin() {\r\n        confirm(handleMakeAdmin, {\r\n            title: `Make ${viewed_user.name} | ${viewed_user.email} admin?`,\r\n            text: `This is a dangerous operation, admin can delete and edit threads, answers, and profiles. Also admin can make another users admin or remove admin`,\r\n        });\r\n    }\r\n\r\n    function handleMakeNotAdmin() {\r\n        coreRequest().put(`users/${id}`)\r\n            .send({is_admin: false})\r\n            .then(response => {\r\n                updateInfo();\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleTryMakeNotAdmin() {\r\n        confirm(handleMakeNotAdmin, {\r\n            title: `Remove admin on ${viewed_user.name} | ${viewed_user.email}?`,\r\n            text: `After removing admin user can not modify and delete threads, answers, users and manage admins`,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ListItem className={classes.dangerZone}>\r\n            <FormControl fullWidth>\r\n                <FormHelperText className={classes.dangerZone}>\r\n                    Danger zone\r\n                </FormHelperText>\r\n                <List>\r\n                    <ListItem className={classes.noPaddingSides}>\r\n                        <Button\r\n                            fullWidth\r\n                            variant={'outlined'}\r\n                            className={classes.dangerZone}\r\n                            onClick={handleTryToDeleteAccount}\r\n                        >\r\n                            Delete account\r\n                        </Button>\r\n                    </ListItem>\r\n                    {viewed_user.id !== user.id && isAdmin() &&\r\n                        <React.Fragment>\r\n                            {!viewed_user.is_admin &&\r\n                            <ListItem className={classes.noPaddingSides}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant={'outlined'}\r\n                                    className={classes.dangerZone}\r\n                                    onClick={handleTryMakeAdmin}\r\n                                >\r\n                                    Make admin\r\n                                </Button>\r\n                            </ListItem>\r\n                            }\r\n                            {viewed_user.is_admin &&\r\n                            <ListItem className={classes.noPaddingSides}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant={'outlined'}\r\n                                    className={classes.dangerZone}\r\n                                    onClick={handleTryMakeNotAdmin}\r\n                                >\r\n                                    Remove admin\r\n                                </Button>\r\n                            </ListItem>\r\n                            }\r\n                        </React.Fragment>\r\n                    }\r\n                </List>\r\n            </FormControl>\r\n        </ListItem>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\n//MUI components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//Custom components\r\nimport Info from './Components/Info'\r\nimport Password from \"./Components/Password\";\r\nimport DangerZone from \"./Components/DangerZone\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\n\r\n\r\nexport default function Account() {\r\n    const {user, isAdmin} = useAuth();\r\n    const {id} = useParams();\r\n    const [origUserdata, setOrigUserdata] = React.useState({\r\n        name: '',\r\n        email: '',\r\n        interests: ''\r\n    });\r\n    const [connecting, setConnecting] = React.useState(true);\r\n    let loading = false;\r\n\r\n    function init(pause = false) {\r\n        pause && setConnecting(true);\r\n        coreRequest().get(`users/${id}`)\r\n            .then(response => {\r\n                const data = {...response.body.data, interests: 'lol'};\r\n                setOrigUserdata(data);\r\n                pause && setConnecting(false);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                pause && setConnecting(false);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        init(true);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        init(true);\r\n    }, [id, user]);\r\n\r\n    if (loading || connecting) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <List>\r\n                <Info origUserdata={origUserdata} init={init}/>\r\n                {user && user.id === +id &&\r\n                <React.Fragment>\r\n                    <Divider/>\r\n                    <Password />\r\n                </React.Fragment>\r\n                }\r\n                {(user && user.id === +id || isAdmin) &&\r\n                <React.Fragment>\r\n                    <Divider/>\r\n                    <DangerZone viewed_user={origUserdata} updateInfo={init}/>\r\n                    <Divider/>\r\n                </React.Fragment>\r\n                }\r\n            </List>\r\n        </Grid>\r\n    );\r\n}","import React from \"react\";\r\nimport useStyles from \"../style\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n//MUI icons\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\n\r\n\r\nexport default function ThreadsListItem({thread, ...props}) {\r\n    const history = useHistory();\r\n\r\n    const primary = (\r\n        <Typography variant={'body2'}>\r\n            {thread.title}\r\n        </Typography>\r\n    );\r\n    const secondary = (\r\n        <>\r\n            {`${thread.reply_count} answers`}\r\n        </>\r\n    );\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem\r\n                button\r\n                onClick={event => changeRoute(`/thread/${thread.id}`)}\r\n            >\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                        <ImageIcon/>\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={primary} secondary={secondary}/>\r\n            </ListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nfunction UserCard({user, ...props}) {\r\n    const history = useHistory();\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid item xs={12} md={6}>\r\n            <Box p={1}>\r\n                <Card>\r\n                    <CardActionArea onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt={`Avatar of user ${user.name}`}\r\n                            height=\"140\"\r\n                            image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n                            title={user.name}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                {user.name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                {`${user.is_admin ? 'Admin | ' : ''}${user.email}`}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\" onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                            View profile\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default function Users() {\r\n    const [users, setUsers] = React.useState([]);\r\n    const [connecting, setConnecting] = React.useState(true);\r\n\r\n    React.useEffect(() => {\r\n        setConnecting(true);\r\n        coreRequest().get('users')\r\n            .then(response => {\r\n                setUsers(response.body.data);\r\n                setConnecting(false);\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n    if (connecting) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box p={1}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <Box p={1}>\r\n                            <Breadcrumbs aria-label=\"breadcrumb\">\r\n                                <Typography color=\"textPrimary\">Users</Typography>\r\n                            </Breadcrumbs>\r\n                        </Box>\r\n                    </Grid>\r\n                    {users.map(item => <UserCard key={`user-card-${item.id}`} user={item}/>)}\r\n                </Grid>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}","import React from \"react\";\r\nimport {useAuth} from \"../../../Utilities/Auth\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\n\r\n//Pages\r\nimport ThreadEditor from \"../../ThreadEditor\";\r\nimport Account from \"../../Account\";\r\nimport Users from \"../../Users\";\r\nimport ThreadsViewer from \"../../ThreadsViewer\";\r\nimport ThreadDetails from \"../../ThreadDetails\";\r\n\r\n\r\nexport default function PagesSwitch({articles, setArticles, ...props}) {\r\n    const {user} = useAuth();\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path={'/threads/:mode?'}>\r\n                <ThreadsViewer articles={articles} setArticles={setArticles}/>\r\n            </Route>\r\n            <Route path={'/thread/:id'}>\r\n                <ThreadDetails/>\r\n            </Route>\r\n            {user &&\r\n            <Route path={'/editthread/:id'}>\r\n                <ThreadEditor/>\r\n            </Route>\r\n            }\r\n            <Route path={'/user/:id'}>\r\n                <Account/>\r\n            </Route>\r\n            <Route path={'/users'}>\r\n                <Users/>\r\n            </Route>\r\n\r\n        </Switch>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport useStyles from \"./style\";\r\nimport {LightTheme, BaseTheme} from './../../Themes/DefaultTheme'\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {Route, Switch, useHistory, useLocation} from \"react-router-dom\";\r\nimport {withWidth, isWidthDown, isWidthUp} from \"@material-ui/core\";\r\nimport {coreRequest} from \"../../Utilities/Rest\";\r\nimport {useAuth} from \"../../Utilities/Auth\";\r\nimport qs from 'qs'\r\n\r\n\r\n//Pages\r\nimport ThreadsViewer from \"../ThreadsViewer\";\r\nimport ThreadDetails from \"../ThreadDetails\";\r\nimport ThreadEditor from \"../ThreadEditor\";\r\nimport AuthDialog from \"../Auth\";\r\nimport RegistrationDialog from \"../Registration\";\r\nimport Account from \"../Account\";\r\n\r\n//MUI components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\n//MUI icons\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport RecordVoiceOverIcon from '@material-ui/icons/RecordVoiceOver';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\n\r\n//Custom components\r\nimport ThreadsListItem from \"./Components/ThreadsListItem\";\r\nimport PagesSwitch from \"./Components/PagesSwitch\";\r\n\r\n\r\nfunction Layout({width, ...props}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [search, setSearch] = React.useState('');\r\n    const [articles, setArticles] = React.useState([]);\r\n    const [authData, setAuthData] = React.useState({email: null, password: null, remember: false});\r\n    const {user, setUser, setToken} = useAuth();\r\n    const [gotUser, setGotUser] = React.useState(false);\r\n    const location = useLocation();\r\n    const {register, login} = qs.parse(location.search, {ignoreQueryPrefix: true});\r\n    let loading = false;\r\n\r\n    const [topArticles, setTopArticles] = React.useState([]);\r\n\r\n    function changeRoute(route) {\r\n        history.push(route);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        //changeRoute('/threads');\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        coreRequest().get('users/me')\r\n            .then(response => {\r\n                setUser({...response.body.data, created_at: undefined, updated_at: undefined});\r\n                setGotUser(true);\r\n                console.log(`Automatically authorized as ${response.body.data.name}`);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        setUser(null);\r\n                        setGotUser(true);\r\n                        console.log(`Automatically authorized as guest`);\r\n                        break;\r\n                    default:\r\n                        console.error('Failed to auto-authorize, error:', error);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    function handleLoadTop10Threads() {\r\n        coreRequest().get('questions/top10')\r\n            .then(response => {\r\n                setTopArticles(response.body.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loading = true;\r\n        handleLoadTop10Threads();\r\n        const updater = setInterval(() => {\r\n            handleLoadTop10Threads();\r\n            console.log(`Sync [top10threads]: synchronizing (${new Date().toLocaleString()})`);\r\n        }, 30000);\r\n\r\n        return () => {\r\n            clearInterval(updater);\r\n        }\r\n    }, []);\r\n\r\n    function handleLogout() {\r\n        coreRequest().post('auth/logout')\r\n            .send({})\r\n            .then(response => {\r\n                setToken(null);\r\n                setUser(null);\r\n            })\r\n            .catch(error => {\r\n                switch (error.status) {\r\n                    case 401:\r\n                        changeRoute('?login=true');\r\n                        break;\r\n                    default:\r\n                        console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleFindQuestion() {\r\n        search && changeRoute(`/threads?search=${search}`);\r\n        !search && changeRoute('/threads');\r\n    }\r\n\r\n    function handleAuthenticated(user) {\r\n        changeRoute(location.pathname);\r\n    }\r\n\r\n    function handleAuthClose() {\r\n        changeRoute(location.pathname);\r\n        setAuthData({username: null, password: null});\r\n    }\r\n\r\n    function handleRegistrationClose() {\r\n        changeRoute(location.pathname);\r\n    }\r\n\r\n    function handleSearchInput(event) {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    function handleCreateThread(event) {\r\n        user && changeRoute('/editthread/new');\r\n        !user && changeRoute(`?login=true`);\r\n    }\r\n\r\n    if (loading || !gotUser) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={!!login} onClose={handleAuthClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Authentication</DialogTitle>\r\n                <AuthDialog authData={authData} setAuthData={setAuthData} onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            <Dialog aria-labelledby=\"auth-dialog\" open={!!register} onClose={handleRegistrationClose}>\r\n                <DialogTitle id=\"auth-dialog-title\">Registration</DialogTitle>\r\n                <RegistrationDialog onComplete={handleAuthenticated}/>\r\n            </Dialog>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Forum\r\n                    </Typography>\r\n                    {!user && <Button color=\"inherit\" onClick={() => changeRoute(`?register=true`)}>Sign up</Button>}\r\n                    {!user && <Button color=\"inherit\" onClick={() => changeRoute(`?login=true`)}>Login</Button>}\r\n                    {user &&\r\n                    <Button color=\"inherit\" onClick={event => changeRoute(`/user/${user.id}`)}>\r\n                        {user.name}\r\n                        <Avatar className={classes.avatar}>\r\n                            <ImageIcon/>\r\n                        </Avatar>\r\n                    </Button>\r\n                    }\r\n                    {user && <Button color=\"inherit\" onClick={handleLogout}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n                <Grid item xs={12} md={10} lg={8} id={'page'}>\r\n                    <Box>\r\n                        <ThemeProvider theme={LightTheme}>\r\n                            <Grid container className={classes.topLine}>\r\n                                <Grid item xs={12} md={2}/>\r\n                                <Grid item xs={12} md={7}>\r\n                                    <Box p={1}>\r\n                                        <div className={classes.searchLineBase}>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                variant=\"filled\"\r\n                                                label={'Find question'}\r\n                                                size={'small'}\r\n                                                name={'search'}\r\n                                                onChange={handleSearchInput}\r\n                                                autoComplete={'search'}\r\n                                            />\r\n                                            <Button\r\n                                                variant={'contained'}\r\n                                                color={'primary'}\r\n                                                onClick={handleFindQuestion}\r\n                                            >\r\n                                                <SearchIcon/>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={3}>\r\n                                    <div className={classes.createThreadButtonContainer}>\r\n                                        <Box p={1} className={classes.createThreadButtonBox}>\r\n                                            <Button\r\n                                                fullWidth\r\n                                                variant={'contained'}\r\n                                                color={'secondary'}\r\n                                                className={classes.createThreadButton}\r\n                                                onClick={handleCreateThread}\r\n                                            >\r\n                                                Create thread\r\n                                            </Button>\r\n                                        </Box>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ThemeProvider>\r\n                        <Grid container>\r\n                            <ThemeProvider theme={LightTheme}>\r\n                                <Grid item xs={12} md={2} className={classes.leftColumn}>\r\n                                    <Box p={1}>\r\n                                        <List>\r\n                                            <ListItem\r\n                                                dense\r\n                                                button\r\n                                                onClick={event => changeRoute('/threads')}\r\n                                            >\r\n                                                <FormatListBulletedIcon fontSize={'small'}/>\r\n                                                <ListItemText\r\n                                                    primary={\"All threads\"}\r\n                                                    className={classes.leftPanelButtonsText}\r\n                                                />\r\n                                            </ListItem>\r\n                                            {user &&\r\n                                            <React.Fragment>\r\n                                                <ListItem\r\n                                                    dense\r\n                                                    button\r\n                                                    onClick={event => changeRoute('/threads/my')}\r\n                                                >\r\n                                                    <RecordVoiceOverIcon fontSize={'small'}/>\r\n                                                    <ListItemText\r\n                                                        primary={\"My threads\"}\r\n                                                        className={classes.leftPanelButtonsText}\r\n                                                    />\r\n                                                </ListItem>\r\n                                                <ListItem\r\n                                                    dense\r\n                                                    button\r\n                                                    onClick={event => changeRoute('/threads/commented')}\r\n                                                >\r\n                                                    <RateReviewIcon fontSize={'small'}/>\r\n                                                    <ListItemText\r\n                                                        primary={\"Commented by me\"}\r\n                                                        className={classes.leftPanelButtonsText}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            </React.Fragment>\r\n                                            }\r\n                                            <Divider/>\r\n                                            {user &&\r\n                                            <ListItem\r\n                                                dense\r\n                                                button\r\n                                                onClick={event => changeRoute(`/user/${user.id}`)}\r\n                                            >\r\n                                                <AccountCircleIcon fontSize={'small'}/>\r\n                                                <ListItemText\r\n                                                    primary={\"My account\"}\r\n                                                    className={classes.leftPanelButtonsText}\r\n                                                />\r\n                                            </ListItem>\r\n                                            }\r\n                                            <ListItem\r\n                                                dense\r\n                                                button\r\n                                                onClick={event => changeRoute('/users')}\r\n                                            >\r\n                                                <PeopleIcon fontSize={'small'}/>\r\n                                                <ListItemText\r\n                                                    primary={\"Users\"}\r\n                                                    className={classes.leftPanelButtonsText}\r\n                                                />\r\n                                            </ListItem>\r\n                                        </List>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </ThemeProvider>\r\n                            <Grid item xs={12} md={7} className={classes.contentColumn}>\r\n                                <Grid container>\r\n                                    <PagesSwitch\r\n                                        articles={articles}\r\n                                        setArticles={setArticles}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3} className={classes.rightColumn}>\r\n                                <Box p={1}>\r\n                                    <List>\r\n                                        <ListItem>\r\n                                            <ListItemText primary={\"Top 10 threads\"}/>\r\n                                        </ListItem>\r\n                                        <Divider/>\r\n                                        {topArticles.map((item, index) => {\r\n                                            return (\r\n                                                <ThreadsListItem key={`top_artciles_${index}`} thread={item}/>\r\n                                            );\r\n                                        })}\r\n                                    </List>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n                {isWidthUp('sm', width) && <Grid item md={1} lg={2}/>}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withWidth()(Layout);","import React from 'react';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport Layout from \"./Pages/Layout\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {BaseTheme} from \"./Themes/DefaultTheme\";\r\nimport {AuthProvider} from \"./Utilities/Auth\";\r\nimport {ConfirmDialogProvider} from \"./Utilities/ConfirmDialog\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <AuthProvider>\r\n                <ThemeProvider theme={BaseTheme}>\r\n                    <ConfirmDialogProvider>\r\n                        <Router>\r\n                            <Layout/>\r\n                        </Router>\r\n                    </ConfirmDialogProvider>\r\n                </ThemeProvider>\r\n            </AuthProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}